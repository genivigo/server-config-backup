<?xml version="1.0" encoding="utf-8"?>
<cruise xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="cruise-config.xsd" schemaVersion="81">
  <server artifactsdir="artifacts" siteUrl="http://go.genivi.org" secureSiteUrl="https://go.genivi.org" purgeStart="10.0" purgeUpto="20.0" commandRepositoryLocation="genivi" serverId="0634fc43-adff-426b-b417-781a09b9c51a">
    <security>
      <passwordFile path="/gousers/users" />
      <roles>
        <role name="Guest">
          <users>
            <user>user</user>
            <user>guest</user>
            <user>StephenL</user>
            <user>PedroA</user>
            <user>tpollard</user>
            <user>buildmonitor</user>
            <user>mhoyer</user>
            <user>gmacario</user>
            <user>marcor</user>
            <user>ChunsungJung</user>
            <user>tolkien</user>
            <user>helmuts</user>
            <user>amcgee7</user>
            <user>philippec</user>
            <user>jonathanmaw</user>
            <user>RudolfStreif</user>
            <user>ChrisSchulenberg</user>
            <user>JBocklage</user>
            <user>GunnarA</user>
          </users>
        </role>
        <role name="Developer">
          <users>
            <user>PedroA</user>
            <user>StephenL</user>
            <user>tpollard</user>
            <user>mhoyer</user>
            <user>gmacario</user>
            <user>marcor</user>
            <user>ChunsungJung</user>
            <user>tolkien</user>
            <user>helmuts</user>
            <user>amcgee7</user>
            <user>philippec</user>
            <user>jonathanmaw</user>
            <user>RudolfStreif</user>
            <user>ChrisSchulenberg</user>
            <user>JBocklage</user>
            <user>GunnarA</user>
          </users>
        </role>
        <role name="GDP_Developer">
          <users>
            <user>StephenL</user>
            <user>PedroA</user>
            <user>tpollard</user>
            <user>jonathanmaw</user>
            <user>GunnarA</user>
          </users>
        </role>
      </roles>
      <admins>
        <user>PedroA</user>
        <user>GunnarA</user>
      </admins>
    </security>
  </server>
  <scms>
    <scm id="30b07577-5ed3-4441-9558-3cf1595a678c" name="meta-genivi-dev">
      <pluginConfiguration id="github.pr" version="1" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://github.com/GENIVI/meta-genivi-dev.git</value>
        </property>
      </configuration>
    </scm>
    <scm id="a1a82896-a41b-4684-a7e8-4d43bf691438" name="genivi-dev-platform">
      <pluginConfiguration id="github.pr" version="1" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://github.com/GENIVI/genivi-dev-platform</value>
        </property>
      </configuration>
    </scm>
    <scm id="077cfe93-bc9e-461a-9a5c-e82796ccb710" name="FIDL_Files">
      <pluginConfiguration id="github.pr" version="1" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://github.com/rstreif/genivi_software_management.git</value>
        </property>
      </configuration>
    </scm>
    <scm id="55fece0c-628e-4ceb-abe8-64c792a6b1ea" name="meta-ivi">
      <pluginConfiguration id="github.pr" version="1" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://github.com/GENIVI/meta-ivi.git</value>
        </property>
        <property>
          <key>username</key>
          <value>dummy</value>
        </property>
      </configuration>
    </scm>
    <scm id="6970e0d3-fe3f-41a3-9fc2-6830e89757de" name="gunnarx-gdp">
      <pluginConfiguration id="github.pr" version="1" />
      <configuration>
        <property>
          <key>url</key>
          <value>git://github.com/gunnarx/genivi-dev-platform.git</value>
        </property>
      </configuration>
    </scm>
  </scms>
  <pipelines group="GENIVI_Baselines">
    <authorization>
      <view>
        <role>Guest</role>
      </view>
      <admins>
        <role>Developer</role>
      </admins>
    </authorization>
    <pipeline name="yocto-baseline-9" labeltemplate="9.0:${meta-ivi[:8]}-build:${COUNT}" isLocked="false" template="meta-ivi-build">
      <timer>0 0 2 11 7 ?</timer>
      <environmentvariables>
        <variable name="IMAGE_NAME">
          <value>kronos-image</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://git.yoctoproject.org/meta-ivi" branch="9.0" dest="meta-ivi" materialName="meta-ivi" />
        <git url="git://git.yoctoproject.org/poky" branch="fido" dest="poky" autoUpdate="false" materialName="poky_fido" />
        <git url="git://git.openembedded.org/meta-openembedded" branch="fido" dest="meta-openembedded" autoUpdate="false" materialName="meta-openembedded_fido" />
        <git url="https://github.com/gunnarx/baseline_ci_helper.git" dest="baseline_ci_helper" autoUpdate="false" materialName="baseline_ci_helper" />
      </materials>
    </pipeline>
    <pipeline name="yocto-baseline-10" labeltemplate="10.0:${meta-ivi[:8]}-build:${COUNT}" isLocked="false" template="meta-ivi-build">
      <environmentvariables>
        <variable name="IMAGE_NAME">
          <value>leviathan-image</value>
        </variable>
        <variable name="MACHINE">
          <value>qemux86-64</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="http://git.yoctoproject.org/git/meta-ivi" branch="10.0" dest="meta-ivi" materialName="meta-ivi" />
        <git url="http://git.yoctoproject.org/git/poky.git" branch="jethro" dest="poky" autoUpdate="false" materialName="poky_jethro" />
        <git url="git://git.openembedded.org/meta-openembedded" branch="jethro" dest="meta-openembedded" autoUpdate="false" materialName="meta-oe_jethro" />
        <git url="https://github.com/gunnarx/baseline_ci_helper.git" dest="baseline_ci_helper" autoUpdate="false" materialName="baseline_ci_helper" />
      </materials>
    </pipeline>
    <pipeline name="yocto-baseline-11" labeltemplate="meta-ivi:${meta-ivi[:8]}-build:${COUNT}" isLocked="false" template="meta-ivi-build">
      <timer>0 0 3 17 8 ?</timer>
      <environmentvariables>
        <variable name="MACHINE">
          <value>qemux86-64</value>
        </variable>
        <variable name="IMAGE_NAME">
          <value>miranda-image</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/genivi/meta-ivi.git" branch="11.0" dest="meta-ivi" materialName="meta-ivi" />
        <git url="git://git.openembedded.org/meta-openembedded" branch="krogoth" dest="meta-openembedded" autoUpdate="false" materialName="meta-openembedded_krogoth" />
        <git url="https://github.com/gunnarx/baseline_ci_helper.git" dest="baseline_ci_helper" autoUpdate="false" materialName="baseline_ci_helper" />
        <git url="http://git.yoctoproject.org/git/poky.git" branch="krogoth" dest="poky" autoUpdate="false" materialName="poky_krogoth" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="GENIVI_Development_Platform">
    <authorization>
      <view>
        <role>Guest</role>
      </view>
      <admins>
        <role>GDP_Developer</role>
      </admins>
    </authorization>
    <pipeline name="GDP-Yocto-Minnowboard" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic">
      <timer>0 0 0 * * ?</timer>
      <environmentvariables>
        <variable name="MACHINE">
          <value>minnowboard</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/GENIVI/genivi-dev-platform.git" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-QEMU_x86-64" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic">
      <timer>0 0 2 * * ?</timer>
      <environmentvariables>
        <variable name="MACHINE">
          <value>qemux86-64</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/GENIVI/genivi-dev-platform.git" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-Porter-with-GFX" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic">
      <timer onlyOnChanges="true">0 0 22 * * ?</timer>
      <environmentvariables>
        <variable name="MACHINE">
          <value>porter</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/GENIVI/genivi-dev-platform.git" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-Koelsch-with-GFX" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic">
      <timer>0 0 6 * * ?</timer>
      <environmentvariables>
        <variable name="MACHINE">
          <value>porter</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/GENIVI/genivi-dev-platform.git" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-Silk-with-GFX" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic">
      <timer onlyOnChanges="true">0 0 6 * * ?</timer>
      <environmentvariables>
        <variable name="MACHINE">
          <value>silk</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="http://github.com/GENIVI/genivi-dev-platform.git" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-RaspberryPi2" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic">
      <timer>0 0 20 * * ?</timer>
      <environmentvariables>
        <variable name="MACHINE">
          <value>raspberrypi2</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/GENIVI/genivi-dev-platform.git" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Baseline_Pull_Request_Checking">
    <authorization>
      <view>
        <role>Developer</role>
        <role>Guest</role>
      </view>
      <admins>
        <role>GDP_Developer</role>
      </admins>
    </authorization>
    <pipeline name="meta-ivi-Yocto-QEMU_x86-64-GITHUB-PR" labeltemplate="meta-ivi:${meta-ivi[:8]}-build:${COUNT}" isLocked="false" template="meta-ivi-build">
      <timer onlyOnChanges="true">0 0 3 * * ?</timer>
      <environmentvariables>
        <variable name="IMAGE_NAME">
          <value>leviathan-image</value>
        </variable>
        <variable name="MACHINE">
          <value>qemux86-64</value>
        </variable>
      </environmentvariables>
      <materials>
        <scm ref="55fece0c-628e-4ceb-abe8-64c792a6b1ea" dest="meta-ivi" />
        <git url="http://git.yoctoproject.org/git/poky.git" branch="jethro" dest="poky" autoUpdate="false" materialName="poky_jethro" />
        <git url="git://git.openembedded.org/meta-openembedded" branch="jethro" dest="meta-openembedded" autoUpdate="false" materialName="meta-oe_jethro" />
        <git url="https://github.com/gunnarx/baseline_ci_helper.git" dest="baseline_ci_helper" autoUpdate="false" materialName="baseline_ci_helper" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="GDP_CI_Other">
    <authorization>
      <view>
        <role>Guest</role>
      </view>
    </authorization>
    <pipeline name="GDP-Yocto-QEMU_x86-64-Latest-meta-genivi-dev" template="Yocto_GDP_generic_latest_meta_genivi_demo">
      <environmentvariables>
        <variable name="MACHINE">
          <value>qemux86-64</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/genivi/genivi-dev-platform" dest="gdp" materialName="genivi-dev-platform.git" />
        <git url="https://github.com/GENIVI/meta-genivi-dev" dest="meta-genivi-dev" materialName="meta-genivi-dev" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="GDP_Pull_Request_Checking">
    <authorization>
      <view>
        <role>Guest</role>
      </view>
      <admins>
        <role>GDP_Developer</role>
      </admins>
    </authorization>
    <pipeline name="GDP-Yocto-QEMU_x86-64-meta-genivi-dev-GITHUB-PR" isLocked="false" template="Yocto_GDP_generic_latest_meta_genivi_demo">
      <environmentvariables>
        <variable name="MACHINE">
          <value>qemux86-64</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/genivi/genivi-dev-platform.git" dest="gdp" materialName="genivi-dev-platform.git" />
        <scm ref="30b07577-5ed3-4441-9558-3cf1595a678c" dest="meta-genivi-dev" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-PORTER-meta-genivi-dev-GITHUB-PR" isLocked="false" template="Yocto_GDP_generic_latest_meta_genivi_demo">
      <timer>0 0 23 16 8 ?</timer>
      <environmentvariables>
        <variable name="MACHINE">
          <value>porter</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/genivi/genivi-dev-platform.git" dest="gdp" materialName="genivi-dev-platform.git" />
        <scm ref="30b07577-5ed3-4441-9558-3cf1595a678c" dest="meta-genivi-dev" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-RPI2-meta-genivi-dev-GITHUB-PR" isLocked="false" template="Yocto_GDP_generic_latest_meta_genivi_demo">
      <timer>0 0 4 17 8 ?</timer>
      <environmentvariables>
        <variable name="MACHINE">
          <value>raspberrypi2</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/genivi/genivi-dev-platform.git" dest="gdp" materialName="genivi-dev-platform.git" />
        <scm ref="30b07577-5ed3-4441-9558-3cf1595a678c" dest="meta-genivi-dev" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-MINNOWBOARD-meta-genivi-dev-GITHUB-PR" isLocked="false" template="Yocto_GDP_generic_latest_meta_genivi_demo">
      <timer>0 2 1 17 8 ?</timer>
      <environmentvariables>
        <variable name="MACHINE">
          <value>minnowboard</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/genivi/genivi-dev-platform.git" dest="gdp" materialName="genivi-dev-platform.git" />
        <scm ref="30b07577-5ed3-4441-9558-3cf1595a678c" dest="meta-genivi-dev" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-QEMU_x86-64-GITHUB-PR" template="Yocto_GDP_generic">
      <environmentvariables>
        <variable name="MACHINE">
          <value>qemux86-64</value>
        </variable>
      </environmentvariables>
      <materials>
        <scm ref="a1a82896-a41b-4684-a7e8-4d43bf691438" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-PORTER-GITHUB-PR" template="Yocto_GDP_generic">
      <params>
        <param name="agent">2131ce1bd33e</param>
      </params>
      <environmentvariables>
        <variable name="MACHINE">
          <value>porter</value>
        </variable>
      </environmentvariables>
      <materials>
        <scm ref="a1a82896-a41b-4684-a7e8-4d43bf691438" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-RPI2-GITHUB-PR" isLocked="false" template="Yocto_GDP_generic">
      <timer>0 0 8 17 8 ?</timer>
      <environmentvariables>
        <variable name="MACHINE">
          <value>raspberrypi2</value>
        </variable>
      </environmentvariables>
      <materials>
        <scm ref="a1a82896-a41b-4684-a7e8-4d43bf691438" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-MINNOWBOARD-GITHUB-PR" template="Yocto_GDP_generic">
      <environmentvariables>
        <variable name="MACHINE">
          <value>minnowboard</value>
        </variable>
      </environmentvariables>
      <materials>
        <scm ref="a1a82896-a41b-4684-a7e8-4d43bf691438" />
      </materials>
    </pipeline>
  </pipelines>
  <templates>
    <pipeline name="Yocto_GDP_generic">
      <authorization>
        <admins>
          <user>PedroA</user>
          <user>jonathanmaw</user>
          <user>tpollard</user>
          <user>gmacario</user>
        </admins>
      </authorization>
      <stage name="build">
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="rm" workingdir="gdp-src-build">
                <arg>-rf</arg>
                <arg>tmp</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source ./init.sh $MACHINE</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "porter" || "$MACHINE" == silk ]]; then cd meta-renesas/meta-rcar-gen2 &amp;&amp; ./copy_gfx_software_$MACHINE.sh /var/go/sgx_bin; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "porter" || "$MACHINE" == silk ]];  then cd meta-renesas/meta-rcar-gen2 &amp;&amp; ./copy_mm_software_lcb.sh /var/go/sgx_bin/; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp-src-build/conf">
                <arg>-c</arg>
                <arg>/bin/echo -e 'DL_DIR = "/var/cache/yocto/downloads"\nSSTATE_DIR = "/var/cache/yocto/sstate"' &gt;&gt;local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.name</arg>
                <arg>Go Server</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.email</arg>
                <arg>no_email@genivigo.com</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source poky/oe-init-build-env gdp-src-build &amp;&amp; bitbake genivi-dev-platform</arg>
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -f logs.tar logs.tar.gz &amp;&amp; find gdp-src-build/tmp/work \( -name "*.log" -o -name "log.*" -o -name "run.*" \) -print0 | xargs -0 tar uf logs.tar &amp;&amp; gzip logs.tar</arg>
                <runif status="any" />
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
            </resources>
            <artifacts>
              <artifact src="logs.tar.gz" />
              <artifact src="gdp-src-build/tmp/deploy/licenses" />
              <artifact src="gdp-src-build/tmp/deploy/licenses/genivi-dev-platform*/license.manifest" />
              <artifact src="gdp-src-build/tmp/deploy/licenses/genivi-dev-platform*/package.manifest" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Yocto_GDP_generic_release">
      <authorization>
        <admins>
          <user>PedroA</user>
          <user>jonathanmaw</user>
          <user>tpollard</user>
          <user>gmacario</user>
        </admins>
      </authorization>
      <stage name="build">
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="rm" workingdir="gdp-src-build">
                <arg>-rf</arg>
                <arg>tmp</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source ./init.sh $MACHINE</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mkdir gdp-src-build/staging/</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>tar -zcf "gdp-src-build/staging/oe-source.tar.gz" --exclude=gdp-src-build/{bitbake.lock,buildhistory,cache,downloads,sstate-cache,tmp,staging} --exclude=meta-{renesas,raspberrypi,intel,qcom} *</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp-src-build/conf">
                <arg>-c</arg>
                <arg>/bin/echo -e 'INHERIT += "archiver"\nARCHIVER_MODE[src] = "original"\nCOPY_LIC_MANIFEST = "1"\nCOPY_LIC_DIRS = "1"'&gt;&gt;local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.name</arg>
                <arg>Go Server</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.email</arg>
                <arg>no_email@genivigo.com</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source poky/oe-init-build-env gdp-src-build &amp;&amp; bitbake genivi-dev-platform</arg>
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>cp gdp-src-build/tmp/deploy/licenses/genivi-dev-platform-*/license.manifest gdp-src-build/staging</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>cp gdp-src-build/tmp/deploy/images/*/genivi-dev-platform-*.rootfs.manifest gdp-src-build/staging</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>tar -zcf gdp-src-build/staging/licenses.tar.gz -C gdp-src-build/tmp/deploy/licenses .</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>tar -zcf gdp-src-build/staging/sources.tar.gz -C gdp-src-build/tmp/deploy/sources .</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>gzip -c gdp-src-build/tmp/deploy/images/*/genivi-dev-platform-qemux86-64.ext4 &gt; gdp-src-build/staging/genivi-dev-platform-qemux86-64.ext4.gz</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>cp gdp-src-build/tmp/deploy/images/*/bzImage gdp-src-build/staging</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
            </resources>
            <artifacts>
              <artifact src="gdp-src-build/staging/" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Yocto_GDP_generic_latest_meta_genivi_demo">
      <authorization>
        <admins>
          <user>PedroA</user>
          <user>jonathanmaw</user>
          <user>tpollard</user>
          <user>gmacario</user>
        </admins>
      </authorization>
      <stage name="build">
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="bash" workingdir="gdp/gdp-src-build/">
                <arg>-c</arg>
                <arg>rm -rf tmp</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp">
                <arg>-c</arg>
                <arg>source ./init.sh $MACHINE</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "porter" || "$MACHINE" == silk ]]; then cd meta-renesas/meta-rcar-gen2 &amp;&amp; ./copy_gfx_software_$MACHINE.sh /var/go/sgx_bin; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "porter" || "$MACHINE" == silk ]];  then cd meta-renesas/meta-rcar-gen2 &amp;&amp; ./copy_mm_software_lcb.sh /var/go/sgx_bin/; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="rm" workingdir="gdp">
                <arg>-rf</arg>
                <arg>meta-genivi-dev</arg>
                <runif status="passed" />
              </exec>
              <exec command="mv" workingdir="gdp">
                <arg>../meta-genivi-dev</arg>
                <arg>meta-genivi-dev</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp/gdp-src-build/conf">
                <arg>-c</arg>
                <arg>/bin/echo -e 'DL_DIR = "/var/cache/yocto/downloads"\nSSTATE_DIR = "/var/cache/yocto/sstate"' &gt;&gt;local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.name</arg>
                <arg>Go Server</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.email</arg>
                <arg>no_email@genivigo.com</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp">
                <arg>-c</arg>
                <arg>source poky/oe-init-build-env gdp-src-build &amp;&amp; bitbake genivi-dev-platform</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -f logs.tar logs.tar.gz &amp;&amp; find gdp/gdp-src-build/tmp/work \( -name "*.log" -o -name "log.*" -o -name "run.*" \) -print0 | xargs -0 tar uf logs.tar &amp;&amp; gzip logs.tar</arg>
                <runif status="any" />
              </exec>
              <exec command="rm">
                <arg>-r</arg>
                <arg>gdp</arg>
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
            </resources>
            <artifacts>
              <artifact src="logs.tar.gz" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Yocto_GDP_generic_reuse_tmp">
      <authorization>
        <admins>
          <user>PedroA</user>
          <user>jonathanmaw</user>
          <user>tpollard</user>
          <user>gmacario</user>
        </admins>
      </authorization>
      <stage name="build">
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source ./init.sh $MACHINE</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "porter" || "$MACHINE" == silk ]]; then cd meta-renesas/meta-rcar-gen2 &amp;&amp; ./copy_gfx_software_$MACHINE.sh /var/go/sgx_bin; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "porter" || "$MACHINE" == silk ]];  then cd meta-renesas/meta-rcar-gen2 &amp;&amp; ./copy_mm_software_lcb.sh /var/go/sgx_bin/; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp-src-build/conf">
                <arg>-c</arg>
                <arg>/bin/echo -e 'DL_DIR = "/var/cache/yocto/downloads"\nSSTATE_DIR = "/var/cache/yocto/sstate"' &gt;&gt;local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.name</arg>
                <arg>Go Server</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.email</arg>
                <arg>no_email@genivigo.com</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source poky/oe-init-build-env gdp-src-build &amp;&amp; bitbake genivi-dev-platform</arg>
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -f logs.tar logs.tar.gz &amp;&amp; find gdp-src-build/tmp/work \( -name "*.log" -o -name "log.*" -o -name "run.*" \) -print0 | xargs -0 tar uf logs.tar &amp;&amp; gzip logs.tar</arg>
                <runif status="any" />
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
            </resources>
            <artifacts>
              <artifact src="logs.tar.gz" />
              <artifact src="gdp-src-build/tmp/deploy/licenses" />
              <artifact src="gdp-src-build/tmp/deploy/licenses/genivi-dev-platform*/license.manifest" />
              <artifact src="gdp-src-build/tmp/deploy/licenses/genivi-dev-platform*/package.manifest" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="franca_install_automation">
      <authorization>
        <admins>
          <user>gmacario</user>
        </admins>
      </authorization>
      <stage name="install_stage">
        <jobs>
          <job name="install_job">
            <environmentvariables>
              <variable name="EXIT_ON_FAILURE">
                <value>true</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="./script.sh" />
              <exec command="bash">
                <arg>-c</arg>
                <arg>cd /var/go/tools &amp;&amp; tar cfz ${GO_PIPELINE_NAME}_${GO_REVISION_FRANCA_INSTALL_AUTOMATION_GIT}.tar.gz autoeclipse</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mv /var/go/tools/${GO_PIPELINE_NAME}_${GO_REVISION_FRANCA_INSTALL_AUTOMATION_GIT}.tar.gz .</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="franca_install*.tar.gz" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="CMAKE_build">
      <authorization>
        <admins>
          <user>PedroA</user>
          <user>gmacario</user>
          <user>marcor</user>
          <user>tpollard</user>
          <user>jonathanmaw</user>
        </admins>
      </authorization>
      <stage name="build" artifactCleanupProhibited="true">
        <jobs>
          <job name="cmake_and_make">
            <tasks>
              <exec command="rm">
                <arg>-rf</arg>
                <arg>build</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>build</arg>
                <runif status="passed" />
              </exec>
              <exec command="cmake" workingdir="build">
                <arg>..</arg>
                <runif status="passed" />
              </exec>
              <exec command="make" workingdir="build">
                <arg>V=1</arg>
                <arg>-j2</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>cmake</resource>
            </resources>
            <artifacts>
              <artifact src="build" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="meta-ivi-build">
      <authorization>
        <admins>
          <user>PedroA</user>
          <user>gmacario</user>
          <user>jonathanmaw</user>
          <user>mhoyer</user>
          <user>tolkien</user>
          <user>tpollard</user>
        </admins>
      </authorization>
      <stage name="Build">
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="git" workingdir="meta-ivi">
                <arg>config</arg>
                <arg>user.name</arg>
                <arg>Go Agent</arg>
                <runif status="passed" />
              </exec>
              <exec command="git" workingdir="meta-ivi">
                <arg>config</arg>
                <arg>user.email</arg>
                <arg>no_email@genivigo.com</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="baseline_ci_helper">
                <arg>-c</arg>
                <arg>./checkout_layer_hash.sh poky</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="baseline_ci_helper">
                <arg>-c</arg>
                <arg>./checkout_layer_hash.sh meta-openembedded</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>export TEMPLATECONF=$PWD/meta-ivi/meta-ivi/conf &amp;&amp; source poky/oe-init-build-env</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="build/conf">
                <arg>-c</arg>
                <arg>/bin/echo -e 'DL_DIR = "/var/cache/yocto/downloads"\nSSTATE_DIR = "/var/cache/yocto/sstate"' &gt;&gt;local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source poky/oe-init-build-env &amp;&amp; bitbake -c fetch linux-yocto</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source poky/oe-init-build-env &amp;&amp; bitbake $IMAGE_NAME</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -f logs.tar logs.tar.gz &amp;&amp; find build/tmp/work \( -name "*.log" -o -name "log.*" -o -name "run.*" \) -print0 | xargs -0 tar uf logs.tar &amp;&amp; gzip logs.tar</arg>
                <runif status="any" />
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
            </resources>
            <artifacts>
              <artifact src="logs.tar.gz" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Yocto_GDP_build_with_SDK">
      <authorization>
        <admins>
          <user>PedroA</user>
          <user>jonathanmaw</user>
          <user>tpollard</user>
          <user>gmacario</user>
        </admins>
      </authorization>
      <stage name="build">
        <approval type="manual" />
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="rm" workingdir="gdp-src-build">
                <arg>-rf</arg>
                <arg>tmp</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source ./init.sh $MACHINE</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "porter" || "$MACHINE" == silk ]]; then cd meta-renesas/meta-rcar-gen2 &amp;&amp; ./copy_gfx_software_$MACHINE.sh /var/go/sgx_bin; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "porter" || "$MACHINE" == silk ]];  then cd meta-renesas/meta-rcar-gen2 &amp;&amp; ./copy_mm_software_lcb.sh /var/go/sgx_bin/; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.name</arg>
                <arg>Go Server</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.email</arg>
                <arg>no_email@genivigo.com</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp-src-build/conf">
                <arg>-c</arg>
                <arg>echo -e 'BB_NUMBER_THREADS = "2"\nPARALLEL_MAKE = "-j2"\nINHERIT += "rm_work"' &gt;&gt; local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp-src-build/conf">
                <arg>-c</arg>
                <arg>/bin/echo -e 'DL_DIR = "/var/cache/yocto/downloads"\nSSTATE_DIR = "/var/cache/yocto/sstate"' &gt;&gt;local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$BUILD_SDK" != "true" ]] ; then source poky/oe-init-build-env gdp-src-build &amp;&amp; bitbake genivi-dev-platform ; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$BUILD_SDK" == "true" ]] ; then source poky/oe-init-build-env gdp-src-build &amp;&amp; bitbake genivi-dev-platform-sdk ; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$BUILD_SDK" == "true" ]] ; then source poky/oe-init-build-env gdp-src-build &amp;&amp; bitbake meta-ide-support ; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -f logs.tar logs.tar.gz &amp;&amp; find gdp-src-build/tmp/work \( -name "*.log" -o -name "log.*" -o -name "run.*" \) -print0 | xargs -0 tar uf logs.tar &amp;&amp; gzip logs.tar</arg>
                <runif status="any" />
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
            </resources>
            <artifacts>
              <artifact src="gdp-src-build/tmp/deploy/licenses" dest="results" />
              <artifact src="gdp-src-build/tmp/deploy/licenses/genivi-dev-platform*/license.manifest" dest="results" />
              <artifact src="gdp-src-build/tmp/deploy/licenses/genivi-dev-platform*/package.manifest" dest="results" />
              <artifact src="gdp-src-build/tmp/deploy/sdk*" dest="results" />
              <artifact src="logs.tar.gz" dest="results" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Wipe_dir_pattern">
      <authorization>
        <admins>
          <user>tpollard</user>
          <user>PedroA</user>
          <user>jonathanmaw</user>
          <user>StephenL</user>
        </admins>
      </authorization>
      <stage name="stage" fetchMaterials="false">
        <approval type="manual" />
        <jobs>
          <job name="job">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>echo "dir-pattern glob matches: " &amp;&amp; ls #{dir_pattern} || true</arg>
                <runif status="any" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>echo "Disk usage:" &amp;&amp; du -hs #{dir_pattern} || true</arg>
                <runif status="any" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -rf #{dir_pattern}</arg>
                <runif status="any" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>echo "Pipelines disk usage:" &amp;&amp; du -hs /var/lib/go-agent/pipelines/* || true</arg>
                <runif status="any" />
              </exec>
            </tasks>
            <resources>
              <resource>#{agent}</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </templates>
  <agents>
    <agent hostname="codethink-genivigo-agent1-x86" ipaddress="192.168.122.1" uuid="98b572c4-d559-4ed2-8b00-f4c25851e443">
      <resources>
        <resource>ct_test</resource>
        <resource>codethink-genivigo-agent1-x86</resource>
        <resource>yocto_build</resource>
        <resource>renesas_binaries</resource>
      </resources>
    </agent>
    <agent hostname="2131ce1bd33e" ipaddress="172.17.0.48" uuid="ce4f9ef6-91a4-44c3-881e-3486ff87a2aa">
      <resources>
        <resource>cmake</resource>
        <resource>maven</resource>
        <resource>libtool</resource>
        <resource>lbs</resource>
        <resource>renesas_binaries</resource>
        <resource>ga_test</resource>
        <resource>2131ce1bd33e</resource>
        <resource>yocto_build</resource>
        <resource>mount_exec</resource>
        <resource>vagrant</resource>
      </resources>
    </agent>
    <agent hostname="go-agent1" ipaddress="10.100.10.120" uuid="eb6be62e-2380-4537-b74b-18ff7265ac4c">
      <resources>
        <resource>new_test</resource>
        <resource>yocto_build</resource>
        <resource>go-agent1</resource>
      </resources>
    </agent>
  </agents>
</cruise>

