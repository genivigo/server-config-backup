<?xml version="1.0" encoding="utf-8"?>
<cruise xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="cruise-config.xsd" schemaVersion="88">
  <server artifactsdir="artifacts" siteUrl="http://go.genivi.org" secureSiteUrl="https://go.genivi.org" purgeStart="10.0" purgeUpto="20.0" agentAutoRegisterKey="a54677b2-cdae-4577-bb1d-c1241468c24f" commandRepositoryLocation="genivi" serverId="0634fc43-adff-426b-b417-781a09b9c51a">
    <security>
      <passwordFile path="/gousers/users" />
      <roles>
        <role name="Guest">
          <users>
            <user>user</user>
            <user>guest</user>
            <user>StephenL</user>
            <user>PedroA</user>
            <user>tpollard</user>
            <user>buildmonitor</user>
            <user>mhoyer</user>
            <user>gmacario</user>
            <user>marcor</user>
            <user>ChunsungJung</user>
            <user>tolkien</user>
            <user>helmuts</user>
            <user>amcgee7</user>
            <user>philippec</user>
            <user>jonathanmaw</user>
            <user>RudolfStreif</user>
            <user>ChrisSchulenberg</user>
            <user>JBocklage</user>
            <user>GunnarA</user>
            <user>RobertM</user>
            <user>EBoto</user>
            <user>AndreasR</user>
            <user>tmohammad</user>
            <user>alejalonso</user>
            <user>zeenix</user>
            <user>dunderroffe</user>
          </users>
        </role>
        <role name="Developer">
          <users>
            <user>PedroA</user>
            <user>StephenL</user>
            <user>tpollard</user>
            <user>mhoyer</user>
            <user>gmacario</user>
            <user>marcor</user>
            <user>ChunsungJung</user>
            <user>tolkien</user>
            <user>helmuts</user>
            <user>amcgee7</user>
            <user>philippec</user>
            <user>jonathanmaw</user>
            <user>RudolfStreif</user>
            <user>ChrisSchulenberg</user>
            <user>JBocklage</user>
            <user>GunnarA</user>
            <user>RobertM</user>
            <user>EBoto</user>
            <user>buildmonitor</user>
            <user>AndreasR</user>
            <user>tmohammad</user>
            <user>alejalonso</user>
            <user>zeenix</user>
            <user>dunderroffe</user>
            <user>OscarA</user>
          </users>
        </role>
        <role name="GDP_Developer">
          <users>
            <user>StephenL</user>
            <user>PedroA</user>
            <user>tpollard</user>
            <user>jonathanmaw</user>
            <user>GunnarA</user>
            <user>RobertM</user>
            <user>EBoto</user>
            <user>AndreasR</user>
            <user>zeenix</user>
            <user>dunderroffe</user>
            <user>OscarA</user>
          </users>
        </role>
      </roles>
      <admins>
        <user>GunnarA</user>
        <user>tmohammad</user>
        <user>dunderroffe</user>
        <user>OscarA</user>
      </admins>
    </security>
  </server>
  <scms>
    <scm id="30b07577-5ed3-4441-9558-3cf1595a678c" name="meta-genivi-dev">
      <pluginConfiguration id="github.pr" version="1" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://github.com/GENIVI/meta-genivi-dev.git</value>
        </property>
      </configuration>
    </scm>
    <scm id="a1a82896-a41b-4684-a7e8-4d43bf691438" name="genivi-dev-platform">
      <pluginConfiguration id="github.pr" version="1" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://github.com/GENIVI/genivi-dev-platform</value>
        </property>
      </configuration>
    </scm>
    <scm id="077cfe93-bc9e-461a-9a5c-e82796ccb710" name="FIDL_Files">
      <pluginConfiguration id="github.pr" version="1" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://github.com/rstreif/genivi_software_management.git</value>
        </property>
      </configuration>
    </scm>
    <scm id="55fece0c-628e-4ceb-abe8-64c792a6b1ea" name="meta-ivi">
      <pluginConfiguration id="github.pr" version="1" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://github.com/GENIVI/meta-ivi.git</value>
        </property>
        <property>
          <key>username</key>
          <value>dummy</value>
        </property>
      </configuration>
    </scm>
    <scm id="6970e0d3-fe3f-41a3-9fc2-6830e89757de" name="gunnarx-gdp">
      <pluginConfiguration id="github.pr" version="1" />
      <configuration>
        <property>
          <key>url</key>
          <value>git://github.com/gunnarx/genivi-dev-platform.git</value>
        </property>
      </configuration>
    </scm>
  </scms>
  <pipelines group="GENIVI_Baselines">
    <authorization>
      <view>
        <user>guest</user>
        <role>Guest</role>
      </view>
      <admins>
        <role>Developer</role>
      </admins>
    </authorization>
    <pipeline name="yocto-baseline-11" labeltemplate="meta-ivi:${meta-ivi[:8]}-build:${COUNT}" isLocked="false" template="meta-ivi-build">
      <environmentvariables>
        <variable name="MACHINE">
          <value>qemux86-64</value>
        </variable>
        <variable name="IMAGE_NAME">
          <value>miranda-image</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/genivi/meta-ivi.git" branch="11.0" dest="meta-ivi" materialName="meta-ivi" />
        <git url="git://git.openembedded.org/meta-openembedded" branch="krogoth" dest="meta-openembedded" autoUpdate="false" materialName="meta-openembedded_krogoth" />
        <git url="https://github.com/genivi/baseline_ci_helper.git" dest="baseline_ci_helper" autoUpdate="false" materialName="baseline_ci_helper" />
        <git url="http://git.yoctoproject.org/git/poky.git" branch="krogoth" dest="poky" autoUpdate="false" materialName="poky_krogoth" />
      </materials>
    </pipeline>
    <pipeline name="yocto-baseline-12" labeltemplate="meta-ivi.12.0:${meta-ivi.12.0[:8]}-build:${COUNT}" isLocked="false" template="meta-ivi-build">
      <environmentvariables>
        <variable name="MACHINE">
          <value>qemux86-64</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/genivi/meta-ivi.git" branch="12.0" dest="meta-ivi" materialName="meta-ivi.12.0" />
        <git url="git://git.openembedded.org/meta-openembedded" branch="morty" dest="meta-openembedded" autoUpdate="false" materialName="meta-openembedded.morty" />
        <git url="http://git.yoctoproject.org/git/poky.git" branch="morty" dest="poky" autoUpdate="false" materialName="poky.morty" />
        <git url="https://github.com/genivi/baseline_ci_helper.git" dest="baseline_ci_helper" autoUpdate="false" materialName="baseline_ci_helper" />
      </materials>
    </pipeline>
    <pipeline name="yocto-baseline-13-qemux86-64" labeltemplate="meta-ivi.13.0:${meta-ivi.13.0[:8]}-build:${COUNT}" isLocked="false" template="meta-ivi-build">
      <environmentvariables>
        <variable name="MACHINE">
          <value>qemux86-64</value>
        </variable>
        <variable name="IMAGE_NAME">
          <value>orion-image</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/genivi/meta-ivi.git" branch="13.0" dest="meta-ivi" materialName="meta-ivi.13.0" />
        <git url="git://git.openembedded.org/meta-openembedded" branch="pyro" dest="meta-openembedded" autoUpdate="false" materialName="meta-openembedded.pyro" />
        <git url="http://git.yoctoproject.org/git/poky.git" branch="pyro" dest="poky" autoUpdate="false" materialName="poky.pyro" />
        <git url="git://git.yoctoproject.org/meta-gplv2" branch="pyro" dest="meta-gplv2" autoUpdate="false" materialName="meta-gplv2.pyro" />
        <git url="https://github.com/genivi/baseline_ci_helper.git" dest="baseline_ci_helper" autoUpdate="false" materialName="baseline_ci_helper" />
      </materials>
    </pipeline>
    <pipeline name="yocto-baseline-13-qemuarm64" labeltemplate="meta-ivi.13.0:${meta-ivi.13.0[:8]}-build:${COUNT}" isLocked="false" template="meta-ivi-build">
      <environmentvariables>
        <variable name="MACHINE">
          <value>qemuarm64</value>
        </variable>
        <variable name="IMAGE_NAME">
          <value>orion-image</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/genivi/meta-ivi.git" branch="13.0" dest="meta-ivi" materialName="meta-ivi.13.0" />
        <git url="git://git.openembedded.org/meta-openembedded" branch="pyro" dest="meta-openembedded" autoUpdate="false" materialName="meta-openembedded.pyro" />
        <git url="http://git.yoctoproject.org/git/poky.git" branch="pyro" dest="poky" autoUpdate="false" materialName="poky.pyro" />
        <git url="git://git.yoctoproject.org/meta-gplv2" branch="pyro" dest="meta-gplv2" autoUpdate="false" materialName="meta-gplv2.pyro" />
        <git url="https://github.com/genivi/baseline_ci_helper.git" dest="baseline_ci_helper" autoUpdate="false" materialName="baseline_ci_helper" />
      </materials>
    </pipeline>
    <pipeline name="yocto-baseline-13-qemux86" labeltemplate="meta-ivi.13.0:${meta-ivi.13.0[:8]}-build:${COUNT}" isLocked="false" template="meta-ivi-build">
      <environmentvariables>
        <variable name="MACHINE">
          <value>qemux86</value>
        </variable>
        <variable name="IMAGE_NAME">
          <value>orion-image</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/genivi/meta-ivi.git" branch="13.0" dest="meta-ivi" materialName="meta-ivi.13.0" />
        <git url="git://git.openembedded.org/meta-openembedded" branch="pyro" dest="meta-openembedded" autoUpdate="false" materialName="meta-openembedded.pyro" />
        <git url="http://git.yoctoproject.org/git/poky.git" branch="pyro" dest="poky" autoUpdate="false" materialName="poky.pyro" />
        <git url="git://git.yoctoproject.org/meta-gplv2" branch="pyro" dest="meta-gplv2" autoUpdate="false" materialName="meta-gplv2.pyro" />
        <git url="https://github.com/genivi/baseline_ci_helper.git" dest="baseline_ci_helper" autoUpdate="false" materialName="baseline_ci_helper" />
      </materials>
    </pipeline>
    <pipeline name="yocto-baseline-13-vexpressa9" labeltemplate="meta-ivi.13.0:${meta-ivi.13.0[:8]}-build:${COUNT}" isLocked="false" template="meta-ivi-build">
      <environmentvariables>
        <variable name="MACHINE">
          <value>vexpressa9</value>
        </variable>
        <variable name="IMAGE_NAME">
          <value>orion-image</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/genivi/meta-ivi.git" branch="13.0" dest="meta-ivi" materialName="meta-ivi.13.0" />
        <git url="git://git.openembedded.org/meta-openembedded" branch="pyro" dest="meta-openembedded" autoUpdate="false" materialName="meta-openembedded.pyro" />
        <git url="http://git.yoctoproject.org/git/poky.git" branch="pyro" dest="poky" autoUpdate="false" materialName="poky.pyro" />
        <git url="git://git.yoctoproject.org/meta-gplv2" branch="pyro" dest="meta-gplv2" autoUpdate="false" materialName="meta-gplv2.pyro" />
        <git url="https://github.com/genivi/baseline_ci_helper.git" dest="baseline_ci_helper" autoUpdate="false" materialName="baseline_ci_helper" />
      </materials>
    </pipeline>
    <pipeline name="yocto-baseline-GITHUB-PR-Check" labeltemplate="meta-ivi:${meta-ivi[:8]}-build:${COUNT}" isLocked="false" template="meta-ivi-build">
      <environmentvariables>
        <variable name="MACHINE">
          <value>qemux86-64</value>
        </variable>
      </environmentvariables>
      <materials>
        <scm ref="55fece0c-628e-4ceb-abe8-64c792a6b1ea" dest="meta-ivi" />
        <git url="http://git.yoctoproject.org/git/poky.git" branch="pyro" dest="poky" autoUpdate="false" materialName="poky_pyro" />
        <git url="git://git.openembedded.org/meta-openembedded" branch="pyro" dest="meta-openembedded" autoUpdate="false" materialName="meta-oe_pyro" />
        <git url="https://git.yoctoproject.org/git/meta-gplv2" branch="pyro" dest="meta-gplv2" autoUpdate="false" materialName="meta-gplv2_pyro" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="GENIVI_Development_Platform">
    <authorization>
      <view>
        <user>guest</user>
        <role>Guest</role>
      </view>
      <admins>
        <role>GDP_Developer</role>
      </admins>
    </authorization>
    <pipeline name="GDP-minnowboard" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic_script_NO_ARTIFACTS">
      <environmentvariables>
        <variable name="TARGET">
          <value>minnowboard</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/GENIVI/genivi-dev-platform/" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="GDP-qemux86-64" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic_script_NO_ARTIFACTS">
      <environmentvariables>
        <variable name="TARGET">
          <value>qemux86-64</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/GENIVI/genivi-dev-platform/" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="GDP-raspberrypi2" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic_script_NO_ARTIFACTS">
      <environmentvariables>
        <variable name="TARGET">
          <value>raspberrypi2</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/GENIVI/genivi-dev-platform/" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="GDP-dragonboard-410c" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic_script_NO_ARTIFACTS">
      <params>
        <param name="agent">elmer</param>
      </params>
      <environmentvariables>
        <variable name="TARGET">
          <value>dragonboard-410c</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/GENIVI/genivi-dev-platform/" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="GDP-r-car-m3-starter-kit" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_renesas_script_NO_ARTIFACTS">
      <environmentvariables>
        <variable name="TARGET">
          <value>r-car-m3-starter-kit</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/GENIVI/genivi-dev-platform/" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="GDP_CI_Other">
    <authorization>
      <view>
        <user>guest</user>
        <role>Developer</role>
        <role>Guest</role>
        <role>GDP_Developer</role>
      </view>
      <operate>
        <role>GDP_Developer</role>
      </operate>
    </authorization>
    <pipeline name="GDP-Yocto-R-Car-YBSP-223" template="Yocto_GDP_generic_script_with_artifacts">
      <environmentvariables>
        <variable name="TARGET">
          <value>minnowboard</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/slawr/genivi-dev-platform" branch="push_update_r-car_ybsp-223" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="GDP_Pull_Requests">
    <authorization>
      <view>
        <user>guest</user>
        <role>Developer</role>
        <role>Guest</role>
      </view>
      <operate>
        <role>Developer</role>
      </operate>
      <admins>
        <role>GDP_Developer</role>
      </admins>
    </authorization>
    <pipeline name="GDP-Yocto-QEMU_x86-64-GITHUB-PR" isLocked="false" template="Yocto_GDP_generic_script_NO_ARTIFACTS">
      <environmentvariables>
        <variable name="TARGET">
          <value>qemux86-64</value>
        </variable>
      </environmentvariables>
      <materials>
        <scm ref="a1a82896-a41b-4684-a7e8-4d43bf691438" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-r-car-m3-starter-kit-GITHUB-PR" isLocked="false" template="Yocto_GDP_renesas_script_NO_ARTIFACTS">
      <environmentvariables>
        <variable name="TARGET">
          <value>r-car-m3-starter-kit</value>
        </variable>
      </environmentvariables>
      <materials>
        <scm ref="a1a82896-a41b-4684-a7e8-4d43bf691438" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-RPI2-GITHUB-PR" isLocked="false" template="Yocto_GDP_generic_script_NO_ARTIFACTS">
      <environmentvariables>
        <variable name="TARGET">
          <value>raspberrypi2</value>
        </variable>
      </environmentvariables>
      <materials>
        <scm ref="a1a82896-a41b-4684-a7e8-4d43bf691438" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-MINNOWBOARD-GITHUB-PR" template="Yocto_GDP_generic_script_NO_ARTIFACTS">
      <environmentvariables>
        <variable name="TARGET">
          <value>minnowboard</value>
        </variable>
      </environmentvariables>
      <materials>
        <scm ref="a1a82896-a41b-4684-a7e8-4d43bf691438" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-Dragonboard-GITHUB-PR" template="Yocto_GDP_generic_script_NO_ARTIFACTS">
      <environmentvariables>
        <variable name="TARGET">
          <value>dragonboard-410c</value>
        </variable>
      </environmentvariables>
      <materials>
        <scm ref="a1a82896-a41b-4684-a7e8-4d43bf691438" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="GDP_Release_Builds">
    <authorization>
      <view>
        <user>guest</user>
        <role>Guest</role>
      </view>
      <admins>
        <role>GDP_Developer</role>
      </admins>
    </authorization>
    <pipeline name="Release-qemux86-64" labeltemplate="genivi-dev-platform:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic_release">
      <environmentvariables>
        <variable name="TARGET">
          <value>qemux86-64</value>
        </variable>
        <variable name="STANDARD_RELEASE_BUILD">
          <value>true</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/GENIVI/genivi-dev-platform" autoUpdate="false" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="Release-minnowboard" labeltemplate="genivi-dev-platform:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic_release">
      <environmentvariables>
        <variable name="TARGET">
          <value>minnowboard</value>
        </variable>
        <variable name="RELEASE">
          <value>13.0</value>
        </variable>
        <variable name="STANDARD_RELEASE_BUILD">
          <value>true</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/GENIVI/genivi-dev-platform" autoUpdate="false" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="Release-raspberrypi-2" labeltemplate="genivi-dev-platform:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic_release">
      <environmentvariables>
        <variable name="TARGET">
          <value>raspberrypi2</value>
        </variable>
        <variable name="RELEASE">
          <value>13.0</value>
        </variable>
        <variable name="STANDARD_RELEASE_BUILD">
          <value>true</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/GENIVI/genivi-dev-platform" autoUpdate="false" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="Release-raspberrypi-3" labeltemplate="genivi-dev-platform:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic_release">
      <environmentvariables>
        <variable name="TARGET">
          <value>raspberrypi3</value>
        </variable>
        <variable name="RELEASE">
          <value>13.0</value>
        </variable>
        <variable name="STANDARD_RELEASE_BUILD">
          <value>true</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/GENIVI/genivi-dev-platform" autoUpdate="false" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="Release-dragonboard-410c" labeltemplate="genivi-dev-platform:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic_release">
      <environmentvariables>
        <variable name="TARGET">
          <value>dragonboard-410c</value>
        </variable>
        <variable name="RELEASE">
          <value>13.0</value>
        </variable>
        <variable name="STANDARD_RELEASE_BUILD">
          <value>true</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/GENIVI/genivi-dev-platform" autoUpdate="false" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="Release-r-car-m3-starter-kit" labeltemplate="genivi-dev-platform:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic_release_renesas">
      <environmentvariables>
        <variable name="TARGET">
          <value>r-car-m3-starter-kit</value>
        </variable>
        <variable name="RELEASE">
          <value>13.0</value>
        </variable>
        <variable name="LAYER_ARCHIVE">
          <value>true</value>
        </variable>
        <variable name="COPY_LICENSES">
          <value>false</value>
        </variable>
        <variable name="CREATE_RELEASE_DIR">
          <value>true</value>
        </variable>
        <variable name="STANDARD_RELEASE_BUILD">
          <value>false</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/GENIVI/genivi-dev-platform" autoUpdate="false" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="Release-r-car-h3-starter-kit" labeltemplate="genivi-dev-platform:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic_release_renesas">
      <environmentvariables>
        <variable name="TARGET">
          <value>r-car-h3-starter-kit</value>
        </variable>
        <variable name="RELEASE">
          <value>13.0</value>
        </variable>
        <variable name="STANDARD_RELEASE_BUILD">
          <value>true</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/GENIVI/genivi-dev-platform" autoUpdate="false" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="Release-minnowboard-chromium" labeltemplate="gdp.git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic_release">
      <environmentvariables>
        <variable name="TARGET">
          <value>minnowboard</value>
        </variable>
        <variable name="RELEASE">
          <value>13.0</value>
        </variable>
        <variable name="STANDARD_RELEASE_BUILD">
          <value>true</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/genivi/genivi-dev-platform" branch="feature_chromium_pyro" autoUpdate="false" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="Release-minnowboard-SDL" labeltemplate="gdp.git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic_release">
      <environmentvariables>
        <variable name="TARGET">
          <value>minnowboard</value>
        </variable>
        <variable name="RELEASE">
          <value>13.0</value>
        </variable>
        <variable name="STANDARD_RELEASE_BUILD">
          <value>true</value>
        </variable>
        <variable name="CREATE_RELEASE_DIR">
          <value>true</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/genivi/genivi-dev-platform" branch="feature_sdl_pyro" autoUpdate="false" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="Release-r-car-m3-starter-kit-SDL" labeltemplate="gdp.git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic_release_renesas">
      <environmentvariables>
        <variable name="TARGET">
          <value>r-car-m3-starter-kit</value>
        </variable>
        <variable name="RELEASE">
          <value>13.0</value>
        </variable>
        <variable name="SOURCE_ARCHIVE">
          <value>true</value>
        </variable>
        <variable name="LAYER_ARCHIVE">
          <value>true</value>
        </variable>
        <variable name="COPY_LICENSES">
          <value>false</value>
        </variable>
        <variable name="CREATE_RELEASE_DIR">
          <value>true</value>
        </variable>
        <variable name="REUSE_STANDARD_SSTATE_DIR">
          <value>false</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/genivi/genivi-dev-platform" branch="feature_sdl_pyro" autoUpdate="false" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="Release-r-car-m3-starter-kit-chromium-v13" labeltemplate="gdp.git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic_release_renesas">
      <environmentvariables>
        <variable name="TARGET">
          <value>r-car-m3-starter-kit</value>
        </variable>
        <variable name="RELEASE">
          <value>13.0</value>
        </variable>
        <variable name="STANDARD_RELEASE_BUILD">
          <value>false</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/genivi/genivi-dev-platform" branch="feature_chromium_pyro" autoUpdate="false" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="Release-upload-test" labeltemplate="gdp.git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic_release_and_upload">
      <params>
        <param name="TARGET">raspberrypi2</param>
        <param name="SERVER_RESOURCE">deploy_genivi</param>
      </params>
      <environmentvariables>
        <variable name="TARGET">
          <value>#{TARGET}</value>
        </variable>
        <variable name="RELEASE">
          <value>13.0</value>
        </variable>
        <variable name="STANDARD_RELEASE_BUILD">
          <value>true</value>
        </variable>
        <variable name="DEPLOY_DIR">
          <value>/var/lib/go-agent/pipelines/__deploy/deploy</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/genivi/genivi-dev-platform" autoUpdate="false" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Feature_Chromium">
    <pipeline name="Chromium-r-car-m3-starter-kit" labeltemplate="gdp-chromium:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_renesas_script_with_artifacts">
      <environmentvariables>
        <variable name="TARGET">
          <value>r-car-m3-starter-kit</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/genivi/genivi-dev-platform.git" branch="chromium_v12" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="Chromium-minnowboard" labeltemplate="gdp-chromium:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic_script_with_artifacts">
      <environmentvariables>
        <variable name="TARGET">
          <value>minnowboard</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/genivi/genivi-dev-platform.git" branch="feature_chromium_pyro" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="Chromium-qemu_x86-64" labeltemplate="gdp-chromium:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic_script_with_artifacts">
      <environmentvariables>
        <variable name="TARGET">
          <value>qemux86-64</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/genivi/genivi-dev-platform.git" branch="feature_chromium_pyro" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="Chromium-raspberrypi2" labeltemplate="gdp-chromium:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic_script_with_artifacts">
      <environmentvariables>
        <variable name="TARGET">
          <value>raspberrypi2</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/genivi/genivi-dev-platform.git" branch="feature_chromium_pyro" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="Chromium-raspberrypi3" labeltemplate="gdp-chromium:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic_script_with_artifacts">
      <environmentvariables>
        <variable name="TARGET">
          <value>raspberrypi3</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/genivi/genivi-dev-platform.git" branch="feature_chromium_pyro" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="Chromium-dragonboard-410c" labeltemplate="gdp-chromium:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic_script_with_artifacts">
      <environmentvariables>
        <variable name="TARGET">
          <value>dragonboard-410c</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/genivi/genivi-dev-platform.git" branch="feature_chromium_pyro" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Feature_SDL">
    <pipeline name="SDL_minnowboard" template="Yocto_GDP_generic_script_with_artifacts">
      <environmentvariables>
        <variable name="TARGET">
          <value>minnowboard</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/GENIVI/genivi-dev-platform" branch="feature_sdl_pyro" />
      </materials>
    </pipeline>
    <pipeline name="SDL_r-car-m3-starter-kit" template="Yocto_GDP_renesas_script_with_artifacts">
      <environmentvariables>
        <variable name="TARGET">
          <value>r-car-m3-starter-kit</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/GENIVI/genivi-dev-platform" branch="feature_sdl_pyro" />
      </materials>
    </pipeline>
    <pipeline name="SDL_qemux86-64" labeltemplate="build:${COUNT}:#{BRANCH}:${gdp.git[:8]}" isLocked="false" template="Yocto_GDP_renesas_script_with_artifacts">
      <params>
        <param name="BRANCH">feature_sdl_pyro</param>
      </params>
      <environmentvariables>
        <variable name="TARGET">
          <value>qemux86-64</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/GENIVI/genivi-dev-platform" branch="#{BRANCH}" materialName="gdp.git" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="GDP_Software_Developer_Environment">
    <authorization>
      <view>
        <user>guest</user>
        <role>Guest</role>
      </view>
      <admins>
        <user>AndreasR</user>
        <user>EBoto</user>
        <role>GDP_Developer</role>
      </admins>
    </authorization>
    <pipeline name="GDP-SDE-raspberrypi2" isLocked="false" template="GDP_SDE_generic">
      <params>
        <param name="MACHINE">raspberrypi2</param>
      </params>
      <environmentvariables>
        <variable name="VMNAME">
          <value>gdp-sde-#{MACHINE}</value>
        </variable>
        <variable name="VERSION">
          <value>snapshot</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/gunnarx/gdp_sde" materialName="gdp_sde" />
        <pipeline pipelineName="Eclipse-for-SDK-2" stageName="stage" materialName="eclipse" />
        <pipeline pipelineName="Seed-QtLibs-and-creator" stageName="stage" materialName="Qt" />
        <pipeline pipelineName="DLT-Viewer" stageName="stage" materialName="dlt-viewer" />
        <pipeline pipelineName="capicxx-core-tools" stageName="build" materialName="capicxx-core-tools" />
        <pipeline pipelineName="capicxx-dbus-tools" stageName="build" materialName="capicxx-dbus-tools" />
        <pipeline pipelineName="capicxx-someip-tools" stageName="build" materialName="capicxx-someip-tools" />
        <pipeline pipelineName="GDP-Yocto-raspberrypi2_SDK" stageName="build" materialName="yocto-sdk-raspberrypi2" />
      </materials>
    </pipeline>
    <pipeline name="GDP-SDE-raspberrypi3" isLocked="false" template="GDP_SDE_generic">
      <params>
        <param name="MACHINE">raspberrypi3</param>
      </params>
      <environmentvariables>
        <variable name="VMNAME">
          <value>gdp-sde-#{MACHINE}</value>
        </variable>
        <variable name="VERSION">
          <value>snapshot</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/gunnarx/gdp_sde" materialName="gdp_sde" />
        <pipeline pipelineName="Eclipse-for-SDK-2" stageName="stage" materialName="eclipse" />
        <pipeline pipelineName="Seed-QtLibs-and-creator" stageName="stage" materialName="Qt" />
        <pipeline pipelineName="DLT-Viewer" stageName="stage" materialName="dlt-viewer" />
        <pipeline pipelineName="capicxx-core-tools" stageName="build" materialName="capicxx-core-tools" />
        <pipeline pipelineName="capicxx-dbus-tools" stageName="build" materialName="capicxx-dbus-tools" />
        <pipeline pipelineName="capicxx-someip-tools" stageName="build" materialName="capicxx-someip-tools" />
        <pipeline pipelineName="GDP-Yocto-raspberrypi3_SDK" stageName="build" materialName="yocto-sdk-raspberrypi3" />
      </materials>
    </pipeline>
    <pipeline name="GDP-SDE-minnowboard" isLocked="false" template="GDP_SDE_generic">
      <params>
        <param name="MACHINE">minnowboard</param>
      </params>
      <environmentvariables>
        <variable name="VERSION">
          <value>snapshot</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/gunnarx/gdp_sde" materialName="gdp_sde" />
        <pipeline pipelineName="Eclipse-for-SDK-2" stageName="stage" materialName="eclipse" />
        <pipeline pipelineName="Seed-QtLibs-and-creator" stageName="stage" materialName="Qt" />
        <pipeline pipelineName="DLT-Viewer" stageName="stage" materialName="dlt-viewer" />
        <pipeline pipelineName="capicxx-core-tools" stageName="build" materialName="capicxx-core-tools" />
        <pipeline pipelineName="capicxx-dbus-tools" stageName="build" materialName="capicxx-dbus-tools" />
        <pipeline pipelineName="capicxx-someip-tools" stageName="build" materialName="capicxx-someip-tools" />
        <pipeline pipelineName="GDP-Yocto-Minnowboard_SDK" stageName="build" materialName="yocto-sdk-minnowboard" />
      </materials>
    </pipeline>
    <pipeline name="GDP-SDE-dragonboard-410c" isLocked="false" template="GDP_SDE_generic">
      <params>
        <param name="MACHINE">dragonboard-410c</param>
      </params>
      <environmentvariables>
        <variable name="VERSION">
          <value>snapshot</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/gunnarx/gdp_sde" materialName="gdp_sde" />
        <pipeline pipelineName="Eclipse-for-SDK-2" stageName="stage" materialName="eclipse" />
        <pipeline pipelineName="Seed-QtLibs-and-creator" stageName="stage" materialName="Qt" />
        <pipeline pipelineName="DLT-Viewer" stageName="stage" materialName="dlt-viewer" />
        <pipeline pipelineName="capicxx-core-tools" stageName="build" materialName="capicxx-core-tools" />
        <pipeline pipelineName="capicxx-dbus-tools" stageName="build" materialName="capicxx-dbus-tools" />
        <pipeline pipelineName="capicxx-someip-tools" stageName="build" materialName="capicxx-someip-tools" />
        <pipeline pipelineName="GDP-Yocto-dragonboard-410c_SDK" stageName="build" materialName="yocto-sdk-qemux86-64" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-raspberrypi2_SDK" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_SDK_generic_script_with_artifacts">
      <params>
        <param name="branch">sdk_build</param>
      </params>
      <environmentvariables>
        <variable name="TARGET">
          <value>raspberrypi2</value>
        </variable>
        <variable name="BUILD_SDK">
          <value>true</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="http://github.com/GUNNARX/genivi-dev-platform.git" branch="#{branch}" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-raspberrypi3_SDK" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_SDK_generic_script_with_artifacts">
      <params>
        <param name="branch">sdk_build</param>
      </params>
      <environmentvariables>
        <variable name="TARGET">
          <value>raspberrypi3</value>
        </variable>
        <variable name="BUILD_SDK">
          <value>true</value>
        </variable>
        <variable name="REUSE_STANDARD_SSTATE_DIR">
          <value>false</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="http://github.com/GUNNARX/genivi-dev-platform.git" branch="#{branch}" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-Minnowboard_SDK" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_SDK_generic_script_with_artifacts">
      <params>
        <param name="branch">sdk_build</param>
      </params>
      <environmentvariables>
        <variable name="TARGET">
          <value>minnowboard</value>
        </variable>
        <variable name="BUILD_SDK">
          <value>true</value>
        </variable>
        <variable name="REUSE_STANDARD_SSTATE_DIR">
          <value>false</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="http://github.com/GUNNARX/genivi-dev-platform.git" branch="#{branch}" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-qemux86-64_SDK" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_SDK_generic_script_with_artifacts">
      <params>
        <param name="branch">sdk_build</param>
      </params>
      <environmentvariables>
        <variable name="TARGET">
          <value>qemux86-64</value>
        </variable>
        <variable name="BUILD_SDK">
          <value>true</value>
        </variable>
        <variable name="REUSE_STANDARD_SSTATE_DIR">
          <value>false</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="http://github.com/GUNNARX/genivi-dev-platform.git" branch="#{branch}" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-dragonboard-410c_SDK" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_SDK_generic_script_with_artifacts">
      <params>
        <param name="branch">sdk_build</param>
      </params>
      <environmentvariables>
        <variable name="TARGET">
          <value>dragonboard-410c</value>
        </variable>
        <variable name="BUILD_SDK">
          <value>true</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="http://github.com/GUNNARX/genivi-dev-platform.git" branch="#{branch}" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="Eclipse-for-SDK-2">
      <params>
        <param name="BRANCH">cpp_common_api_with_yocto_tools</param>
      </params>
      <environmentvariables>
        <variable name="CACHE_DIR">
          <value>/var/cache/eia</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/genivi/eclipse_install_automation" branch="#{BRANCH}" materialName="eclipse_install_automation" />
      </materials>
      <stage name="stage">
        <jobs>
          <job name="job">
            <environmentvariables>
              <variable name="ECLIPSE_INSTALL_DIR">
                <value>autoeclipse</value>
              </variable>
              <variable name="ECLIPSE_WORKSPACE_DIR">
                <value>workspace</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="rm">
                <arg>-rf</arg>
                <arg>"./$ECLIPSE_INSTALL_DIR"</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>artifacts</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>./script.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>tar cfz artifacts/eclipse.tar.gz "./$ECLIPSE_INSTALL_DIR/eclipse"</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>tar cfz artifacts/eclipse-workspace.tar.gz "./$ECLIPSE_WORKSPACE_DIR"</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>vagrant</resource>
            </resources>
            <artifacts>
              <artifact src="artifacts/" dest="tarballs/" />
              <artifact src="autoeclipse/eclipse" dest="results/" />
              <artifact src="workspace" dest="results/" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="GDP_QtAS_Spin">
    <authorization>
      <view>
        <user>AndreasR</user>
        <user>EBoto</user>
        <role>GDP_Developer</role>
      </view>
      <operate>
        <user>AndreasR</user>
        <role>GDP_Developer</role>
      </operate>
      <admins>
        <user>AndreasR</user>
        <user>EBoto</user>
      </admins>
    </authorization>
    <pipeline name="GDP-Yocto-Minnowboard-QtAS_SDK" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_SDK_generic_script_with_artifacts">
      <environmentvariables>
        <variable name="TARGET">
          <value>minnowboard</value>
        </variable>
        <variable name="BUILD_SDK">
          <value>true</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="http://github.com/Pelagicore/genivi-dev-platform.git" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-Minnowboard-QtAS" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_SDK_generic_script_with_artifacts">
      <environmentvariables>
        <variable name="TARGET">
          <value>minnowboard</value>
        </variable>
        <variable name="MACHINE">
          <value>minnowboard</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/gunnarx/genivi-dev-platform.git" branch="qtas_13.0_rebase" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="GammaRay" labeltemplate="2.6:${GammaRay.git[:8]}-build:${COUNT}" isLocked="false">
      <params>
        <param name="QT_LIBS_ARCHIVE">Qt5.6.1-vagrant-with-source.tar.bz2</param>
        <param name="CACHE_DIR">/var/cache/goartifacts</param>
        <param name="SOURCE_WEB_URL">https://github.com/KDAB/GammaRay.git</param>
        <param name="SOURCE_CLONE_URL">https://github.com/KDAB/GammaRay.git</param>
      </params>
      <materials>
        <git url="https://github.com/KDAB/GammaRay.git" branch="2.6" materialName="GammaRay.git" />
        <pipeline pipelineName="Seed-QtLibs-and-creator" stageName="stage" materialName="qtlibs" />
      </materials>
      <stage name="stage">
        <jobs>
          <job name="job">
            <tasks>
              <fetchartifact pipeline="Seed-QtLibs-and-creator" stage="stage" job="job" srcfile="#{QT_LIBS_ARCHIVE}">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash">
                <arg>-c</arg>
                <arg>tar xf #{QT_LIBS_ARCHIVE}</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>ln -s Qt5.6.1 Qt</arg>
                <runif status="passed" />
              </exec>
              <exec command="rm">
                <arg>-rf</arg>
                <arg>build</arg>
                <runif status="any" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>build</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="build">
                <arg>-c</arg>
                <arg>CMAKE_PREFIX_PATH=../Qt/5.6/gcc_64/lib/cmake cmake -DGAMMARAY_BUILD_DOCS=off ../</arg>
                <runif status="passed" />
              </exec>
              <exec command="make" workingdir="build">
                <arg>-j8</arg>
                <runif status="passed" />
              </exec>
              <exec command="make" workingdir="build">
                <arg>DESTDIR=./gammaray/</arg>
                <arg>install</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="build/gammaray">
                <arg>-c</arg>
                <arg>echo -e "The source code for this program is available for download at:\n\n#{SOURCE_WEB_URL}\n(Git clone URL: #{SOURCE_CLONE_URL})\n" &gt;SOURCE.txt</arg>
                <runif status="passed" />
              </exec>
              <exec command="cp">
                <arg>LICENSE.BSD3.txt</arg>
                <arg>LICENSE.GPL.txt</arg>
                <arg>LICENSE.txt</arg>
                <arg>LICENSE.US.txt</arg>
                <arg>build/gammaray/</arg>
                <runif status="passed" />
              </exec>
              <exec command="tar" workingdir="build">
                <arg>cjf</arg>
                <arg>gammaray.tar.bz2</arg>
                <arg>gammaray</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="build/gammaray/*" dest="gammaray" />
              <artifact src="build/gammaray.tar.bz2" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Release-Minnowboard-QtAS">
      <environmentvariables>
        <variable name="MACHINE">
          <value>minnowboard</value>
        </variable>
        <variable name="BRANCH">
          <value>master</value>
        </variable>
        <variable name="RELEASE">
          <value>master</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/Pelagicore/genivi-dev-platform" autoUpdate="false" />
      </materials>
      <stage name="build">
        <approval type="manual" />
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="rm" workingdir="gdp-src-build">
                <arg>-rf</arg>
                <arg>tmp</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>git checkout $BRANCH</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "dragonboard-410c" ]]; then source ./init.sh $MACHINE accept-eula; else source ./init.sh $MACHINE; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp-src-build">
                <arg>-c</arg>
                <arg>mkdir -p staging/$MACHINE</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>tar -zcf "gdp-src-build/staging/$MACHINE/oe-source.tar.gz" --exclude=gdp-src-build/{bitbake.lock,buildhistory,cache,downloads,sstate-cache,tmp,staging} --exclude=meta-{renesas,raspberrypi,intel,qcom} *</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp-src-build/conf">
                <arg>-c</arg>
                <arg>/bin/echo -e 'INHERIT += "archiver"\nARCHIVER_MODE[src] = "original"\nCOPY_LIC_MANIFEST = "1"\nCOPY_LIC_DIRS = "1"'&gt;&gt;local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.name</arg>
                <arg>Go Server</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.email</arg>
                <arg>no_email@genivigo.com</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source poky/oe-init-build-env gdp-src-build &amp;&amp; bitbake genivi-dev-platform</arg>
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>cp gdp-src-build/tmp/deploy/licenses/genivi-dev-platform-*/license.manifest gdp-src-build/staging/$MACHINE/$BRANCH-license.manifest</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>cp gdp-src-build/tmp/deploy/images/*/genivi-dev-platform-*.rootfs.manifest gdp-src-build/staging/$MACHINE/$BRANCH.rootfs.manifest</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>tar -zcf gdp-src-build/staging/$MACHINE/$BRANCH-licenses.tar.gz -C gdp-src-build/tmp/deploy/licenses .</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>tar -zcf gdp-src-build/staging/$MACHINE/$BRANCH-sources.tar.gz -C gdp-src-build/tmp/deploy/sources .</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "qemux86-64" ]]; then gzip -c gdp-src-build/tmp/deploy/images/*/genivi-dev-platform-qemux86-64.ext4 &gt; gdp-src-build/staging/$MACHINE/$BRANCH-qemu.ext4.gz; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "qemux86-64" ]]; then cp gdp-src-build/tmp/deploy/images/*/bzImage gdp-src-build/staging/$MACHINE/$BRANCH-qemu.bzImage; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "raspberrypi2" || "$MACHINE" == "raspberrypi3" ]]; then gzip -c gdp-src-build/tmp/deploy/images/*/genivi-dev-platform-*.rootfs.rpi-sdimg &gt; gdp-src-build/staging/$MACHINE/$BRANCH-rpi.sdimg.gz; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "minnowboard" ]]; then cp poky/scripts/contrib/mkefidisk.sh gdp-src-build/tmp/deploy/images/intel-corei7-64/ &amp;&amp; tar -zchf gdp-src-build/staging/$MACHINE/$BRANCH-minnowboard.hddimg.tar.gz -C gdp-src-build/tmp/deploy/images/intel-corei7-64 genivi-dev-platform-intel-corei7-64.hddimg mkefidisk.sh; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "dragonboard-410c" ]]; then gzip -c gdp-src-build/tmp/deploy/images/*/boot-dragonboard-410c.img &gt; gdp-src-build/staging/$MACHINE/$BRANCH-dragonboard.img.gz; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "dragonboard-410c" ]]; then cp gdp-src-build/tmp/deploy/images/*/genivi-dev-platform-dragonboard-410c.ext4.gz gdp-src-build/staging/$MACHINE/$BRANCH-dragonboard.ext4.gz; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp-src-build/staging/">
                <arg>-c</arg>
                <arg>cd $MACHINE &amp;&amp; md5sum * &gt; checksums.txt</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>build2-goagent</resource>
            </resources>
            <artifacts>
              <artifact src="gdp-src-build/staging/" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="GDP-Yocto-Porter-QtAS" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false">
      <environmentvariables>
        <variable name="MACHINE">
          <value>porter</value>
        </variable>
        <variable name="GFX_MACHINE">
          <value>porter</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/Pelagicore/genivi-dev-platform.git" materialName="genivi-dev-platform.git" />
      </materials>
      <stage name="build">
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="rm" workingdir="gdp-src-build">
                <arg>-rf</arg>
                <arg>tmp</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source ./init.sh $MACHINE</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "porter" || "$MACHINE" == silk ]]; then cd meta-renesas/meta-rcar-gen2 &amp;&amp; ./copy_gfx_software_$MACHINE.sh /var/go/sgx_bin; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "porter" || "$MACHINE" == silk ]];  then cd meta-renesas/meta-rcar-gen2 &amp;&amp; ./copy_mm_software_lcb.sh /var/go/sgx_bin/; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp-src-build/conf">
                <arg>-c</arg>
                <arg>/bin/echo -e 'DL_DIR = "/var/cache/yocto/downloads"\nSSTATE_DIR = "/var/cache/yocto/sstate"' &gt;&gt;local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.name</arg>
                <arg>Go Server</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.email</arg>
                <arg>no_email@genivigo.com</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source poky/oe-init-build-env gdp-src-build &amp;&amp; bitbake genivi-dev-platform</arg>
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -f logs.tar logs.tar.gz &amp;&amp; find gdp-src-build/tmp/work \( -name "*.log" -o -name "log.*" -o -name "run.*" \) -print0 | xargs -0 tar uf logs.tar &amp;&amp; gzip logs.tar</arg>
                <runif status="any" />
              </exec>
            </tasks>
            <resources>
              <resource>renesas_binaries</resource>
              <resource>yocto_build</resource>
            </resources>
            <artifacts>
              <artifact src="logs.tar.gz" />
              <artifact src="gdp-src-build/tmp/deploy/licenses" />
              <artifact src="gdp-src-build/tmp/deploy/licenses/genivi-dev-platform*/license.manifest" />
              <artifact src="gdp-src-build/tmp/deploy/licenses/genivi-dev-platform*/package.manifest" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="GDP-SDE-minnowboard-QtAS">
      <materials>
        <git url="https://github.com/Pelagicore/gdp-qtas-sde.git" autoUpdate="false" />
      </materials>
      <stage name="CreateVM">
        <jobs>
          <job name="run_vagrant">
            <environmentvariables>
              <variable name="VAGRANT_NUM_CPUS">
                <value>2</value>
              </variable>
              <variable name="VAGRANT_RAM">
                <value>4096</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="vagrant">
                <arg>destroy</arg>
                <arg>-f</arg>
              </exec>
              <exec command="vagrant">
                <arg>up</arg>
                <arg>--provision</arg>
                <runif status="passed" />
              </exec>
              <exec command="vagrant">
                <arg>package</arg>
                <arg>--output</arg>
                <arg>gdp-sde-minnowboard-qtas.tar.gz</arg>
                <runif status="passed" />
              </exec>
              <exec command="vagrant">
                <arg>destroy</arg>
                <arg>-f</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>build2-goagent</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="Components">
    <authorization>
      <view>
        <role>Developer</role>
        <role>Guest</role>
      </view>
      <operate>
        <role>Developer</role>
      </operate>
      <admins>
        <role>Developer</role>
      </admins>
    </authorization>
    <pipeline name="DLT-daemon-native" isLocked="false">
      <materials>
        <git url="git://github.com/genivi/dlt-daemon.git" materialName="dlt-daemon.git" />
      </materials>
      <stage name="build">
        <jobs>
          <job name="cmake_and_make">
            <tasks>
              <exec command="rm">
                <arg>-rf</arg>
                <arg>build</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>build</arg>
                <runif status="passed" />
              </exec>
              <exec command="cmake" workingdir="build">
                <arg>..</arg>
                <runif status="passed" />
              </exec>
              <exec command="make" workingdir="build">
                <arg>V=1</arg>
                <arg>-j8</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="build/src/lib" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="capicxx-core-runtime" labeltemplate="master:${capicxx-core-runtime.git[:8]}-build:${COUNT}" isLocked="false" template="CMAKE_build">
      <params>
        <param name="BUILD_DIR">build</param>
      </params>
      <materials>
        <git url="https://github.com/GENIVI/capicxx-core-runtime" materialName="capicxx-core-runtime.git" />
      </materials>
    </pipeline>
    <pipeline name="capicxx-dbus-runtime" labeltemplate="master:${capicxx-dbus-runtime.git[:8]}-build:${COUNT}" isLocked="false">
      <environmentvariables>
        <variable name="GTEST_ROOT">
          <value>../googletest</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/GENIVI/capicxx-dbus-runtime" dest="capicxx-dbus-runtime" materialName="capicxx-dbus-runtime.git" />
        <pipeline pipelineName="libdbus-with-commonapi-patch" stageName="patch_and_build" materialName="libdbus-with-commonapi-patch" />
        <git url="https://github.com/GENIVI/capicxx-core-runtime" dest="capicxx-core-runtime" materialName="capicxx-core-runtime" />
        <git url="https://github.com/google/googletest/" dest="googletest" materialName="googletest" />
      </materials>
      <stage name="build">
        <jobs>
          <job name="build">
            <environmentvariables>
              <variable name="CommonAPI_DIR">
                <value>../../capicxx-core-runtime/build</value>
              </variable>
              <variable name="PKG_CONFIG_PATH">
                <value>/var/lib/go-agent/pipelines/capicxx-dbus-runtime/libdbus_patched/results/lib/pkgconfig</value>
              </variable>
              <variable name="GTEST_ROOT">
                <value>../googletest</value>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact pipeline="libdbus-with-commonapi-patch" stage="patch_and_build" job="patch_and_build" srcdir="results" dest="libdbus_patched">
                <runif status="passed" />
              </fetchartifact>
              <exec command="rm" workingdir="capicxx-core-runtime">
                <arg>-rf</arg>
                <arg>build</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir" workingdir="capicxx-core-runtime">
                <arg>build</arg>
                <runif status="passed" />
              </exec>
              <exec command="cmake" workingdir="capicxx-core-runtime/build">
                <arg>..</arg>
                <runif status="passed" />
              </exec>
              <exec command="make" workingdir="capicxx-core-runtime/build">
                <runif status="passed" />
              </exec>
              <exec command="rm" workingdir="capicxx-dbus-runtime">
                <arg>-rf</arg>
                <arg>build</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir" workingdir="capicxx-dbus-runtime">
                <arg>build</arg>
                <runif status="passed" />
              </exec>
              <exec command="cmake" workingdir="capicxx-dbus-runtime/build">
                <arg>-D</arg>
                <arg>USE_INSTALLED_COMMONAPI=ON</arg>
                <arg>..</arg>
                <runif status="passed" />
              </exec>
              <exec command="make" workingdir="capicxx-dbus-runtime/build">
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>cmake</resource>
            </resources>
            <artifacts>
              <artifact src="capicxx-dbus-runtime/build" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="libdbus-with-commonapi-patch" labeltemplate="master:${dbus.git[:8]}-build:${COUNT}" isLocked="false">
      <materials>
        <git url="http://anongit.freedesktop.org/git/dbus/dbus.git" dest="dbus" materialName="dbus.git" />
        <git url="https://github.com/GENIVI/capicxx-dbus-runtime" dest="capicxx-dbus-runtime" materialName="capicxx-dbus-runtime.git" />
      </materials>
      <stage name="patch_and_build">
        <jobs>
          <job name="patch_and_build">
            <tasks>
              <exec command="git" workingdir="dbus">
                <arg>checkout</arg>
                <arg>dbus-1.9.0</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="dbus">
                <arg>-c</arg>
                <arg>for f in ../capicxx-dbus-runtime/src/dbus-patches/*.patch ; do patch -p1 &lt;"$f" || exit 1 ; done</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>results</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="dbus">
                <arg>autogen.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="dbus">
                <arg>-c</arg>
                <arg>./configure --prefix $PWD/../results</arg>
                <runif status="passed" />
              </exec>
              <exec command="make" workingdir="dbus">
                <arg>-j8</arg>
                <arg>-C</arg>
                <arg>dbus</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="dbus">
                <arg>-c</arg>
                <arg>make install || true</arg>
                <arg />
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
            </resources>
            <artifacts>
              <artifact src="results" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="vSomeIP" template="CMAKE_build">
      <params>
        <param name="BUILD_DIR">vSomeIP/build</param>
      </params>
      <environmentvariables>
        <variable name="GTEST_ROOT">
          <value>../googletest</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/genivi/vSomeIP.git" dest="vSomeIP" materialName="vSomeIP" />
        <git url="https://github.com/google/googletest/" dest="googletest" materialName="googletest" />
      </materials>
    </pipeline>
    <pipeline name="Seed-QtLibs-and-creator">
      <params>
        <param name="MD5">1f91cdc6fe2d7add2ffb3cf3157f2e64</param>
        <param name="QT_LIBS_AND_CREATOR_FILE">Qt5.6.1-vagrant-with-source.tar.bz2</param>
        <param name="SOURCE_DIR">/var/go</param>
      </params>
      <materials>
        <git url="git://github.com/genivi/baseline_ci_helper" autoUpdate="false" materialName="dummy-not-used" />
      </materials>
      <stage name="stage">
        <jobs>
          <job name="job">
            <tasks>
              <exec command="cp">
                <arg>#{SOURCE_DIR}/#{QT_LIBS_AND_CREATOR_FILE}</arg>
                <arg>.</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>[ "$(md5sum ./#{QT_LIBS_AND_CREATOR_FILE} | cut -c 1-32)" = "#{MD5}" ] &amp;&amp; echo "MD5 OK"</arg>
                <runif status="any" />
              </exec>
            </tasks>
            <resources>
              <resource>Qt-seeder</resource>
            </resources>
            <artifacts>
              <artifact src="#{QT_LIBS_AND_CREATOR_FILE}" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="casync">
      <environmentvariables>
        <variable name="FIXED_VERSION">
          <value>v2</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/systemd/casync" autoUpdate="false" />
      </materials>
      <stage name="build">
        <jobs>
          <job name="meson-build">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>git checkout $FIXED_VERSION</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>meson build</arg>
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>ninja -C build</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>ga_test</resource>
            </resources>
            <artifacts>
              <artifact src="build/casync" dest="bin" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="Tools">
    <authorization>
      <view>
        <role>Guest</role>
        <role>Developer</role>
      </view>
      <operate>
        <role>Developer</role>
      </operate>
      <admins>
        <role>Developer</role>
      </admins>
    </authorization>
    <pipeline name="capicxx-dbus-tools" labeltemplate="master:${capicxx-dbus-tools.git[:8]}-build:${COUNT}" isLocked="false">
      <materials>
        <git url="git://github.com/genivi/capicxx-dbus-tools.git" dest="capicxx-dbus-tools" materialName="capicxx-dbus-tools.git" />
        <git url="git://github.com/genivi/capicxx-core-tools.git" dest="capicxx-core-tools" materialName="capicxx-core-tools.git" />
      </materials>
      <stage name="build" artifactCleanupProhibited="true">
        <jobs>
          <job name="build">
            <tasks>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>bin</arg>
                <runif status="passed" />
              </exec>
              <exec command="mvn" workingdir="capicxx-core-tools/org.genivi.commonapi.core.releng">
                <arg>-Dtarget.id=org.genivi.commonapi.core.target</arg>
                <arg>clean</arg>
                <arg>verify</arg>
                <runif status="passed" />
              </exec>
              <exec command="mvn" workingdir="capicxx-dbus-tools/org.genivi.commonapi.dbus.releng">
                <arg>-DCOREPATH=../../capicxx-core-tools</arg>
                <arg>-Dtarget.id=org.genivi.commonapi.dbus.target</arg>
                <arg>clean</arg>
                <arg>verify</arg>
                <runif status="passed" />
              </exec>
              <exec command="unzip" workingdir="bin">
                <arg>../capicxx-dbus-tools/org.genivi.commonapi.dbus.cli.product/target/products/commonapi_dbus_generator.zip</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="bin" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="capicxx-core-tools" labeltemplate="master:${capicxx-core-tools.git[:8]}-build:${COUNT}" isLocked="false">
      <materials>
        <git url="https://github.com/GENIVI/capicxx-core-tools" materialName="capicxx-core-tools.git" />
      </materials>
      <stage name="build" artifactCleanupProhibited="true">
        <jobs>
          <job name="build">
            <tasks>
              <exec command="mvn" workingdir="org.genivi.commonapi.core.releng">
                <arg>-Dtarget.id=org.genivi.commonapi.core.target</arg>
                <arg>clean</arg>
                <arg>verify</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir">
                <arg>bin</arg>
                <runif status="passed" />
              </exec>
              <exec command="unzip" workingdir="bin">
                <arg>../org.genivi.commonapi.core.cli.product/target/products/commonapi-generator.zip</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="bin" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="capicxx-someip-tools" labeltemplate="master:${capicxx-someip-tools.git[:8]}-build:${COUNT}" isLocked="false">
      <materials>
        <git url="git://github.com/genivi/capicxx-someip-tools.git" dest="capicxx-someip-tools" materialName="capicxx-someip-tools.git" />
        <git url="git://github.com/genivi/capicxx-core-tools.git" dest="capicxx-core-tools" materialName="capicxx-core-tools.git" />
      </materials>
      <stage name="build" artifactCleanupProhibited="true">
        <jobs>
          <job name="build">
            <tasks>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>bin</arg>
                <runif status="passed" />
              </exec>
              <exec command="mvn" workingdir="capicxx-core-tools/org.genivi.commonapi.core.releng">
                <arg>-Dtarget.id=org.genivi.commonapi.core.target</arg>
                <arg>clean</arg>
                <arg>verify</arg>
                <runif status="passed" />
              </exec>
              <exec command="mvn" workingdir="capicxx-someip-tools/org.genivi.commonapi.someip.releng">
                <arg>-DCOREPATH=../../capicxx-core-tools</arg>
                <arg>-Dtarget.id=org.genivi.commonapi.someip.target</arg>
                <arg>clean</arg>
                <arg>verify</arg>
                <runif status="passed" />
              </exec>
              <exec command="unzip" workingdir="bin">
                <arg>../capicxx-someip-tools/org.genivi.commonapi.someip.cli.product/target/products/commonapi_someip_generator.zip</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="bin" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="DLT-Viewer" labeltemplate="master:${dlt-viewer.git[:8]}-build:${COUNT}" isLocked="false">
      <params>
        <param name="QT_LIBS_ARCHIVE">Qt5.6.1-vagrant-with-source.tar.bz2</param>
        <param name="CACHE_DIR">/var/cache/goartifacts</param>
        <param name="SOURCE_WEB_URL">https://github.com/GENIVI/dlt-viewer</param>
        <param name="SOURCE_CLONE_URL">https://github.com/GENIVI/dlt-viewer.git</param>
      </params>
      <materials>
        <git url="git://github.com/GENIVI/dlt-viewer.git" materialName="dlt-viewer.git" />
        <pipeline pipelineName="Seed-QtLibs-and-creator" stageName="stage" materialName="qtlibs" />
      </materials>
      <stage name="stage">
        <jobs>
          <job name="job">
            <tasks>
              <fetchartifact pipeline="Seed-QtLibs-and-creator" stage="stage" job="job" srcfile="#{QT_LIBS_ARCHIVE}">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash">
                <arg>-c</arg>
                <arg>tar xf #{QT_LIBS_ARCHIVE}</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>ln -s Qt5.6.1 Qt</arg>
                <runif status="passed" />
              </exec>
              <exec command="rm">
                <arg>-rf</arg>
                <arg>build</arg>
                <runif status="any" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>build</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="build">
                <arg>-c</arg>
                <arg>../Qt/5.6/gcc_64/bin/qmake ../BuildDltViewer.pro</arg>
                <runif status="passed" />
              </exec>
              <exec command="make" workingdir="build">
                <arg>-j8</arg>
                <runif status="passed" />
              </exec>
              <exec command="mv" workingdir="build">
                <arg>release</arg>
                <arg>dlt-viewer</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="build/dlt-viewer">
                <arg>-c</arg>
                <arg>echo -e "The source code for this program is available for download at:\n\n#{SOURCE_WEB_URL}\n(Git clone URL: #{SOURCE_CLONE_URL})\n\n(MPLv2 clause 3.2 (a))" &gt;SOURCE.txt</arg>
                <runif status="passed" />
              </exec>
              <exec command="cp">
                <arg>MPL.txt</arg>
                <arg>LICENSE.txt</arg>
                <arg>build/dlt-viewer/</arg>
                <runif status="passed" />
              </exec>
              <exec command="tar" workingdir="build">
                <arg>cjf</arg>
                <arg>dlt-viewer.tar.bz2</arg>
                <arg>dlt-viewer</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="build/dlt-viewer/*" dest="dlt-viewer" />
              <artifact src="build/dlt-viewer.tar.bz2" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="Experiments_and_Testing">
    <authorization>
      <view>
        <role>Guest</role>
      </view>
      <admins>
        <role>Developer</role>
      </admins>
    </authorization>
    <pipeline name="FRANCA_IF_Validation" labeltemplate="master:${capicxx-core-tools.git[:8]}-build:${COUNT}" isLocked="false">
      <materials>
        <git url="git://github.com/genivi/capicxx-core-tools.git" dest="dest-capicxx-core-tools" materialName="capicxx-core-tools.git" />
        <scm ref="077cfe93-bc9e-461a-9a5c-e82796ccb710" dest="dest-fidl-files" />
      </materials>
      <stage name="BuildCommonAPI" cleanWorkingDir="true">
        <jobs>
          <job name="buildGenerators">
            <tasks>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>bin</arg>
                <runif status="passed" />
              </exec>
              <exec command="ls">
                <runif status="passed" />
              </exec>
              <exec command="mvn" workingdir="dest-capicxx-core-tools/org.genivi.commonapi.core.releng">
                <arg>-Dtarget.id=org.genivi.commonapi.core.target</arg>
                <arg>clean</arg>
                <arg>verify</arg>
                <runif status="passed" />
              </exec>
              <exec command="unzip" workingdir="bin">
                <arg>../dest-capicxx-core-tools/org.genivi.commonapi.core.cli.product/target/products/commonapi-generator.zip</arg>
                <runif status="passed" />
              </exec>
              <exec command="find">
                <arg>-iname</arg>
                <arg>*.zip</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="bin" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DoValidation" artifactCleanupProhibited="true">
        <jobs>
          <job name="Fetch_fidl_files">
            <tasks>
              <exec command="ls" workingdir="dest-fidl-files">
                <arg>./franca_idl</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="" stage="BuildCommonAPI" job="buildGenerators" srcdir="bin">
                <runif status="passed" />
              </fetchartifact>
              <exec command="ls">
                <arg>-al</arg>
                <runif status="passed" />
              </exec>
              <exec command="ls" workingdir="dest-capicxx-core-tools/">
                <arg>-al</arg>
                <runif status="passed" />
              </exec>
              <exec command="ls" workingdir="bin">
                <arg>-al</arg>
                <runif status="passed" />
              </exec>
              <exec command="chmod">
                <arg>755</arg>
                <arg>bin/commonapi-generator-linux-x86</arg>
                <arg>bin/commonapi-generator-linux-x86_64</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>bin/commonapi-generator-linux-x86 -v</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>bin/commonapi-generator-linux-x86_64 -v</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="software-loading-manager" isLocked="false">
      <materials>
        <git url="https://github.com/GENIVI/genivi_swm" materialName="SW_Management_PoC_sources" />
      </materials>
      <stage name="commonApiGenerationStage">
        <jobs>
          <job name="commonApiGenerationJob">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>printenv &amp;&amp; true</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="compileCppStage">
        <jobs>
          <job name="compileCppJob">
            <tasks>
              <exec command="true" />
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="runSWLMPocStage">
        <jobs>
          <job name="runSWLMPocJob">
            <tasks>
              <exec command="sed">
                <arg>-i</arg>
                <arg>-e</arg>
                <arg>s/^SWM_SIMULATION\ \=.*$/SWM_SIMULATION = True/</arg>
                <arg>common/settings.py</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-xe</arg>
                <arg>-c</arg>
                <arg>ls -la &amp;&amp; ls -la common &amp;&amp; cat common/settings.py</arg>
                <runif status="passed" />
              </exec>
              <exec command="which">
                <arg>python</arg>
                <runif status="passed" />
              </exec>
              <exec command="printenv">
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-x</arg>
                <arg>start_swm.sh</arg>
                <arg>-r</arg>
                <runif status="any" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="systemd_sdbus" labeltemplate="#{VERSION}_build_${COUNT}" isLocked="false">
      <params>
        <param name="VERSION">v219</param>
      </params>
      <environmentvariables>
        <variable name="VERSION">
          <value>v226</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="http://github.com/systemd/systemd" materialName="systemd" />
      </materials>
      <stage name="stage">
        <approval type="manual" />
        <jobs>
          <job name="configure_and_make">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>git checkout #{VERSION}</arg>
                <runif status="passed" />
              </exec>
              <exec command="./autogen.sh">
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>./configure CFLAGS='-g -O0 -ftrapv' --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib --with-rootprefix=/ --with-rootlibdir=/lib</arg>
                <runif status="passed" />
              </exec>
              <exec command="/usr/bin/make">
                <arg>-j8</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>systemd-build-deps</resource>
            </resources>
            <artifacts>
              <artifact src="configure" />
              <artifact src="config.log" />
              <artifact src=".libs/*" dest="libs" />
              <artifact src="src/systemd/*.h" dest="headers/systemd" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="AGL_meta_agl_demo_plus_homescreen" isLocked="false">
      <timer onlyOnChanges="true">0 0 3 ? * SUN-MON</timer>
      <materials>
        <git url="https://gerrit.automotivelinux.org/gerrit/AGL/AGL-repo" />
      </materials>
      <stage name="StageBuildQEMU">
        <approval type="manual" />
        <jobs>
          <job name="JobBuild">
            <tasks>
              <exec command="curl">
                <arg>-o</arg>
                <arg>repo</arg>
                <arg>https://storage.googleapis.com/git-repo-downloads/repo</arg>
                <runif status="passed" />
              </exec>
              <exec command="chmod">
                <arg>a+x</arg>
                <arg>repo</arg>
                <runif status="passed" />
              </exec>
              <exec command="./repo">
                <arg>init</arg>
                <arg>-u</arg>
                <arg>https://gerrit.automotivelinux.org/gerrit/AGL/AGL-repo</arg>
                <runif status="passed" />
              </exec>
              <exec command="./repo">
                <arg>sync</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>. meta-agl/scripts/envsetup.sh qemux86-64 &amp;&amp; bitbake agl-demo-platform</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="reuse_tmp" isLocked="false" template="Yocto_GDP_generic_reuse_tmp">
      <environmentvariables>
        <variable name="MACHINE">
          <value>qemux86-64</value>
        </variable>
        <variable name="GunnarA" secure="true">
          <encryptedValue>M04ig7bgUbdk4Zo0Qs/5pg==</encryptedValue>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/genivi/genivi-dev-platform" materialName="gdp" />
      </materials>
    </pipeline>
    <pipeline name="Franca-Eclipse-VM">
      <environmentvariables>
        <variable name="ECLIPSE_INSTALL_DIR">
          <value>eclipse</value>
        </variable>
        <variable name="ECLIPSE_WORKSPACE_DIR">
          <value>workspace</value>
        </variable>
        <variable name="CACHE_DIR">
          <value>/var/cache/eia</value>
        </variable>
        <variable name="HOSTNAME">
          <value>francalab</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/genivi/eclipse_install_automation" branch="trusty64-unity" materialName="eclipse_install_automation.git" />
      </materials>
      <stage name="create_eclipse_vm">
        <jobs>
          <job name="run_vagrant">
            <tasks>
              <exec command="vagrant">
                <arg>-v</arg>
                <runif status="passed" />
              </exec>
              <exec command="vagrant">
                <arg>destroy</arg>
                <arg>-f</arg>
                <runif status="passed" />
              </exec>
              <exec command="vagrant">
                <arg>box</arg>
                <arg>list</arg>
                <runif status="passed" />
              </exec>
              <exec command="vagrant">
                <arg>up</arg>
                <arg>--provision</arg>
                <runif status="passed" />
              </exec>
              <exec command="vagrant">
                <arg>halt</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>tar cvfz francalab-vm.tar.gz -C "/var/go/VirtualBox VMs" "$(cat VMNAME)"</arg>
                <runif status="any" />
              </exec>
              <exec command="vagrant">
                <arg>box</arg>
                <arg>list</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>echo SIZE: $(du -hs francalab-vm*.tar.gz) || true</arg>
                <runif status="passed" />
              </exec>
              <exec command="vagrant">
                <arg>destroy</arg>
                <arg>-f</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>vagrant</resource>
            </resources>
            <artifacts>
              <artifact src="francalab-vm.tar.gz" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="WIP--GENIVI_Positioning" isLocked="false">
      <materials>
        <git url="git://github.com/genivi/positioning.git" materialName="PositioningGitRepository" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -rf build &amp;&amp; mkdir -p build &amp;&amp; cd build &amp;&amp; cmake -DWITH_DBUS_INTERFACE=ON -DWITH_FRANCA_DBUS_INTERFACE=OFF -DWITH_FRANCA_SOMEIP_INTERFACE=OFF -DWITH_TESTS=ON -DWITH_DEBUG=ON -DWITH_DLT=OFF -DCMAKE_BUILD_TYPE=Debug ../</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>cd build &amp;&amp; make</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>lbs</resource>
            </resources>
          </job>
          <job name="common-api-dbus_dlt_logreplayer">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -rf build &amp;&amp; mkdir -p build &amp;&amp; cd build &amp;&amp; cmake -DWITH_DBUS_INTERFACE=OFF -DWITH_FRANCA_DBUS_INTERFACE=ON -DWITH_FRANCA_SOMEIP_INTERFACE=OFF -DWITH_TESTS=ON -DWITH_DEBUG=ON -DWITH_DLT=ON -DCMAKE_BUILD_TYPE=Debug -DCOMMONAPI_TOOL_GENERATOR=/usr/local/bin/commonapi-generator-linux-x86_64 -DCOMMONAPI_DBUS_TOOL_GENERATOR=/usr/local/bin/commonapi-dbus-generator-linux-x86_64 ../</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>cd build &amp;&amp; make</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>lbs</resource>
            </resources>
          </job>
          <job name="common-api-dbus_stdout_logreplayer">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -rf build &amp;&amp; mkdir -p build &amp;&amp; cd build &amp;&amp; cmake -DWITH_DBUS_INTERFACE=OFF -DWITH_FRANCA_DBUS_INTERFACE=ON -DWITH_FRANCA_SOMEIP_INTERFACE=OFF -DWITH_TESTS=ON -DWITH_DEBUG=ON -DWITH_DLT=OFF -DCMAKE_BUILD_TYPE=Debug -DCOMMONAPI_TOOL_GENERATOR=/usr/local/bin/commonapi-generator-linux-x86_64 -DCOMMONAPI_DBUS_TOOL_GENERATOR=/usr/local/bin/commonapi-dbus-generator-linux-x86_64 ../</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>cd build &amp;&amp; make</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>lbs</resource>
            </resources>
          </job>
          <job name="gnssservice_stdout_gpsd">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -rf build &amp;&amp; mkdir -p build &amp;&amp; cd build &amp;&amp; cmake WITH_ENHANCED_POSITION_SERVICE=OFF WITH_SENSORS_SERVICE=OFF  -DWITH_TESTS=ON -DWITH_DEBUG=ON -DWITH_DLT=OFF -DCMAKE_BUILD_TYPE=Debug -DWITH_REPLAYER=OFF -DWITH_GPSD=ON ../</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>cd build &amp;&amp; make</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>lbs</resource>
            </resources>
          </job>
          <job name="sensorsservice_gnssservice_nmea_logger_stdout">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -rf build &amp;&amp; mkdir -p build &amp;&amp; cd build &amp;&amp; cmake -DWITH_ENHANCED_POSITION_SERVICE=OFF -DWITH_NMEA=ON -DWITH_SENSORS=ON -DIMU_TYPE=LSM9DS1 -DWITH_LOGGER=ON -DWITH_TESTS=ON -DWITH_DEBUG=ON -DGNSS_DEVICE=\"/dev/ttyACM0\" -DGNSS_BAUDRATE=B38400 -DGNSS_CHIPSET=UBLOX -DGNSS_DELAY=50 ../</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>cd build &amp;&amp; make</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>lbs</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="WIP--common-api-c" labeltemplate="capic-poc:${capic-poc.git[:8]}-build:${COUNT}" isLocked="false">
      <materials>
        <git url="git://github.com/GENIVI/capic-poc.git" materialName="capic-poc.git" />
        <pipeline pipelineName="systemd_sdbus" stageName="stage" materialName="systemd" />
      </materials>
      <stage name="buildStage">
        <jobs>
          <job name="buildJob">
            <tasks>
              <fetchartifact pipeline="systemd_sdbus" stage="stage" job="configure_and_make" srcdir="libs" dest="systemd">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="systemd_sdbus" stage="stage" job="configure_and_make" srcdir="headers" dest="systemd">
                <runif status="passed" />
              </fetchartifact>
              <exec command="autoreconf">
                <arg>-i</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>export LIBSYSTEMD_CFLAGS="-I$PWD/systemd/headers" LIBSYSTEMD_LIBS="-L$PWD/systemd/libs" &amp;&amp; ./configure LDFLAGS="-L$PWD/systemd/libs"</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>make</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>ga_test</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="test2">
      <environmentvariables>
        <variable name="OLD_VIRTUALBOX">
          <value>1</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/gunnarx/gdp_sde.git" />
        <pipeline pipelineName="GDP-SDE-minnowboard" stageName="CreateVM" materialName="vm" />
      </materials>
      <stage name="defaultStage">
        <approval type="manual" />
        <jobs>
          <job name="recordSelftest">
            <tasks>
              <fetchartifact pipeline="GDP-SDE-minnowboard" stage="CreateVM" job="run_vagrant" srcdir="results">
                <runif status="passed" />
              </fetchartifact>
              <exec command="ls">
                <arg>-R</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>tar xf results/*.tar.gz</arg>
                <runif status="passed" />
              </exec>
              <exec command="ls">
                <arg>-R</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>ls -al gdp-sdk*/*.vbox</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mv gdp-sde-*201* gdp-sdk</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-x</arg>
                <arg>runselftest/clean.sh</arg>
                <arg>gdp-sdk</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>runselftest/record.sh $PWD/gdp-sdk/*.vbox</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>runselftest/clean.sh gdp-sdk</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>virtualbox_test</resource>
            </resources>
            <artifacts>
              <test src="gdp-sdk/*.webm" dest="recording" />
              <artifact src="gdp-sdk/*.webm" dest="build" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="yocto-baseline-testlayer" labeltemplate="meta-ivi.12.0:${meta-ivi.12.0[:8]}-build:${COUNT}" isLocked="false" template="meta-ivi-build-with-test">
      <environmentvariables>
        <variable name="MACHINE">
          <value>qemux86-64</value>
        </variable>
        <variable name="IMAGE_NAME">
          <value>nostromo-image</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/genivi/meta-ivi.git" branch="12.0" dest="meta-ivi" materialName="meta-ivi.12.0" />
        <git url="git://git.openembedded.org/meta-openembedded" branch="morty" dest="meta-openembedded" autoUpdate="false" materialName="meta-openembedded.morty" />
        <git url="http://git.yoctoproject.org/git/poky.git" branch="morty" dest="poky" autoUpdate="false" materialName="poky.morty" />
        <git url="https://github.com/genivi/baseline_ci_helper.git" dest="baseline_ci_helper" autoUpdate="false" materialName="baseline_ci_helper" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Administration_for_c8776aa52222">
    <authorization>
      <view>
        <user>GunnarA</user>
        <role>GDP_Developer</role>
      </view>
      <operate>
        <user>GunnarA</user>
        <role>GDP_Developer</role>
      </operate>
      <admins>
        <user>GunnarA</user>
        <role>GDP_Developer</role>
      </admins>
    </authorization>
    <pipeline name="Wipe_gdp_work_dir" isLocked="false" template="Wipe_dir_pattern">
      <params>
        <param name="agent">c8776aa52222</param>
        <param name="dir_pattern">/var/lib/go-agent/pipelines/*/*build/tmp/work/*</param>
      </params>
      <materials>
        <git url="https://github.com/gunnarx/baseline_ci_helper.git" autoUpdate="false" materialName="not_used" />
      </materials>
    </pipeline>
    <pipeline name="DiskStatistics-test" isLocked="false">
      <materials>
        <git url="http://github.com/gunnarx/gocd-setup.git" />
      </materials>
      <stage name="stage">
        <approval type="manual" />
        <jobs>
          <job name="disk_usage">
            <tasks>
              <exec command="uname">
                <arg>-a</arg>
                <runif status="passed" />
              </exec>
              <exec command="df">
                <arg>-h</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Wipe_sstate_cache" template="Wipe_dir_pattern">
      <params>
        <param name="dir_pattern">/var/lib/go-agent/pipelines/__sstate_cache/*</param>
        <param name="agent">c8776aa52222</param>
      </params>
      <materials>
        <pipeline pipelineName="Wipe_gdp_work_dir" stageName="stage" />
      </materials>
    </pipeline>
    <pipeline name="Wipe_downloads" template="Wipe_dir_pattern">
      <params>
        <param name="dir_pattern">/var/lib/go-agent/pipelines/__downloads_cache/*</param>
        <param name="agent">c8776aa52222</param>
      </params>
      <materials>
        <pipeline pipelineName="Wipe_gdp_work_dir" stageName="stage" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Administration_for_go-agent-1">
    <authorization>
      <admins>
        <user>GunnarA</user>
        <role>GDP_Developer</role>
      </admins>
    </authorization>
    <pipeline name="Wipe_gdp_work_dir7" template="Wipe_dir_pattern">
      <params>
        <param name="dir_pattern">/var/lib/go-agent/pipelines/*/*build/tmp/work/*</param>
        <param name="agent">go-agent1</param>
      </params>
      <materials>
        <git url="https://github.com/gunnarx/baseline_ci_helper.git" autoUpdate="false" materialName="not_used" />
      </materials>
    </pipeline>
    <pipeline name="Wipe_tmp_dirs7" template="Wipe_dir_pattern">
      <params>
        <param name="dir_pattern">/var/lib/go-agent/pipelines/*/*build/tmp</param>
        <param name="agent">go-agent1</param>
      </params>
      <materials>
        <git url="https://github.com/gunnarx/baseline_ci_helper.git" autoUpdate="false" materialName="not_used" />
      </materials>
    </pipeline>
    <pipeline name="Wipe_gdp_sstate_dir7" isLocked="false" template="Wipe_dir_pattern">
      <params>
        <param name="dir_pattern">/var/cache/yocto/sstate/*</param>
        <param name="agent">go-agent1</param>
      </params>
      <timer>0 0 6 ? * THU</timer>
      <materials>
        <git url="https://github.com/gunnarx/baseline_ci_helper.git" autoUpdate="false" materialName="not_used" />
      </materials>
    </pipeline>
    <pipeline name="Wipe_gdp_downloads_dir7" isLocked="false" template="Wipe_dir_pattern">
      <params>
        <param name="dir_pattern">/var/cache/yocto/downloads/*</param>
        <param name="agent">go-agent1</param>
      </params>
      <timer>0 0 6 15 * ?</timer>
      <materials>
        <git url="https://github.com/gunnarx/baseline_ci_helper.git" autoUpdate="false" materialName="not_used" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Administration_for_go-agent-2">
    <authorization>
      <admins>
        <user>GunnarA</user>
        <user>tpollard</user>
        <role>GDP_Developer</role>
      </admins>
    </authorization>
    <pipeline name="Wipe_gdp_work_dir4" template="Wipe_dir_pattern">
      <params>
        <param name="dir_pattern">/var/lib/go-agent/pipelines/*/*build/tmp/work/*</param>
        <param name="agent">go-agent2</param>
      </params>
      <materials>
        <git url="https://github.com/gunnarx/baseline_ci_helper.git" autoUpdate="false" materialName="not_used" />
      </materials>
    </pipeline>
    <pipeline name="Wipe_tmp_dirs" template="Wipe_dir_pattern">
      <params>
        <param name="dir_pattern">/var/lib/go-agent/pipelines/*/*build/tmp</param>
        <param name="agent">go-agent2</param>
      </params>
      <materials>
        <git url="https://github.com/gunnarx/baseline_ci_helper.git" autoUpdate="false" materialName="not_used" />
      </materials>
    </pipeline>
    <pipeline name="Wipe_gdp_sstate_dir6" isLocked="false" template="Wipe_dir_pattern">
      <params>
        <param name="dir_pattern">/var/cache/yocto/sstate/*</param>
        <param name="agent">go-agent2</param>
      </params>
      <timer>0 0 6 ? * SAT</timer>
      <materials>
        <git url="https://github.com/gunnarx/baseline_ci_helper.git" autoUpdate="false" materialName="not_used" />
      </materials>
    </pipeline>
    <pipeline name="Wipe_gdp_downloads_dir6" isLocked="false" template="Wipe_dir_pattern">
      <params>
        <param name="dir_pattern">/var/cache/yocto/downloads/*</param>
        <param name="agent">go-agent2</param>
      </params>
      <timer>0 0 6 1 * ?</timer>
      <materials>
        <git url="https://github.com/gunnarx/baseline_ci_helper.git" autoUpdate="false" materialName="not_used" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Administration_for_Pelagic_Agent">
    <authorization>
      <admins>
        <user>GunnarA</user>
        <user>tpollard</user>
        <role>GDP_Developer</role>
      </admins>
    </authorization>
    <pipeline name="Wipe_gdp_work_dir5" template="Wipe_dir_pattern">
      <params>
        <param name="dir_pattern">/var/lib/go-agent/pipelines/*/*build/tmp/work/*</param>
        <param name="agent">pelagic-agent</param>
      </params>
      <materials>
        <git url="https://github.com/gunnarx/baseline_ci_helper.git" autoUpdate="false" materialName="not_used" />
      </materials>
    </pipeline>
    <pipeline name="Wipe_tmp_dirs5" template="Wipe_dir_pattern">
      <params>
        <param name="dir_pattern">/var/lib/go-agent/pipelines/*/*build/tmp</param>
        <param name="agent">pelagic-agent</param>
      </params>
      <materials>
        <git url="https://github.com/gunnarx/baseline_ci_helper.git" autoUpdate="false" materialName="not_used" />
      </materials>
    </pipeline>
    <pipeline name="Wipe_gdp_downloads_dir5" template="Wipe_dir_pattern">
      <params>
        <param name="dir_pattern">/var/cache/yocto/downloads/*</param>
        <param name="agent">pelagic-agent</param>
      </params>
      <materials>
        <git url="https://github.com/gunnarx/baseline_ci_helper.git" autoUpdate="false" materialName="not_used" />
      </materials>
    </pipeline>
    <pipeline name="Wipe_gdp_sstate_dir5" template="Wipe_dir_pattern">
      <params>
        <param name="dir_pattern">/var/cache/yocto/sstate/*</param>
        <param name="agent">pelagic-agent</param>
      </params>
      <materials>
        <git url="https://github.com/gunnarx/baseline_ci_helper.git" autoUpdate="false" materialName="not_used" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Internal_no_license_to_distribute_artifacts">
    <authorization>
      <admins>
        <role>GDP_Developer</role>
      </admins>
    </authorization>
    <pipeline name="GDP-Yocto-r-car-m3-starter-kit_SDK" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false">
      <environmentvariables>
        <variable name="TARGET">
          <value>r-car-m3-starter-kit</value>
        </variable>
        <variable name="BUILD_SDK">
          <value>true</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="http://github.com/GENIVI/genivi-dev-platform.git" materialName="genivi-dev-platform.git" />
      </materials>
      <stage name="build">
        <approval type="manual" />
        <jobs>
          <job name="init_and_bitbake">
            <environmentvariables>
              <variable name="BUILD_SDK">
                <value>true</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>scripts/ci-build.sh CI_FLAG</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
              <resource>renesas_binaries</resource>
            </resources>
            <artifacts>
              <artifact src="staging" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="GDP-SDE-r-car-m3-starter-kit" isLocked="false" template="GDP_SDE_gunnarx_deploy">
      <params>
        <param name="MACHINE">r-car-m3-starter-kit</param>
      </params>
      <environmentvariables>
        <variable name="VMNAME">
          <value>gdp-sde-#{MACHINE}</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/gunnarx/gdp_sde" materialName="gdp_sde" />
        <pipeline pipelineName="Eclipse-for-SDK-2" stageName="stage" materialName="eclipse" />
        <pipeline pipelineName="Seed-QtLibs-and-creator" stageName="stage" materialName="Qt" />
        <pipeline pipelineName="DLT-Viewer" stageName="stage" materialName="dlt-viewer" />
        <pipeline pipelineName="capicxx-core-tools" stageName="build" materialName="capicxx-core-tools" />
        <pipeline pipelineName="capicxx-dbus-tools" stageName="build" materialName="capicxx-dbus-tools" />
        <pipeline pipelineName="capicxx-someip-tools" stageName="build" materialName="capicxx-someip-tools" />
        <pipeline pipelineName="GDP-Yocto-r-car-m3-starter-kit_SDK" stageName="build" materialName="yocto-sdk-r-car-m3-starter-kit" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="GDP_Morty" />
  <pipelines group="R-Car_Gen2">
    <pipeline name="GDP-Yocto-Porter" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_renesas_script_with_artifacts">
      <environmentvariables>
        <variable name="TARGET">
          <value>porter</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="http://github.com/GENIVI/genivi-dev-platform.git" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-Silk" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_renesas_script_with_artifacts">
      <environmentvariables>
        <variable name="TARGET">
          <value>silk</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="http://github.com/GENIVI/genivi-dev-platform.git" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-Koelsch" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_renesas_script_with_artifacts">
      <environmentvariables>
        <variable name="TARGET">
          <value>koelsch</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="http://github.com/GENIVI/genivi-dev-platform.git" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-PORTER-GITHUB-PR" isLocked="false" template="Yocto_GDP_renesas_script_NO_ARTIFACTS">
      <environmentvariables>
        <variable name="TARGET">
          <value>porter</value>
        </variable>
      </environmentvariables>
      <materials>
        <scm ref="a1a82896-a41b-4684-a7e8-4d43bf691438" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-Koelsch-GITHUB-PR" isLocked="false" template="Yocto_GDP_renesas_script_NO_ARTIFACTS">
      <environmentvariables>
        <variable name="TARGET">
          <value>koelsch</value>
        </variable>
      </environmentvariables>
      <materials>
        <scm ref="a1a82896-a41b-4684-a7e8-4d43bf691438" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Deployments">
    <pipeline name="Upload_GDP_Release_PCore" isLocked="false" template="Upload_Release_All_Targets_generic">
      <params>
        <param name="SERVER_RESOURCE">deploy_pelagicore</param>
      </params>
      <environmentvariables>
        <variable name="DEPLOY_DIR">
          <value>/var/lib/go-agent/pipelines/__deploy</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/gunnarx/dummy" autoUpdate="false" />
        <pipeline pipelineName="Release-qemux86-64" stageName="build" materialName="qemux86-64" />
        <pipeline pipelineName="Release-minnowboard-SDL" stageName="build" materialName="minnowboard" />
        <pipeline pipelineName="Release-raspberrypi-2" stageName="build" materialName="raspberrypi2" />
        <pipeline pipelineName="Release-raspberrypi-3" stageName="build" materialName="raspberrypi3" />
        <pipeline pipelineName="Release-dragonboard-410c" stageName="build" materialName="dragonboard-410c" />
      </materials>
    </pipeline>
    <pipeline name="Upload_PCore-SDL" isLocked="false">
      <params>
        <param name="SERVER_RESOURCE">deploy_pelagicore</param>
      </params>
      <environmentvariables>
        <variable name="DEPLOY_DIR">
          <value>/var/lib/go-agent/pipelines/__deploy</value>
        </variable>
      </environmentvariables>
      <materials>
        <pipeline pipelineName="SDL_minnowboard" stageName="build" materialName="minnowboard-sdl" />
        <pipeline pipelineName="SDL_r-car-m3-starter-kit" stageName="build" materialName="sdl_r-car-m3-starter-kit" />
      </materials>
      <stage name="copy">
        <jobs>
          <job name="copy_files">
            <tasks>
              <fetchartifact pipeline="SDL_minnowboard" stage="build" job="init_and_bitbake" srcdir="staging" dest="staging_minnowboard">
                <runif status="any" />
              </fetchartifact>
              <fetchartifact pipeline="SDL_r-car-m3-starter-kit" stage="build" job="init_and_bitbake" srcdir="staging" dest="staging_r-car-m3-starter-kit">
                <runif status="any" />
              </fetchartifact>
              <exec command="bash">
                <arg>-c</arg>
                <arg>date +%Y%m%d_%H%M%S &gt;timestamp</arg>
                <runif status="any" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mkdir -p $DEPLOY_DIR/{minnowboard-sdl,r-car-m3-starter-kit-sdl}/$(cat timestamp)</arg>
                <runif status="any" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mv staging_r-car-m3-starter-kit $DEPLOY_DIR/r-car-m3-starter-kit-sdl/$(cat timestamp)/  || true</arg>
                <runif status="any" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mv staging_minnowboard $DEPLOY_DIR/minnowboard-sdl/$(cat timestamp)/  || true</arg>
                <runif status="any" />
              </exec>
            </tasks>
            <resources>
              <resource>#{SERVER_RESOURCE}</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Upload_GDP_Release_GENIVI" isLocked="false" template="Upload_Release_All_Targets_generic">
      <params>
        <param name="SERVER_RESOURCE">deploy_genivi</param>
      </params>
      <environmentvariables>
        <variable name="DEPLOY_DIR">
          <value>/var/lib/go-agent/pipelines/__deploy/deploy</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/gunnarx/dummy" autoUpdate="false" />
        <pipeline pipelineName="Release-qemux86-64" stageName="build" materialName="qemux86-64" />
        <pipeline pipelineName="Release-minnowboard-SDL" stageName="build" materialName="minnowboard" />
        <pipeline pipelineName="Release-raspberrypi-2" stageName="build" materialName="raspberrypi2" />
        <pipeline pipelineName="Release-raspberrypi-3" stageName="build" materialName="raspberrypi3" />
        <pipeline pipelineName="Release-dragonboard-410c" stageName="build" materialName="dragonboard-410c" />
      </materials>
    </pipeline>
    <pipeline name="Wipe_PCore_deployment_dir" isLocked="false" template="Wipe_dir_pattern">
      <params>
        <param name="agent">go-agent</param>
        <param name="dir_pattern">/var/lib/go-agent/pipelines/__deploy</param>
      </params>
      <timer>0 0 5 ? * SUN</timer>
      <materials>
        <git url="https://github.com/GENIVI/baseline_ci_helper" />
      </materials>
    </pipeline>
  </pipelines>
  <templates>
    <pipeline name="Yocto_GDP_generic_script_with_artifacts">
      <stage name="build" cleanWorkingDir="true">
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>scripts/ci-build.sh CI_FLAG</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
            </resources>
            <artifacts>
              <artifact src="staging" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Yocto_GDP_generic_script_NO_ARTIFACTS">
      <stage name="build" cleanWorkingDir="true">
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>scripts/ci-build.sh CI_FLAG</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Yocto_GDP_generic_script_rm_work_NO_ARTIFACTS">
      <stage name="build" cleanWorkingDir="true">
        <jobs>
          <job name="init_and_bitbake">
            <environmentvariables>
              <variable name="RM_WORK">
                <value>true</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>scripts/ci-build.sh CI_FLAG</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Yocto_GDP_renesas_script_with_artifacts">
      <stage name="build" cleanWorkingDir="true">
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>scripts/ci-build.sh CI_FLAG</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
              <resource>renesas_binaries</resource>
            </resources>
            <artifacts>
              <artifact src="staging" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Yocto_GDP_renesas_script_NO_ARTIFACTS">
      <stage name="build" cleanWorkingDir="true">
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>scripts/ci-build.sh CI_FLAG</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
              <resource>renesas_binaries</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Yocto_GDP_renesas_script_rm_work_NO_ARTIFACTS">
      <stage name="build" cleanWorkingDir="true">
        <jobs>
          <job name="init_and_bitbake">
            <environmentvariables>
              <variable name="RM_WORK">
                <value>true</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>scripts/ci-build.sh CI_FLAG</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
              <resource>renesas_binaries</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Yocto_GDP_Renesas_generic">
      <authorization>
        <admins>
          <user>AndreasR</user>
          <user>EBoto</user>
          <user>RobertM</user>
          <user>dunderroffe</user>
          <user>tpollard</user>
          <user>zeenix</user>
        </admins>
      </authorization>
      <stage name="build" cleanWorkingDir="true">
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="rm" workingdir="gdp-src-build">
                <arg>-rf</arg>
                <arg>tmp</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source ./init.sh $TARGET -f</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$GFX_MACHINE" == "porter" || "$GFX_MACHINE" == silk ]]; then cd meta-renesas/meta-rcar-gen2 ; ./copy_gfx_software_$GFX_MACHINE.sh /var/go/sgx_bin ; ./copy_mm_software_lcb.sh /var/go/sgx_bin/; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="renesas-rcar-gen3">
                <arg>-c</arg>
                <arg>if [[ "$TARGET" == "r-car-m3-starter-kit" ]]; then meta-rcar-gen3/docs/sample/copyscript/copy_evaproprietary_softwares.sh /var/go/sgx_bin_gen3/; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$TARGET" == "r-car-m3-starter-kit" ]]; then echo 'DISTRO_FEATURES_append = " use_eva_pkg"' | tee -a gdp-src-build/conf/local.conf ; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp-src-build/conf">
                <arg>-c</arg>
                <arg>/bin/echo -e 'DL_DIR = "/var/cache/yocto/downloads"\nSSTATE_DIR = "/var/cache/yocto/sstate"' &gt;&gt;local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.name</arg>
                <arg>Go Server</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.email</arg>
                <arg>no_email@genivigo.com</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source poky/oe-init-build-env gdp-src-build &amp;&amp; bitbake genivi-dev-platform</arg>
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -f logs.tar logs.tar.gz &amp;&amp; find gdp-src-build/tmp/work \( -name "*.log" -o -name "log.*" -o -name "run.*" \) -print0 | xargs -0 tar uf logs.tar &amp;&amp; gzip logs.tar</arg>
                <runif status="any" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>staging/images</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mv gdp-src-build/tmp/deploy/images/*/* staging/</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mv staging/{*201*ext*,*201*rootfs*,*sdimg*,*hddimg*,bzImage*201*} staging/images/ || true</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>renesas_binaries</resource>
              <resource>yocto_build</resource>
            </resources>
            <artifacts>
              <artifact src="logs.tar.gz" />
              <artifact src="gdp-src-build/tmp/deploy/licenses" />
              <artifact src="gdp-src-build/tmp/deploy/licenses/genivi-dev-platform*/license.manifest" />
              <artifact src="gdp-src-build/tmp/deploy/licenses/genivi-dev-platform*/package.manifest" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Yocto_GDP_generic_release_renesas">
      <stage name="build">
        <approval type="manual" />
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>scripts/ci-build.sh CI_FLAG</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
              <resource>renesas_binaries</resource>
            </resources>
            <artifacts>
              <artifact src="staging/" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Yocto_GDP_generic_release">
      <stage name="build" cleanWorkingDir="true">
        <approval type="manual" />
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>scripts/ci-build.sh CI_FLAG</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
            </resources>
            <artifacts>
              <artifact src="staging" />
              <artifact src="release" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Yocto_GDP_generic_release_and_upload">
      <stage name="build">
        <approval type="manual" />
        <environmentvariables>
          <variable name="TARGET">
            <value>#{TARGET}</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>scripts/ci-build.sh CI_FLAG</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
            </resources>
            <artifacts>
              <artifact src="staging/" />
              <artifact src="release/" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="deploy_files">
        <approval type="manual" />
        <jobs>
          <job name="copy_files">
            <tasks>
              <fetchartifact pipeline="" stage="build" job="init_and_bitbake" srcdir="staging">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="" stage="build" job="init_and_bitbake" srcdir="release">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash">
                <arg>-c</arg>
                <arg>date +%Y%m%d_%H%M%S &gt;timestamp</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mkdir -p $DEPLOY_DIR/$RELEASE/#{TARGET}/$(cat timestamp)</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mv staging $DEPLOY_DIR/$RELEASE/#{TARGET}/$(cat timestamp)/  || true</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mv release $DEPLOY_DIR/$RELEASE/#{TARGET}/$(cat timestamp)/  || true</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>#{SERVER_RESOURCE}</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Yocto_GDP_generic_latest_meta_genivi_demo">
      <authorization>
        <admins>
          <user>tpollard</user>
          <user>RobertM</user>
          <user>AndreasR</user>
          <user>EBoto</user>
        </admins>
      </authorization>
      <stage name="build">
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="bash" workingdir="gdp/gdp-src-build/">
                <arg>-c</arg>
                <arg>rm -rf tmp</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "dragonboard-410c" ]]; then source ./init.sh $MACHINE accept-eula; else source ./init.sh $MACHINE; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "porter" || "$MACHINE" == silk ]]; then cd meta-renesas/meta-rcar-gen2 &amp;&amp; ./copy_gfx_software_$MACHINE.sh /var/go/sgx_bin; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "porter" || "$MACHINE" == silk ]];  then cd meta-renesas/meta-rcar-gen2 &amp;&amp; ./copy_mm_software_lcb.sh /var/go/sgx_bin/; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="rm" workingdir="gdp">
                <arg>-rf</arg>
                <arg>meta-genivi-dev</arg>
                <runif status="passed" />
              </exec>
              <exec command="mv" workingdir="gdp">
                <arg>../meta-genivi-dev</arg>
                <arg>meta-genivi-dev</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp/gdp-src-build/conf">
                <arg>-c</arg>
                <arg>/bin/echo -e 'DL_DIR = "/var/cache/yocto/downloads"\nSSTATE_DIR = "/var/cache/yocto/sstate"' &gt;&gt;local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.name</arg>
                <arg>Go Server</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.email</arg>
                <arg>no_email@genivigo.com</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp">
                <arg>-c</arg>
                <arg>source poky/oe-init-build-env gdp-src-build &amp;&amp; bitbake genivi-dev-platform</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -f logs.tar logs.tar.gz &amp;&amp; find gdp/gdp-src-build/tmp/work \( -name "*.log" -o -name "log.*" -o -name "run.*" \) -print0 | xargs -0 tar uf logs.tar &amp;&amp; gzip logs.tar</arg>
                <runif status="any" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>staging/images</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mv gdp/gdp-src-build/tmp/deploy/images/*/* staging/</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mv staging/{*201*ext*,*201*rootfs*,*sdimg*,*hddimg*,bzImage*201*} staging/images/ || true</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
            </resources>
            <artifacts>
              <artifact src="logs.tar.gz" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Yocto_GDP_generic_reuse_tmp">
      <authorization>
        <admins>
          <user>tpollard</user>
          <user>RobertM</user>
          <user>AndreasR</user>
          <user>EBoto</user>
        </admins>
      </authorization>
      <stage name="build">
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source ./init.sh $MACHINE</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "porter" || "$MACHINE" == silk ]]; then cd meta-renesas/meta-rcar-gen2 &amp;&amp; ./copy_gfx_software_$MACHINE.sh /var/go/sgx_bin; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "porter" || "$MACHINE" == silk ]];  then cd meta-renesas/meta-rcar-gen2 &amp;&amp; ./copy_mm_software_lcb.sh /var/go/sgx_bin/; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp-src-build/conf">
                <arg>-c</arg>
                <arg>/bin/echo -e 'DL_DIR = "/var/cache/yocto/downloads"\nSSTATE_DIR = "/var/cache/yocto/sstate"' &gt;&gt;local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.name</arg>
                <arg>Go Server</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.email</arg>
                <arg>no_email@genivigo.com</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source poky/oe-init-build-env gdp-src-build &amp;&amp; bitbake genivi-dev-platform</arg>
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -f logs.tar logs.tar.gz &amp;&amp; find gdp-src-build/tmp/work \( -name "*.log" -o -name "log.*" -o -name "run.*" \) -print0 | xargs -0 tar uf logs.tar &amp;&amp; gzip logs.tar</arg>
                <runif status="any" />
              </exec>
            </tasks>
            <resources>
              <resource>ga_test</resource>
            </resources>
            <artifacts>
              <artifact src="logs.tar.gz" />
              <artifact src="gdp-src-build/tmp/deploy/licenses" />
              <artifact src="gdp-src-build/tmp/deploy/licenses/genivi-dev-platform*/license.manifest" />
              <artifact src="gdp-src-build/tmp/deploy/licenses/genivi-dev-platform*/package.manifest" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="franca_install_automation">
      <authorization>
        <admins>
          <user>gmacario</user>
        </admins>
      </authorization>
      <stage name="install_stage">
        <jobs>
          <job name="install_job">
            <environmentvariables>
              <variable name="EXIT_ON_FAILURE">
                <value>true</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="./script.sh" />
              <exec command="bash">
                <arg>-c</arg>
                <arg>cd /var/go/tools &amp;&amp; tar cfz ${GO_PIPELINE_NAME}_${GO_REVISION_FRANCA_INSTALL_AUTOMATION_GIT}.tar.gz autoeclipse</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mv /var/go/tools/${GO_PIPELINE_NAME}_${GO_REVISION_FRANCA_INSTALL_AUTOMATION_GIT}.tar.gz .</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="franca_install*.tar.gz" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="CMAKE_build">
      <authorization>
        <admins>
          <user>gmacario</user>
          <user>marcor</user>
          <user>tpollard</user>
          <user>jonathanmaw</user>
        </admins>
      </authorization>
      <stage name="build">
        <jobs>
          <job name="cmake_and_make">
            <tasks>
              <exec command="rm">
                <arg>-rf</arg>
                <arg>#{BUILD_DIR}</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>#{BUILD_DIR}</arg>
                <runif status="passed" />
              </exec>
              <exec command="cmake" workingdir="#{BUILD_DIR}">
                <arg>..</arg>
                <runif status="passed" />
              </exec>
              <exec command="make" workingdir="#{BUILD_DIR}">
                <arg>V=1</arg>
                <arg>-j8</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>cmake</resource>
            </resources>
            <artifacts>
              <artifact src="#{BUILD_DIR}" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="meta-ivi-build">
      <authorization>
        <admins>
          <user>EBoto</user>
          <user>tolkien</user>
          <user>StephenL</user>
          <user>dunderroffe</user>
          <user>OscarA</user>
        </admins>
      </authorization>
      <stage name="Build">
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="git" workingdir="meta-ivi">
                <arg>config</arg>
                <arg>user.name</arg>
                <arg>Go Agent</arg>
                <runif status="passed" />
              </exec>
              <exec command="git" workingdir="meta-ivi">
                <arg>config</arg>
                <arg>user.email</arg>
                <arg>no_email@genivigo.com</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="meta-ivi">
                <arg>-c</arg>
                <arg>if [ -f scripts/checkout ]; then bash scripts/checkout; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>export TEMPLATECONF=$PWD/meta-ivi/meta-ivi/conf &amp;&amp; source poky/oe-init-build-env</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="build/conf">
                <arg>-c</arg>
                <arg>/bin/echo -e 'DL_DIR = "/var/cache/yocto/downloads"\nSSTATE_DIR = "/var/cache/yocto/sstate"' &gt;&gt;local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source poky/oe-init-build-env &amp;&amp; bitbake -c fetch linux-yocto</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>export IMG_NAME=`source poky/oe-init-build-env | grep  image | head -n 1` &amp;&amp; source poky/oe-init-build-env &amp;&amp; bitbake $IMG_NAME</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -f logs.tar logs.tar.gz &amp;&amp; find build/tmp/work \( -name "*.log" -o -name "log.*" -o -name "run.*" \) -print0 | xargs -0 tar uf logs.tar &amp;&amp; gzip logs.tar</arg>
                <runif status="any" />
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
            </resources>
            <artifacts>
              <artifact src="logs.tar.gz" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="meta-ivi-build-with-test">
      <authorization>
        <admins>
          <user>tolkien</user>
          <user>tpollard</user>
          <user>RobertM</user>
          <user>AndreasR</user>
          <user>EBoto</user>
        </admins>
      </authorization>
      <stage name="Build">
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="git" workingdir="meta-ivi">
                <arg>config</arg>
                <arg>user.name</arg>
                <arg>Go Agent</arg>
                <runif status="passed" />
              </exec>
              <exec command="git" workingdir="meta-ivi">
                <arg>config</arg>
                <arg>user.email</arg>
                <arg>no_email@genivigo.com</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="baseline_ci_helper">
                <arg>-c</arg>
                <arg>./checkout_layer_hash.sh poky</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="baseline_ci_helper">
                <arg>-c</arg>
                <arg>./checkout_layer_hash.sh meta-openembedded</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>export TEMPLATECONF=$PWD/meta-ivi/meta-ivi/conf &amp;&amp; source poky/oe-init-build-env</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="build/conf">
                <arg>-c</arg>
                <arg>/bin/echo -e 'DL_DIR = "/var/cache/yocto/downloads"\nSSTATE_DIR = "/var/cache/yocto/sstate"' &gt;&gt;local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="build/conf">
                <arg>-c</arg>
                <arg>echo 'BBLAYERS += "${TOPDIR}/../meta-ivi/meta-ivi-test/"' &gt;&gt;bblayers.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source poky/oe-init-build-env &amp;&amp; bitbake -c fetch linux-yocto</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source poky/oe-init-build-env &amp;&amp; bitbake test-image</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -f logs.tar logs.tar.gz &amp;&amp; find build/tmp/work \( -name "*.log" -o -name "log.*" -o -name "run.*" \) -print0 | xargs -0 tar uf logs.tar &amp;&amp; gzip logs.tar ; touch logs.tar.gz</arg>
                <runif status="any" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>staging</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mv build/tmp/deploy/images/*/{*.bzImage,*.ext4,*.img}  staging/ || true</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
            </resources>
            <artifacts>
              <artifact src="logs_test.tar.gz" />
              <artifact src="staging" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Yocto_GDP_SDK_generic_script_with_artifacts">
      <stage name="build" cleanWorkingDir="true">
        <approval type="manual" />
        <jobs>
          <job name="init_and_bitbake">
            <environmentvariables>
              <variable name="BUILD_SDK">
                <value>true</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>scripts/ci-build.sh CI_FLAG</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
            </resources>
            <artifacts>
              <artifact src="staging" dest="results" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Wipe_dir_pattern">
      <authorization>
        <admins>
          <user>tpollard</user>
          <user>RobertM</user>
        </admins>
      </authorization>
      <stage name="stage" fetchMaterials="false">
        <approval type="manual" />
        <jobs>
          <job name="job">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>echo "dir-pattern glob matches: " &amp;&amp; ls #{dir_pattern} || true</arg>
                <runif status="any" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -rf #{dir_pattern}</arg>
                <runif status="any" />
              </exec>
            </tasks>
            <resources>
              <resource>#{agent}</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="GDP_SDE_generic">
      <authorization>
        <admins>
          <user>tpollard</user>
          <user>RobertM</user>
          <user>AndreasR</user>
          <user>EBoto</user>
        </admins>
      </authorization>
      <stage name="Assemble">
        <approval type="manual" />
        <jobs>
          <job name="gdp-sdk">
            <environmentvariables>
              <variable name="SDK_INSTALLER_NAME">
                <value>oecore-raspberry-toolchain-nodistro.0.sh</value>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact pipeline="GDP-Yocto-#{MACHINE}_SDK" stage="build" job="init_and_bitbake" srcdir="results" dest="#{MACHINE}">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Eclipse-for-SDK-2" stage="stage" job="job" srcdir="results" dest="eclipse">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -rf gdp-sdk ; mkdir -p gdp-sdk/bin</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="capicxx-core-tools" stage="build" job="build" srcdir="bin" dest="gdp-sdk/capicxx-core">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="capicxx-dbus-tools" stage="build" job="build" srcdir="bin" dest="gdp-sdk/capicxx-dbus">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="capicxx-someip-tools" stage="build" job="build" srcdir="bin" dest="gdp-sdk/capicxx-someip">
                <runif status="passed" />
              </fetchartifact>
              <exec command="mv">
                <arg>eclipse/results/eclipse</arg>
                <arg>gdp-sdk/</arg>
                <runif status="passed" />
              </exec>
              <exec command="mv">
                <arg>eclipse/results/workspace</arg>
                <arg>gdp-sdk/</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mv #{MACHINE}/results/genivi-dev-platform-*/license.manifest gdp-sdk/license.manifest.#{MACHINE} || true</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>gdp-sdk/yocto-sdk/#{MACHINE}</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>chmod 755 */results/staging/sdk/oecore-*toolchain*.sh gdp-sdk/capi*/bin/*x86_64 || true</arg>
                <runif status="passed" />
              </exec>
              <exec command="chmod">
                <arg>-R</arg>
                <arg>u+r</arg>
                <arg>gdp-sdk/yocto-sdk</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mv ./#{MACHINE}/results/staging/sdk/oecore-*toolchain*.sh ./gdp-sdk/ &amp;&amp; mkdir -p ./gdp-sdk/yocto-sdk/#{MACHINE}</arg>
                <runif status="passed" />
              </exec>
              <exec command="tar">
                <arg>cfz</arg>
                <arg>gdp-sde-#{MACHINE}.tar.gz</arg>
                <arg>gdp-sdk</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="gdp-sde-#{MACHINE}.tar.gz" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="CreateVM">
        <environmentvariables>
          <variable name="VMNAME">
            <value>gdp-sde-#{MACHINE}</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="run_vagrant">
            <environmentvariables>
              <variable name="MACHINE">
                <value>#{MACHINE}</value>
              </variable>
              <variable name="VMNAME">
                <value>gdp-sde-#{MACHINE}</value>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact pipeline="Seed-QtLibs-and-creator" stage="stage" job="job" srcfile="Qt5.6.1-vagrant-with-source.tar.bz2">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="homedir">
                <arg>-c</arg>
                <arg>tar xf ../Qt*.tar.bz2</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="" stage="Assemble" job="gdp-sdk" srcfile="gdp-sde-#{MACHINE}.tar.gz">
                <runif status="passed" />
              </fetchartifact>
              <exec command="tar" workingdir="homedir">
                <arg>xfz</arg>
                <arg>../gdp-sde-#{MACHINE}.tar.gz</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="DLT-Viewer" stage="stage" job="job" srcdir="dlt-viewer" dest="homedir">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash">
                <arg>-c</arg>
                <arg>scripts/timestamp.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="homedir/.config">
                <arg>-c</arg>
                <arg>../../scripts/annotate_wallpaper.sh "GDP Software Development Environment \n$MACHINE $(cat ../../TIMESTAMP) "</arg>
                <runif status="passed" />
              </exec>
              <exec command="vagrant">
                <arg>destroy</arg>
                <arg>-f</arg>
                <runif status="passed" />
              </exec>
              <exec command="vagrant">
                <arg>up</arg>
                <arg>--provision</arg>
                <runif status="passed" />
              </exec>
              <exec command="vagrant">
                <arg>halt</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>cd "/var/go/VirtualBox VMs/$(cat VMNAME)" &amp;&amp; f=buildinfo.txt &amp;&amp; echo -n "VM build completed on agent named: " &gt;"$f" &amp;&amp; hostname &gt;&gt; "$f" &amp;&amp; date &gt;&gt; "$f" &amp;&amp; env &gt;&gt;"$f"</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>tar cvfz vimage_temp -C "/var/go/VirtualBox VMs" "$(cat VMNAME)"</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>SIZE=$(du -hs vimage_temp | awk '{print $1}') &amp;&amp; mv vimage_temp gdp-sde-#{MACHINE}-virtualbox-image_$(cat FILESTAMP)_\($SIZE\).tar.gz</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [ -d source ] ; then tar cf - source | gzip -c -1 &gt;sources.tar.gz  ; else touch sources.tar.gz ; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="vagrant">
                <arg>destroy</arg>
                <arg>-f</arg>
                <runif status="any" />
              </exec>
            </tasks>
            <resources>
              <resource>imagemagick</resource>
              <resource>vagrant</resource>
            </resources>
            <artifacts>
              <artifact src="gdp-sde-#{MACHINE}-virtualbox-image*.tar.gz" dest="results" />
              <artifact src="sources.tar.gz" dest="results" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="ManualTest" fetchMaterials="false">
        <approval type="manual" />
        <jobs>
          <job name="Trigger">
            <tasks>
              <exec command="true">
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="Copy_to_web_server" fetchMaterials="false" cleanWorkingDir="true">
        <approval type="manual" />
        <environmentvariables>
          <variable name="RELEASE_DIR">
            <value>/var/cache/deploy/sde</value>
          </variable>
          <variable name="VERSION">
            <value>snapshot</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="copy_to_genivi_docs_site">
            <tasks>
              <fetchartifact pipeline="GDP-SDE-#{MACHINE}" stage="CreateVM" job="run_vagrant" srcdir="results">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash">
                <arg>-c</arg>
                <arg>echo "Deploy dir is: $RELEASE_DIR/$VERSION, SNAPSHOT"</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mkdir -p "$RELEASE_DIR/$VERSION"</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>touch "$RELEASE_DIR/$VERSION/UNSUPPORTED_SNAPSHOT"</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>ls -l results/</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="results">
                <arg>-c</arg>
                <arg>for f in gdp-sd[ke]-#{MACHINE}-virtualbox-image*.tar.gz ; do md5sum "$f" &gt;"$f.md5" ; done</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>cp results/sources.tar.gz "$RELEASE_DIR/$VERSION/ubuntu_vm_source.tar.gz"</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>cp results/gdp-sd[ke]-#{MACHINE}-virtualbox-image* "$RELEASE_DIR/$VERSION/"</arg>
                <runif status="any" />
              </exec>
            </tasks>
            <resources>
              <resource>deploy_genivi</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="GDP_SDE_gunnarx_deploy">
      <stage name="Assemble">
        <jobs>
          <job name="gdp-sdk">
            <environmentvariables>
              <variable name="SDK_INSTALLER_NAME">
                <value>oecore-raspberry-toolchain-nodistro.0.sh</value>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact pipeline="GDP-Yocto-#{MACHINE}_SDK" stage="build" job="init_and_bitbake" srcdir="results" dest="#{MACHINE}">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Eclipse-for-SDK-2" stage="stage" job="job" srcdir="results" dest="eclipse">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -rf gdp-sdk ; mkdir -p gdp-sdk/bin</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="capicxx-core-tools" stage="build" job="build" srcdir="bin" dest="gdp-sdk/capicxx-core">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="capicxx-dbus-tools" stage="build" job="build" srcdir="bin" dest="gdp-sdk/capicxx-dbus">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="capicxx-someip-tools" stage="build" job="build" srcdir="bin" dest="gdp-sdk/capicxx-someip">
                <runif status="passed" />
              </fetchartifact>
              <exec command="mv">
                <arg>eclipse/results/eclipse</arg>
                <arg>gdp-sdk/</arg>
                <runif status="passed" />
              </exec>
              <exec command="mv">
                <arg>eclipse/results/workspace</arg>
                <arg>gdp-sdk/</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mv #{MACHINE}/results/genivi-dev-platform-*/license.manifest gdp-sdk/license.manifest.#{MACHINE}</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>gdp-sdk/yocto-sdk/#{MACHINE}</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>chmod 755 */results/sdk/oecore-*toolchain*.sh gdp-sdk/capi*/bin/*x86_64 || true</arg>
                <runif status="passed" />
              </exec>
              <exec command="chmod">
                <arg>-R</arg>
                <arg>u+r</arg>
                <arg>gdp-sdk/yocto-sdk</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mv ./#{MACHINE}/results/sdk/oecore-*toolchain*.sh ./gdp-sdk/ &amp;&amp; mkdir -p ./gdp-sdk/yocto-sdk/#{MACHINE}</arg>
                <runif status="passed" />
              </exec>
              <exec command="tar">
                <arg>cfz</arg>
                <arg>gdp-sde-#{MACHINE}.tar.gz</arg>
                <arg>gdp-sdk</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="gdp-sde-#{MACHINE}.tar.gz" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="CreateVM">
        <environmentvariables>
          <variable name="VMNAME">
            <value>gdp-sde-#{MACHINE}</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="run_vagrant">
            <environmentvariables>
              <variable name="MACHINE">
                <value>#{MACHINE}</value>
              </variable>
              <variable name="VMNAME">
                <value>gdp-sde-#{MACHINE}</value>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact pipeline="Seed-QtLibs-and-creator" stage="stage" job="job" srcfile="Qt5.6.1-vagrant-with-source.tar.bz2">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="homedir">
                <arg>-c</arg>
                <arg>tar xf ../Qt*.tar.bz2</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="" stage="Assemble" job="gdp-sdk" srcfile="gdp-sde-#{MACHINE}.tar.gz">
                <runif status="passed" />
              </fetchartifact>
              <exec command="tar" workingdir="homedir">
                <arg>xfz</arg>
                <arg>../gdp-sde-#{MACHINE}.tar.gz</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="DLT-Viewer" stage="stage" job="job" srcdir="dlt-viewer" dest="homedir">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash">
                <arg>-c</arg>
                <arg>scripts/timestamp.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="homedir/.config">
                <arg>-c</arg>
                <arg>../../scripts/annotate_wallpaper.sh "GDP Software Development Environment \n$MACHINE $(cat ../../TIMESTAMP) "</arg>
                <runif status="passed" />
              </exec>
              <exec command="vagrant">
                <arg>destroy</arg>
                <arg>-f</arg>
                <runif status="passed" />
              </exec>
              <exec command="vagrant">
                <arg>up</arg>
                <arg>--provision</arg>
                <runif status="passed" />
              </exec>
              <exec command="vagrant">
                <arg>halt</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>cd "/var/go/VirtualBox VMs/$(cat VMNAME)" &amp;&amp; f=buildinfo.txt &amp;&amp; echo -n "VM build completed on agent named: " &gt;"$f" &amp;&amp; hostname &gt;&gt; "$f" &amp;&amp; date &gt;&gt; "$f" &amp;&amp; env &gt;&gt;"$f"</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>tar cvfz vimage_temp -C "/var/go/VirtualBox VMs" "$(cat VMNAME)"</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>SIZE=$(du -hs vimage_temp | awk '{print $1}') &amp;&amp; mv vimage_temp gdp-sde-#{MACHINE}-virtualbox-image_$(cat FILESTAMP)_\($SIZE\).tar.gz</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [ -d source ] ; then tar cf - source | gzip -c -1 &gt;sources.tar.gz  ; else touch sources.tar.gz ; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="vagrant">
                <arg>destroy</arg>
                <arg>-f</arg>
                <runif status="any" />
              </exec>
            </tasks>
            <resources>
              <resource>imagemagick</resource>
              <resource>vagrant</resource>
            </resources>
            <artifacts>
              <artifact src="gdp-sde-#{MACHINE}-virtualbox-image*.tar.gz" dest="results" />
              <artifact src="sources.tar.gz" dest="results" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="ManualTest" fetchMaterials="false">
        <approval type="manual" />
        <jobs>
          <job name="Trigger">
            <tasks>
              <exec command="true">
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="Copy_to_web_server" fetchMaterials="false" cleanWorkingDir="true">
        <approval type="manual" />
        <environmentvariables>
          <variable name="RELEASE_DIR">
            <value>/var/cache/deploy/sde</value>
          </variable>
          <variable name="VERSION">
            <value>snapshot</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="copy_to_gunnarx_only">
            <tasks>
              <fetchartifact pipeline="GDP-SDE-#{MACHINE}" stage="CreateVM" job="run_vagrant" srcdir="results">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash">
                <arg>-c</arg>
                <arg>echo "Deploy dir is: $RELEASE_DIR/$VERSION, SNAPSHOT"</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mkdir -p "$RELEASE_DIR/$VERSION"</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>touch "$RELEASE_DIR/$VERSION/UNSUPPORTED_SNAPSHOT"</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>ls -l results/</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="results">
                <arg>-c</arg>
                <arg>for f in gdp-sde-#{MACHINE}-virtualbox-image*.tar.gz ; do md5sum "$f" &gt;"$f.md5" ; done</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>cp results/sources.tar.gz "$RELEASE_DIR/$VERSION/ubuntu_vm_source.tar.gz"</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>cp results/gdp-sd[ke]-#{MACHINE}-virtualbox-image* "$RELEASE_DIR/$VERSION/"</arg>
                <runif status="any" />
              </exec>
            </tasks>
            <resources>
              <resource>deploy_gunnarx</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Upload_Release_All_Targets_generic">
      <stage name="copy">
        <jobs>
          <job name="copy_files">
            <tasks>
              <fetchartifact pipeline="Release-dragonboard-410c" stage="build" job="init_and_bitbake" srcdir="staging" dest="staging_dragonboard">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Release-minnowboard-SDL" stage="build" job="init_and_bitbake" srcdir="staging" dest="staging_minnowboard">
                <runif status="any" />
              </fetchartifact>
              <fetchartifact pipeline="Release-qemux86-64" stage="build" job="init_and_bitbake" srcdir="staging" dest="staging_qemux86-64">
                <runif status="any" />
              </fetchartifact>
              <fetchartifact pipeline="Release-raspberrypi-2" stage="build" job="init_and_bitbake" srcdir="staging" dest="staging_raspberrypi2">
                <runif status="any" />
              </fetchartifact>
              <fetchartifact pipeline="Release-raspberrypi-3" stage="build" job="init_and_bitbake" srcdir="staging" dest="staging_raspberrypi3">
                <runif status="any" />
              </fetchartifact>
              <exec command="bash">
                <arg>-c</arg>
                <arg>date +%Y%m%d_%H%M%S &gt;timestamp</arg>
                <runif status="any" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mkdir -p $DEPLOY_DIR/{minnowboard,dragonboard,raspberrypi2,raspberrypi3,qemux86-64,r-car-m3-starter-kit,minnowboard-chromium}/$(cat timestamp)</arg>
                <runif status="any" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mv staging_minnowboard $DEPLOY_DIR/minnowboard/$(cat timestamp)/  || true</arg>
                <runif status="any" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mv staging_dragonboard $DEPLOY_DIR/dragonboard/$(cat timestamp)/  || true</arg>
                <runif status="any" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mv staging_qemux86-64 $DEPLOY_DIR/qemux86-64/$(cat timestamp)/  || true</arg>
                <runif status="any" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mv staging_raspberrypi2 $DEPLOY_DIR/raspberrypi2/$(cat timestamp)/  || true</arg>
                <runif status="any" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mv staging_raspberrypi3 $DEPLOY_DIR/raspberrypi3/$(cat timestamp)/  || true</arg>
                <runif status="any" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mv staging_r-car-m3-starter-kit $DEPLOY_DIR/r-car-m3-starter-kit/$(cat timestamp)/ || true</arg>
                <runif status="any" />
              </exec>
            </tasks>
            <resources>
              <resource>#{SERVER_RESOURCE}</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </templates>
  <agents>
    <agent hostname="ics-agent1 (ICS)" ipaddress="172.17.0.13" uuid="0d027f89-6a5b-4d2f-803d-394f4c5690ae" isDisabled="true">
      <resources>
        <resource>ics-agent1</resource>
        <resource>yocto_build</resource>
      </resources>
    </agent>
    <agent hostname="c8776aa52222 (gunnarx)" ipaddress="172.17.0.1" uuid="cfad499e-6530-4e20-9013-ac7f484f5523">
      <resources>
        <resource>renesas_binaries</resource>
        <resource>c8776aa52222</resource>
        <resource>Qt-seeder</resource>
        <resource>yocto_build</resource>
        <resource>cmake</resource>
        <resource>ga_test</resource>
      </resources>
    </agent>
    <agent hostname="go-agent1 (GENIVI)" ipaddress="172.17.0.2" uuid="1bb12ac4-c35f-4111-9eba-a2e709d5cf7b">
      <resources>
        <resource>yocto_build</resource>
        <resource>go-agent1</resource>
        <resource>renesas_binaries</resource>
        <resource>deploy_genivi</resource>
        <resource>cmake</resource>
      </resources>
    </agent>
    <agent hostname="go-agent2 (GENIVI)" ipaddress="172.17.0.2" uuid="198e29c2-fbfa-4e70-93c6-b9df35fa720b">
      <resources>
        <resource>yocto_build</resource>
        <resource>go-agent2</resource>
        <resource>renesas_binaries</resource>
        <resource>cmake</resource>
      </resources>
    </agent>
    <agent hostname="vbox-agent" ipaddress="10.1.2.56" uuid="b8dcc090-1141-431e-8318-4d03edb96858">
      <resources>
        <resource>vagrant</resource>
        <resource>imagemagick</resource>
        <resource>vbox-agent</resource>
        <resource>deploy_gunnarx</resource>
      </resources>
    </agent>
    <agent hostname="delta" ipaddress="172.17.0.2" uuid="4b262b48-0f33-442d-8063-6631302986c7">
      <resources>
        <resource>delta</resource>
        <resource>yocto_build</resource>
        <resource>cmake</resource>
      </resources>
    </agent>
    <agent hostname="elmer" ipaddress="172.17.0.2" uuid="184e27f3-7008-4110-85b3-c6d0eeb1e68b" isDisabled="true">
      <resources>
        <resource>yocto_build</resource>
        <resource>elmer</resource>
        <resource>cmake</resource>
      </resources>
    </agent>
    <agent hostname="pelagic-agent" ipaddress="172.17.0.2" uuid="f4bda6b1-3679-4bd9-8edb-e234953217f3">
      <resources>
        <resource>yocto_build</resource>
      </resources>
    </agent>
  </agents>
</cruise>

