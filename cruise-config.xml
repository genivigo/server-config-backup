<?xml version="1.0" encoding="utf-8"?>
<cruise xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="cruise-config.xsd" schemaVersion="81">
  <server artifactsdir="artifacts" siteUrl="http://go.genivi.org" secureSiteUrl="https://go.genivi.org" purgeStart="10.0" purgeUpto="20.0" commandRepositoryLocation="genivi" serverId="0634fc43-adff-426b-b417-781a09b9c51a">
    <security>
      <passwordFile path="/gousers/users" />
      <roles>
        <role name="Guest">
          <users>
            <user>user</user>
            <user>guest</user>
            <user>StephenL</user>
            <user>PedroA</user>
            <user>tpollard</user>
            <user>buildmonitor</user>
            <user>mhoyer</user>
            <user>gmacario</user>
            <user>marcor</user>
            <user>ChunsungJung</user>
            <user>tolkien</user>
            <user>helmuts</user>
            <user>amcgee7</user>
            <user>philippec</user>
            <user>jonathanmaw</user>
            <user>RudolfStreif</user>
            <user>ChrisSchulenberg</user>
            <user>JBocklage</user>
            <user>GunnarA</user>
            <user>RobertM</user>
            <user>EBoto</user>
            <user>AndreasR</user>
            <user>tmohammad</user>
          </users>
        </role>
        <role name="Developer">
          <users>
            <user>PedroA</user>
            <user>StephenL</user>
            <user>tpollard</user>
            <user>mhoyer</user>
            <user>gmacario</user>
            <user>marcor</user>
            <user>ChunsungJung</user>
            <user>tolkien</user>
            <user>helmuts</user>
            <user>amcgee7</user>
            <user>philippec</user>
            <user>jonathanmaw</user>
            <user>RudolfStreif</user>
            <user>ChrisSchulenberg</user>
            <user>JBocklage</user>
            <user>GunnarA</user>
            <user>RobertM</user>
            <user>EBoto</user>
            <user>buildmonitor</user>
            <user>AndreasR</user>
            <user>tmohammad</user>
          </users>
        </role>
        <role name="GDP_Developer">
          <users>
            <user>StephenL</user>
            <user>PedroA</user>
            <user>tpollard</user>
            <user>jonathanmaw</user>
            <user>GunnarA</user>
            <user>RobertM</user>
          </users>
        </role>
      </roles>
      <admins>
        <user>PedroA</user>
        <user>GunnarA</user>
      </admins>
    </security>
  </server>
  <scms>
    <scm id="30b07577-5ed3-4441-9558-3cf1595a678c" name="meta-genivi-dev">
      <pluginConfiguration id="github.pr" version="1" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://github.com/GENIVI/meta-genivi-dev.git</value>
        </property>
      </configuration>
    </scm>
    <scm id="a1a82896-a41b-4684-a7e8-4d43bf691438" name="genivi-dev-platform">
      <pluginConfiguration id="github.pr" version="1" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://github.com/GENIVI/genivi-dev-platform</value>
        </property>
      </configuration>
    </scm>
    <scm id="077cfe93-bc9e-461a-9a5c-e82796ccb710" name="FIDL_Files">
      <pluginConfiguration id="github.pr" version="1" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://github.com/rstreif/genivi_software_management.git</value>
        </property>
      </configuration>
    </scm>
    <scm id="55fece0c-628e-4ceb-abe8-64c792a6b1ea" name="meta-ivi">
      <pluginConfiguration id="github.pr" version="1" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://github.com/GENIVI/meta-ivi.git</value>
        </property>
        <property>
          <key>username</key>
          <value>dummy</value>
        </property>
      </configuration>
    </scm>
    <scm id="6970e0d3-fe3f-41a3-9fc2-6830e89757de" name="gunnarx-gdp">
      <pluginConfiguration id="github.pr" version="1" />
      <configuration>
        <property>
          <key>url</key>
          <value>git://github.com/gunnarx/genivi-dev-platform.git</value>
        </property>
      </configuration>
    </scm>
  </scms>
  <pipelines group="GENIVI_Baselines">
    <authorization>
      <view>
        <user>guest</user>
        <role>Guest</role>
      </view>
      <admins>
        <role>Developer</role>
      </admins>
    </authorization>
    <pipeline name="yocto-baseline-9" labeltemplate="9.0:${meta-ivi[:8]}-build:${COUNT}" isLocked="false" template="meta-ivi-build">
      <timer>0 50 22 18 8 ?</timer>
      <environmentvariables>
        <variable name="IMAGE_NAME">
          <value>kronos-image</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://git.yoctoproject.org/meta-ivi" branch="9.0" dest="meta-ivi" materialName="meta-ivi" />
        <git url="git://git.yoctoproject.org/poky" branch="fido" dest="poky" autoUpdate="false" materialName="poky_fido" />
        <git url="git://git.openembedded.org/meta-openembedded" branch="fido" dest="meta-openembedded" autoUpdate="false" materialName="meta-openembedded_fido" />
        <git url="https://github.com/gunnarx/baseline_ci_helper.git" dest="baseline_ci_helper" autoUpdate="false" materialName="baseline_ci_helper" />
      </materials>
    </pipeline>
    <pipeline name="yocto-baseline-10" labeltemplate="10.0:${meta-ivi[:8]}-build:${COUNT}" isLocked="false" template="meta-ivi-build">
      <environmentvariables>
        <variable name="IMAGE_NAME">
          <value>leviathan-image</value>
        </variable>
        <variable name="MACHINE">
          <value>qemux86-64</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="http://git.yoctoproject.org/git/meta-ivi" branch="10.0" dest="meta-ivi" materialName="meta-ivi" />
        <git url="http://git.yoctoproject.org/git/poky.git" branch="jethro" dest="poky" autoUpdate="false" materialName="poky_jethro" />
        <git url="git://git.openembedded.org/meta-openembedded" branch="jethro" dest="meta-openembedded" autoUpdate="false" materialName="meta-oe_jethro" />
        <git url="https://github.com/gunnarx/baseline_ci_helper.git" dest="baseline_ci_helper" autoUpdate="false" materialName="baseline_ci_helper" />
      </materials>
    </pipeline>
    <pipeline name="yocto-baseline-11" labeltemplate="meta-ivi:${meta-ivi[:8]}-build:${COUNT}" isLocked="false" template="meta-ivi-build">
      <timer>0 5 19 18 8 ?</timer>
      <environmentvariables>
        <variable name="MACHINE">
          <value>qemux86-64</value>
        </variable>
        <variable name="IMAGE_NAME">
          <value>miranda-image</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/genivi/meta-ivi.git" branch="11.0" dest="meta-ivi" materialName="meta-ivi" />
        <git url="git://git.openembedded.org/meta-openembedded" branch="krogoth" dest="meta-openembedded" autoUpdate="false" materialName="meta-openembedded_krogoth" />
        <git url="https://github.com/genivi/baseline_ci_helper.git" dest="baseline_ci_helper" autoUpdate="false" materialName="baseline_ci_helper" />
        <git url="http://git.yoctoproject.org/git/poky.git" branch="krogoth" dest="poky" autoUpdate="false" materialName="poky_krogoth" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="GENIVI_Development_Platform">
    <authorization>
      <view>
        <user>guest</user>
        <role>Guest</role>
      </view>
      <admins>
        <role>GDP_Developer</role>
      </admins>
    </authorization>
    <pipeline name="GDP-Yocto-Minnowboard" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic">
      <timer>0 0 20 18 8 ?</timer>
      <environmentvariables>
        <variable name="MACHINE">
          <value>minnowboard</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/GENIVI/genivi-dev-platform.git" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-QEMU_x86-64" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic">
      <timer>0 0 2 * * ?</timer>
      <environmentvariables>
        <variable name="MACHINE">
          <value>qemux86-64</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/GENIVI/genivi-dev-platform.git" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-RaspberryPi2" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic">
      <timer>0 30 03 * * ?</timer>
      <environmentvariables>
        <variable name="MACHINE">
          <value>raspberrypi2</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/GENIVI/genivi-dev-platform.git" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-Porter" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic">
      <timer onlyOnChanges="true">0 0 22 * * ?</timer>
      <environmentvariables>
        <variable name="MACHINE">
          <value>porter</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/GENIVI/genivi-dev-platform.git" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-Koelsch" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic">
      <timer>0 0 6 * * ?</timer>
      <environmentvariables>
        <variable name="MACHINE">
          <value>porter</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/GENIVI/genivi-dev-platform.git" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-Silk" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_generic">
      <timer onlyOnChanges="true">0 0 6 * * ?</timer>
      <environmentvariables>
        <variable name="MACHINE">
          <value>silk</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="http://github.com/GENIVI/genivi-dev-platform.git" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Baseline_Pull_Request_Checking">
    <authorization>
      <view>
        <user>guest</user>
        <role>Developer</role>
        <role>Guest</role>
      </view>
      <admins>
        <role>GDP_Developer</role>
      </admins>
    </authorization>
    <pipeline name="meta-ivi-Yocto-QEMU_x86-64-GITHUB-PR" labeltemplate="meta-ivi:${meta-ivi[:8]}-build:${COUNT}" isLocked="false" template="meta-ivi-build">
      <timer onlyOnChanges="true">0 0 3 * * ?</timer>
      <environmentvariables>
        <variable name="IMAGE_NAME">
          <value>miranda-image</value>
        </variable>
        <variable name="MACHINE">
          <value>qemux86-64</value>
        </variable>
      </environmentvariables>
      <materials>
        <scm ref="55fece0c-628e-4ceb-abe8-64c792a6b1ea" dest="meta-ivi" />
        <git url="http://git.yoctoproject.org/git/poky.git" branch="jethro" dest="poky" autoUpdate="false" materialName="poky_jethro" />
        <git url="git://git.openembedded.org/meta-openembedded" branch="jethro" dest="meta-openembedded" autoUpdate="false" materialName="meta-oe_jethro" />
        <git url="https://github.com/gunnarx/baseline_ci_helper.git" dest="baseline_ci_helper" autoUpdate="false" materialName="baseline_ci_helper" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="GDP_CI_Other">
    <authorization>
      <view>
        <user>guest</user>
        <role>Developer</role>
        <role>Guest</role>
        <role>GDP_Developer</role>
      </view>
      <operate>
        <role>GDP_Developer</role>
      </operate>
    </authorization>
    <pipeline name="GDP-Yocto-QEMU_x86-64-Latest-meta-genivi-dev" template="Yocto_GDP_generic_latest_meta_genivi_demo">
      <environmentvariables>
        <variable name="MACHINE">
          <value>qemux86-64</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/genivi/genivi-dev-platform" dest="gdp" materialName="genivi-dev-platform.git" />
        <git url="https://github.com/GENIVI/meta-genivi-dev" dest="meta-genivi-dev" materialName="meta-genivi-dev" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="GDP_Pull_Request_Checking">
    <authorization>
      <view>
        <role>Guest</role>
      </view>
      <admins>
        <role>GDP_Developer</role>
      </admins>
    </authorization>
    <pipeline name="GDP-Yocto-QEMU_x86-64-meta-genivi-dev-GITHUB-PR" isLocked="false" template="Yocto_GDP_generic_latest_meta_genivi_demo">
      <environmentvariables>
        <variable name="MACHINE">
          <value>qemux86-64</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/genivi/genivi-dev-platform.git" dest="gdp" materialName="genivi-dev-platform.git" />
        <scm ref="30b07577-5ed3-4441-9558-3cf1595a678c" dest="meta-genivi-dev" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-RPI2-meta-genivi-dev-GITHUB-PR" isLocked="false" template="Yocto_GDP_generic_latest_meta_genivi_demo">
      <timer>0 0 4 17 8 ?</timer>
      <environmentvariables>
        <variable name="MACHINE">
          <value>raspberrypi2</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/genivi/genivi-dev-platform.git" dest="gdp" materialName="genivi-dev-platform.git" />
        <scm ref="30b07577-5ed3-4441-9558-3cf1595a678c" dest="meta-genivi-dev" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-MINNOWBOARD-meta-genivi-dev-GITHUB-PR" isLocked="false" template="Yocto_GDP_generic_latest_meta_genivi_demo">
      <timer>0 2 1 17 8 ?</timer>
      <environmentvariables>
        <variable name="MACHINE">
          <value>minnowboard</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/genivi/genivi-dev-platform.git" dest="gdp" materialName="genivi-dev-platform.git" />
        <scm ref="30b07577-5ed3-4441-9558-3cf1595a678c" dest="meta-genivi-dev" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-QEMU_x86-64-GITHUB-PR" isLocked="false" template="Yocto_GDP_generic">
      <timer>0 0 3 19 8 ?</timer>
      <environmentvariables>
        <variable name="MACHINE">
          <value>qemux86-64</value>
        </variable>
      </environmentvariables>
      <materials>
        <scm ref="a1a82896-a41b-4684-a7e8-4d43bf691438" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-RPI2-GITHUB-PR" isLocked="false" template="Yocto_GDP_generic">
      <timer>0 0 8 17 8 ?</timer>
      <environmentvariables>
        <variable name="MACHINE">
          <value>raspberrypi2</value>
        </variable>
      </environmentvariables>
      <materials>
        <scm ref="a1a82896-a41b-4684-a7e8-4d43bf691438" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-MINNOWBOARD-GITHUB-PR" template="Yocto_GDP_generic">
      <environmentvariables>
        <variable name="MACHINE">
          <value>minnowboard</value>
        </variable>
      </environmentvariables>
      <materials>
        <scm ref="a1a82896-a41b-4684-a7e8-4d43bf691438" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-PORTER-meta-genivi-dev-GITHUB-PR" isLocked="false" template="Yocto_GDP_generic_latest_meta_genivi_demo">
      <timer>0 0 23 16 8 ?</timer>
      <environmentvariables>
        <variable name="MACHINE">
          <value>porter</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/genivi/genivi-dev-platform.git" dest="gdp" materialName="genivi-dev-platform.git" />
        <scm ref="30b07577-5ed3-4441-9558-3cf1595a678c" dest="meta-genivi-dev" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-PORTER-GITHUB-PR" isLocked="false" template="Yocto_GDP_generic">
      <params>
        <param name="agent">2131ce1bd33e</param>
      </params>
      <timer>0 0 4 19 8 ?</timer>
      <environmentvariables>
        <variable name="MACHINE">
          <value>porter</value>
        </variable>
      </environmentvariables>
      <materials>
        <scm ref="a1a82896-a41b-4684-a7e8-4d43bf691438" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="GDP_Developer_Environment">
    <authorization>
      <view>
        <user>AndreasR</user>
        <user>EBoto</user>
      </view>
      <admins>
        <role>GDP_Developer</role>
      </admins>
    </authorization>
    <pipeline name="GDP-SDE-raspberrypi2" isLocked="false" template="GDP_SDE_generic">
      <params>
        <param name="MACHINE">raspberrypi2</param>
      </params>
      <timer>0 0 4 16 9 ?</timer>
      <environmentvariables>
        <variable name="VMNAME">
          <value>gdp-sdk-#{MACHINE}</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/gunnarx/gdp_sde" materialName="gdp_sde" />
        <pipeline pipelineName="Eclipse-for-SDK-2" stageName="stage" materialName="eclipse" />
        <pipeline pipelineName="Seed-QtLibs-and-creator" stageName="stage" materialName="Qt" />
        <pipeline pipelineName="DLT-Viewer" stageName="stage" materialName="dlt-viewer" />
        <pipeline pipelineName="common-api-cpp-tools" stageName="build" materialName="capicxx-tools" />
        <pipeline pipelineName="common-api-cpp-dbus-tools" stageName="build" materialName="capicxx-dbus-tools" />
        <pipeline pipelineName="common-api-cpp-someip-tools" stageName="build" materialName="capicxx-someip-tools" />
        <pipeline pipelineName="GDP-Yocto-raspberrypi2_SDK" stageName="build" materialName="yocto-sdk-raspberrypi2" />
      </materials>
    </pipeline>
    <pipeline name="GDP-SDE-minnowboard" isLocked="false" template="GDP_SDE_generic">
      <params>
        <param name="MACHINE">minnowboard</param>
      </params>
      <timer>0 0 4 16 9 ?</timer>
      <materials>
        <git url="git://github.com/gunnarx/gdp_sde" materialName="gdp_sde" />
        <pipeline pipelineName="Eclipse-for-SDK-2" stageName="stage" materialName="eclipse" />
        <pipeline pipelineName="Seed-QtLibs-and-creator" stageName="stage" materialName="Qt" />
        <pipeline pipelineName="DLT-Viewer" stageName="stage" materialName="dlt-viewer" />
        <pipeline pipelineName="common-api-cpp-tools" stageName="build" materialName="capicxx-tools" />
        <pipeline pipelineName="common-api-cpp-dbus-tools" stageName="build" materialName="capicxx-dbus-tools" />
        <pipeline pipelineName="common-api-cpp-someip-tools" stageName="build" materialName="capicxx-someip-tools" />
        <pipeline pipelineName="GDP-Yocto-Minnowboard_SDK" stageName="build" materialName="yocto-sdk-minnowboard" />
      </materials>
    </pipeline>
    <pipeline name="GDP-SDE-porter" isLocked="false" template="GDP_SDE_generic">
      <params>
        <param name="MACHINE">porter</param>
      </params>
      <timer>0 0 3 18 9 ?</timer>
      <materials>
        <git url="git://github.com/gunnarx/gdp_sde" materialName="gdp_sde" />
        <pipeline pipelineName="Eclipse-for-SDK-2" stageName="stage" materialName="eclipse" />
        <pipeline pipelineName="Seed-QtLibs-and-creator" stageName="stage" materialName="Qt" />
        <pipeline pipelineName="DLT-Viewer" stageName="stage" materialName="dlt-viewer" />
        <pipeline pipelineName="common-api-cpp-tools" stageName="build" materialName="capicxx-tools" />
        <pipeline pipelineName="common-api-cpp-dbus-tools" stageName="build" materialName="capicxx-dbus-tools" />
        <pipeline pipelineName="common-api-cpp-someip-tools" stageName="build" materialName="capicxx-someip-tools" />
        <pipeline pipelineName="GDP-Yocto-porter_SDK" stageName="build" materialName="yocto-sdk-porter" />
      </materials>
    </pipeline>
    <pipeline name="GDP-SDE-qemux86-64" isLocked="false" template="GDP_SDE_generic">
      <params>
        <param name="MACHINE">qemux86-64</param>
      </params>
      <timer>0 0 1 18 9 ?</timer>
      <materials>
        <git url="git://github.com/gunnarx/gdp_sde" materialName="gdp_sde" />
        <pipeline pipelineName="Eclipse-for-SDK-2" stageName="stage" materialName="eclipse" />
        <pipeline pipelineName="Seed-QtLibs-and-creator" stageName="stage" materialName="Qt" />
        <pipeline pipelineName="DLT-Viewer" stageName="stage" materialName="dlt-viewer" />
        <pipeline pipelineName="common-api-cpp-tools" stageName="build" materialName="capicxx-tools" />
        <pipeline pipelineName="common-api-cpp-dbus-tools" stageName="build" materialName="capicxx-dbus-tools" />
        <pipeline pipelineName="common-api-cpp-someip-tools" stageName="build" materialName="capicxx-someip-tools" />
        <pipeline pipelineName="GDP-Yocto-qemux86-64_SDK" stageName="build" materialName="yocto-sdk-qemux86-64" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-raspberrypi2_SDK" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_build_SDK">
      <params>
        <param name="branch">master</param>
      </params>
      <environmentvariables>
        <variable name="MACHINE">
          <value>raspberrypi2</value>
        </variable>
        <variable name="BUILD_SDK">
          <value>true</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="http://github.com/GENIVI/genivi-dev-platform.git" branch="#{branch}" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-Minnowboard_SDK" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_build_SDK">
      <environmentvariables>
        <variable name="MACHINE">
          <value>minnowboard</value>
        </variable>
        <variable name="BUILD_SDK">
          <value>true</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="http://github.com/GENIVI/genivi-dev-platform.git" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-qemux86-64_SDK" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false" template="Yocto_GDP_build_SDK">
      <timer onlyOnChanges="true">0 59 23 15 9 ?</timer>
      <environmentvariables>
        <variable name="MACHINE">
          <value>qemux86-64</value>
        </variable>
        <variable name="BUILD_SDK">
          <value>true</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="http://github.com/GENIVI/genivi-dev-platform.git" materialName="genivi-dev-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-porter_SDK" labeltemplate="gdp-git:${genivi-dev-platform.git[:8]}-build:${COUNT}" isLocked="false">
      <timer onlyOnChanges="true">0 59 23 15 9 ?</timer>
      <environmentvariables>
        <variable name="MACHINE">
          <value>porter</value>
        </variable>
        <variable name="BUILD_SDK">
          <value>true</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="http://github.com/GENIVI/genivi-dev-platform.git" materialName="genivi-dev-platform.git" />
      </materials>
      <stage name="build">
        <approval type="manual" />
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="rm" workingdir="gdp-src-build">
                <arg>-rf</arg>
                <arg>tmp</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source ./init.sh $MACHINE</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "porter" || "$MACHINE" == silk ]]; then cd meta-renesas/meta-rcar-gen2 &amp;&amp; ./copy_gfx_software_$MACHINE.sh /var/go/sgx_bin; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "porter" || "$MACHINE" == silk ]];  then cd meta-renesas/meta-rcar-gen2 &amp;&amp; ./copy_mm_software_lcb.sh /var/go/sgx_bin/; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.name</arg>
                <arg>Go Server</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.email</arg>
                <arg>no_email@genivigo.com</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp-src-build/conf">
                <arg>-c</arg>
                <arg>echo -e 'BB_NUMBER_THREADS = "2"\nPARALLEL_MAKE = "-j2"\nINHERIT += "rm_work"' &gt;&gt; local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp-src-build/conf">
                <arg>-c</arg>
                <arg>/bin/echo -e 'DL_DIR = "/var/cache/yocto/downloads"\nSSTATE_DIR = "/var/cache/yocto/sstate"' &gt;&gt;local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$BUILD_SDK" != "true" ]] ; then source poky/oe-init-build-env gdp-src-build &amp;&amp; bitbake genivi-dev-platform ; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$BUILD_SDK" == "true" ]] ; then source poky/oe-init-build-env gdp-src-build &amp;&amp; bitbake genivi-dev-platform-sdk ; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$BUILD_SDK" == "true" ]] ; then source poky/oe-init-build-env gdp-src-build &amp;&amp; bitbake meta-ide-support ; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -f logs.tar logs.tar.gz &amp;&amp; find gdp-src-build/tmp/work \( -name "*.log" -o -name "log.*" -o -name "run.*" \) -print0 | xargs -0 tar uf logs.tar &amp;&amp; gzip logs.tar</arg>
                <runif status="any" />
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
              <resource>renesas_binaries</resource>
            </resources>
            <artifacts>
              <artifact src="gdp-src-build/tmp/deploy/licenses" dest="results" />
              <artifact src="gdp-src-build/tmp/deploy/licenses/genivi-dev-platform*/license.manifest" dest="results" />
              <artifact src="gdp-src-build/tmp/deploy/licenses/genivi-dev-platform*/package.manifest" dest="results" />
              <artifact src="gdp-src-build/tmp/deploy/sdk*" dest="results" />
              <artifact src="logs.tar.gz" dest="results" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Eclipse-for-SDK-2">
      <params>
        <param name="BRANCH">cpp_common_api_with_yocto_tools</param>
      </params>
      <environmentvariables>
        <variable name="CACHE_DIR">
          <value>/var/cache/eia</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/genivi/eclipse_install_automation" branch="#{BRANCH}" materialName="eclipse_install_automation" />
      </materials>
      <stage name="stage">
        <jobs>
          <job name="job">
            <environmentvariables>
              <variable name="ECLIPSE_INSTALL_DIR">
                <value>autoeclipse</value>
              </variable>
              <variable name="ECLIPSE_WORKSPACE_DIR">
                <value>workspace</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="rm">
                <arg>-rf</arg>
                <arg>"./$ECLIPSE_INSTALL_DIR"</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>artifacts</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>./script.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>tar cfz artifacts/eclipse.tar.gz "./$ECLIPSE_INSTALL_DIR/eclipse"</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>tar cfz artifacts/eclipse-workspace.tar.gz "./$ECLIPSE_WORKSPACE_DIR"</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>maven</resource>
            </resources>
            <artifacts>
              <artifact src="artifacts/" dest="tarballs/" />
              <artifact src="autoeclipse/eclipse" dest="results/" />
              <artifact src="workspace" dest="results/" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="Components">
    <authorization>
      <view>
        <role>Developer</role>
        <role>Guest</role>
      </view>
      <operate>
        <role>Developer</role>
      </operate>
      <admins>
        <role>Developer</role>
      </admins>
    </authorization>
    <pipeline name="DLT-daemon-native" isLocked="false">
      <materials>
        <git url="git://git.projects.genivi.org/dlt-daemon.git" materialName="dlt-daemon.git" />
      </materials>
      <stage name="build">
        <jobs>
          <job name="cmake_and_make">
            <tasks>
              <exec command="rm">
                <arg>-rf</arg>
                <arg>build</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>build</arg>
                <runif status="passed" />
              </exec>
              <exec command="cmake" workingdir="build">
                <arg>..</arg>
                <runif status="passed" />
              </exec>
              <exec command="make" workingdir="build">
                <arg>V=1</arg>
                <arg>-j3</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>cmake</resource>
            </resources>
            <artifacts>
              <artifact src="build/src/lib" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="common-api-cpp-runtime" labeltemplate="master:${common-api-runtime.git[:8]}-build:${COUNT}" isLocked="false" template="CMAKE_build">
      <materials>
        <git url="git://git.projects.genivi.org/ipc/common-api-runtime.git" materialName="common-api-runtime.git" />
      </materials>
    </pipeline>
    <pipeline name="common-api-cpp-dbus-runtime" labeltemplate="master:${common-api-dbus-runtime.git[:8]}-build:${COUNT}" isLocked="false">
      <materials>
        <git url="git://git.projects.genivi.org/ipc/common-api-dbus-runtime.git" materialName="common-api-dbus-runtime.git" />
        <pipeline pipelineName="common-api-cpp-runtime" stageName="build" materialName="build" />
        <pipeline pipelineName="libdbus-with-commonapi-patch" stageName="patch_and_build" materialName="libdbus-with-commonapi-patch" />
      </materials>
      <stage name="build">
        <jobs>
          <job name="build">
            <environmentvariables>
              <variable name="CommonAPI_DIR">
                <value>../common-api-cpp-runtime-build/build</value>
              </variable>
              <variable name="PKG_CONFIG_PATH">
                <value>/var/lib/go-agent/pipelines/common-api-cpp-dbus-runtime/libdbus_patched/results/lib/pkgconfig</value>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact pipeline="libdbus-with-commonapi-patch" stage="patch_and_build" job="patch_and_build" srcdir="results" dest="libdbus_patched">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="common-api-cpp-runtime" stage="build" job="cmake_and_make" srcdir="build" dest="common-api-cpp-runtime-build">
                <runif status="passed" />
              </fetchartifact>
              <exec command="rm">
                <arg>-rf</arg>
                <arg>build</arg>
              </exec>
              <exec command="mkdir">
                <arg>build</arg>
                <runif status="passed" />
              </exec>
              <exec command="cmake" workingdir="build">
                <arg>-D</arg>
                <arg>USE_INSTALLED_COMMONAPI=ON</arg>
                <arg>..</arg>
                <runif status="passed" />
              </exec>
              <exec command="make" workingdir="build">
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>cmake</resource>
            </resources>
            <artifacts>
              <artifact src="build/*.so*" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="libdbus-with-commonapi-patch" labeltemplate="master:${dbus.git[:8]}-build:${COUNT}" isLocked="false">
      <materials>
        <git url="http://anongit.freedesktop.org/git/dbus/dbus.git" dest="dbus" materialName="dbus.git" />
        <git url="git://git.projects.genivi.org/ipc/common-api-dbus-runtime.git" dest="common-api-dbus-runtime" materialName="common-api-dbus-runtime.git" />
      </materials>
      <stage name="patch_and_build">
        <jobs>
          <job name="patch_and_build">
            <tasks>
              <exec command="git" workingdir="dbus">
                <arg>checkout</arg>
                <arg>dbus-1.9.0</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="dbus">
                <arg>-c</arg>
                <arg>for f in ../common-api-dbus-runtime/src/dbus-patches/*.patch ; do patch -p1 &lt;"$f" || exit 1 ; done</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>results</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="dbus">
                <arg>autogen.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="dbus">
                <arg>-c</arg>
                <arg>./configure --prefix $PWD/../results</arg>
                <runif status="passed" />
              </exec>
              <exec command="make" workingdir="dbus">
                <arg>-j4</arg>
                <arg>-C</arg>
                <arg>dbus</arg>
                <runif status="passed" />
              </exec>
              <exec command="make" workingdir="dbus">
                <arg>install</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>libtool</resource>
            </resources>
            <artifacts>
              <artifact src="results" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="vSomeIP" template="CMAKE_build">
      <materials>
        <git url="git://git.projects.genivi.org/vSomeIP.git" />
      </materials>
    </pipeline>
    <pipeline name="Seed-QtLibs-and-creator">
      <params>
        <param name="MD5">15794bab9cc9db0f669e0af762f5cd2d</param>
        <param name="QT_LIBS_AND_CREATOR_FILE">Qt-5.6-gcc64-qtcreator-installed-home-vagrant.tar.bz2</param>
        <param name="SOURCE_DIR">/var/go</param>
      </params>
      <materials>
        <git url="git://github.com/genivi/baseline_ci_helper" autoUpdate="false" materialName="dummy-not-used" />
      </materials>
      <stage name="stage">
        <jobs>
          <job name="job">
            <tasks>
              <exec command="cp">
                <arg>#{SOURCE_DIR}/#{QT_LIBS_AND_CREATOR_FILE}</arg>
                <arg>.</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>[ "$(md5sum ./#{QT_LIBS_AND_CREATOR_FILE} | cut -c 1-32)" = "#{MD5}" ] &amp;&amp; echo "MD5 OK"</arg>
                <runif status="any" />
              </exec>
            </tasks>
            <resources>
              <resource>2131ce1bd33e</resource>
            </resources>
            <artifacts>
              <artifact src="#{QT_LIBS_AND_CREATOR_FILE}" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="Tools">
    <authorization>
      <view>
        <role>Guest</role>
        <role>Developer</role>
      </view>
      <operate>
        <role>Developer</role>
      </operate>
      <admins>
        <role>Developer</role>
      </admins>
    </authorization>
    <pipeline name="common-api-cpp-dbus-tools" labeltemplate="master:${common-api-dbus-tools.git[:8]}-build:${COUNT}" isLocked="false">
      <materials>
        <git url="git://git.projects.genivi.org/ipc/common-api-dbus-tools.git" dest="common-api-dbus-tools" materialName="common-api-dbus-tools.git" />
        <git url="git://git.projects.genivi.org/ipc/common-api-tools.git" dest="common-api-tools" materialName="common-api-tools.git" />
      </materials>
      <stage name="build" artifactCleanupProhibited="true">
        <jobs>
          <job name="build">
            <tasks>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>bin</arg>
                <runif status="passed" />
              </exec>
              <exec command="mvn" workingdir="common-api-tools/org.genivi.commonapi.core.releng">
                <arg>-Dtarget.id=org.genivi.commonapi.core.target</arg>
                <arg>clean</arg>
                <arg>verify</arg>
                <runif status="passed" />
              </exec>
              <exec command="mvn" workingdir="common-api-dbus-tools/org.genivi.commonapi.dbus.releng">
                <arg>-DCOREPATH=../../common-api-tools</arg>
                <arg>-Dtarget.id=org.genivi.commonapi.dbus.target</arg>
                <arg>clean</arg>
                <arg>verify</arg>
                <runif status="passed" />
              </exec>
              <exec command="unzip" workingdir="bin">
                <arg>../common-api-dbus-tools/org.genivi.commonapi.dbus.cli.product/target/products/commonapi_dbus_generator.zip</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>maven</resource>
            </resources>
            <artifacts>
              <artifact src="bin" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="common-api-cpp-tools" labeltemplate="master:${common-api-tools.git[:8]}-build:${COUNT}" isLocked="false">
      <materials>
        <git url="git://git.projects.genivi.org/ipc/common-api-tools.git" materialName="common-api-tools.git" />
      </materials>
      <stage name="build" artifactCleanupProhibited="true">
        <jobs>
          <job name="build">
            <tasks>
              <exec command="mvn" workingdir="org.genivi.commonapi.core.releng">
                <arg>-Dtarget.id=org.genivi.commonapi.core.target</arg>
                <arg>clean</arg>
                <arg>verify</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir">
                <arg>bin</arg>
                <runif status="passed" />
              </exec>
              <exec command="unzip" workingdir="bin">
                <arg>../org.genivi.commonapi.core.cli.product/target/products/commonapi-generator.zip</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>maven</resource>
            </resources>
            <artifacts>
              <artifact src="bin" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="common-api-cpp-someip-tools" labeltemplate="master:${cpp-someip-tools.git[:8]}-build:${COUNT}" isLocked="false">
      <materials>
        <git url="git://git.projects.genivi.org/common-api/cpp-someip-tools.git" dest="cpp-someip-tools" materialName="cpp-someip-tools.git" />
        <git url="git://git.projects.genivi.org/ipc/common-api-tools.git" dest="common-api-tools" materialName="common-api-tools.git" />
      </materials>
      <stage name="build" artifactCleanupProhibited="true">
        <jobs>
          <job name="build">
            <tasks>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>bin</arg>
                <runif status="passed" />
              </exec>
              <exec command="mvn" workingdir="common-api-tools/org.genivi.commonapi.core.releng">
                <arg>-Dtarget.id=org.genivi.commonapi.core.target</arg>
                <arg>clean</arg>
                <arg>verify</arg>
                <runif status="passed" />
              </exec>
              <exec command="mvn" workingdir="cpp-someip-tools/org.genivi.commonapi.someip.releng">
                <arg>-DCOREPATH=../../common-api-tools</arg>
                <arg>-Dtarget.id=org.genivi.commonapi.someip.target</arg>
                <arg>clean</arg>
                <arg>verify</arg>
                <runif status="passed" />
              </exec>
              <exec command="unzip" workingdir="bin">
                <arg>../cpp-someip-tools/org.genivi.commonapi.someip.cli.product/target/products/commonapi_someip_generator.zip</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>maven</resource>
            </resources>
            <artifacts>
              <artifact src="bin" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="DLT-Viewer" labeltemplate="master:${dlt-viewer.git[:8]}-build:${COUNT}" isLocked="false">
      <params>
        <param name="QT_LIBS_ARCHIVE">Qt-5.6-gcc64-qtcreator-installed-home-vagrant.tar.bz2</param>
        <param name="CACHE_DIR">/var/cache/goartifacts</param>
        <param name="SOURCE_WEB_URL">http://git.projects.genivi.org/?p=dlt-viewer.git;a=summary</param>
        <param name="SOURCE_CLONE_URL">git://git.projects.genivi.org/dlt-viewer.git</param>
      </params>
      <materials>
        <git url="git://git.projects.genivi.org/dlt-viewer.git" materialName="dlt-viewer.git" />
        <pipeline pipelineName="Seed-QtLibs-and-creator" stageName="stage" materialName="qtlibs" />
      </materials>
      <stage name="stage">
        <jobs>
          <job name="job">
            <tasks>
              <fetchartifact pipeline="Seed-QtLibs-and-creator" stage="stage" job="job" srcfile="#{QT_LIBS_ARCHIVE}">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash">
                <arg>-c</arg>
                <arg>tar xf #{QT_LIBS_ARCHIVE}</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>ln -s Qt-5.6 Qt</arg>
                <runif status="passed" />
              </exec>
              <exec command="rm">
                <arg>-rf</arg>
                <arg>build</arg>
                <runif status="any" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>build</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="build">
                <arg>-c</arg>
                <arg>../Qt/5.6/gcc_64/bin/qmake ../BuildDltViewer.pro</arg>
                <runif status="passed" />
              </exec>
              <exec command="make" workingdir="build">
                <arg>-j8</arg>
                <runif status="passed" />
              </exec>
              <exec command="mv" workingdir="build">
                <arg>release</arg>
                <arg>dlt-viewer</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="build/dlt-viewer">
                <arg>-c</arg>
                <arg>echo -e "The source code for this program is available for download at:\n\n#{SOURCE_WEB_URL}\n(Git clone URL: #{SOURCE_CLONE_URL})\n\n(MPLv2 clause 3.2 (a))" &gt;SOURCE.txt</arg>
                <runif status="passed" />
              </exec>
              <exec command="cp">
                <arg>MPL.txt</arg>
                <arg>LICENSE.txt</arg>
                <arg>build/dlt-viewer/</arg>
                <runif status="passed" />
              </exec>
              <exec command="tar" workingdir="build">
                <arg>cjf</arg>
                <arg>dlt-viewer.tar.bz2</arg>
                <arg>dlt-viewer</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="build/dlt-viewer/*" dest="dlt-viewer" />
              <artifact src="build/dlt-viewer.tar.bz2" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="Experiments_and_Testing">
    <authorization>
      <view>
        <role>Guest</role>
      </view>
      <admins>
        <role>Developer</role>
      </admins>
    </authorization>
    <pipeline name="FRANCA_IF_Validation" labeltemplate="master:${common-api-tools.git[:8]}-build:${COUNT}" isLocked="false">
      <materials>
        <git url="git://git.projects.genivi.org/ipc/common-api-tools.git" dest="dest-common-api-tools" materialName="common-api-tools.git" />
        <scm ref="077cfe93-bc9e-461a-9a5c-e82796ccb710" dest="dest-fidl-files" />
      </materials>
      <stage name="BuildCommonAPI" cleanWorkingDir="true">
        <jobs>
          <job name="buildGenerators">
            <tasks>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>bin</arg>
                <runif status="passed" />
              </exec>
              <exec command="ls">
                <runif status="passed" />
              </exec>
              <exec command="mvn" workingdir="dest-common-api-tools/org.genivi.commonapi.core.releng">
                <arg>-Dtarget.id=org.genivi.commonapi.core.target</arg>
                <arg>clean</arg>
                <arg>verify</arg>
                <runif status="passed" />
              </exec>
              <exec command="unzip" workingdir="bin">
                <arg>../dest-common-api-tools/org.genivi.commonapi.core.cli.product/target/products/commonapi-generator.zip</arg>
                <runif status="passed" />
              </exec>
              <exec command="find">
                <arg>-iname</arg>
                <arg>*.zip</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>maven</resource>
            </resources>
            <artifacts>
              <artifact src="bin" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DoValidation" artifactCleanupProhibited="true">
        <jobs>
          <job name="Fetch_fidl_files">
            <tasks>
              <exec command="ls" workingdir="dest-fidl-files">
                <arg>./franca_idl</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="" stage="BuildCommonAPI" job="buildGenerators" srcdir="bin">
                <runif status="passed" />
              </fetchartifact>
              <exec command="ls">
                <arg>-al</arg>
                <runif status="passed" />
              </exec>
              <exec command="ls" workingdir="dest-common-api-tools/">
                <arg>-al</arg>
                <runif status="passed" />
              </exec>
              <exec command="ls" workingdir="bin">
                <arg>-al</arg>
                <runif status="passed" />
              </exec>
              <exec command="chmod">
                <arg>755</arg>
                <arg>bin/commonapi-generator-linux-x86</arg>
                <arg>bin/commonapi-generator-linux-x86_64</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>bin/commonapi-generator-linux-x86 -v</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>bin/commonapi-generator-linux-x86_64 -v</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>mount_exec</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="software-loading-manager" isLocked="false">
      <materials>
        <git url="https://github.com/GENIVI/genivi_swm" materialName="SW_Management_PoC_sources" />
      </materials>
      <stage name="commonApiGenerationStage">
        <jobs>
          <job name="commonApiGenerationJob">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>printenv &amp;&amp; true</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="compileCppStage">
        <jobs>
          <job name="compileCppJob">
            <tasks>
              <exec command="true" />
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="runSWLMPocStage">
        <jobs>
          <job name="runSWLMPocJob">
            <tasks>
              <exec command="sed">
                <arg>-i</arg>
                <arg>-e</arg>
                <arg>s/^SWM_SIMULATION\ \=.*$/SWM_SIMULATION = True/</arg>
                <arg>common/settings.py</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-xe</arg>
                <arg>-c</arg>
                <arg>ls -la &amp;&amp; ls -la common &amp;&amp; cat common/settings.py</arg>
                <runif status="passed" />
              </exec>
              <exec command="which">
                <arg>python</arg>
                <runif status="passed" />
              </exec>
              <exec command="printenv">
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-x</arg>
                <arg>start_swm.sh</arg>
                <arg>-r</arg>
                <runif status="any" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="systemd" labeltemplate="#{VERSION}_build_${COUNT}" isLocked="false">
      <params>
        <param name="VERSION">v219</param>
      </params>
      <timer onlyOnChanges="true">0 0 12 ? * SAT</timer>
      <environmentvariables>
        <variable name="VERSION">
          <value>v226</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="http://github.com/systemd/systemd" materialName="systemd" />
      </materials>
      <stage name="stage">
        <approval type="manual" />
        <jobs>
          <job name="configure_and_make">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>git checkout #{VERSION}</arg>
                <runif status="passed" />
              </exec>
              <exec command="./autogen.sh">
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>./configure CFLAGS='-g -O0 -ftrapv' --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib --with-rootprefix=/ --with-rootlibdir=/lib</arg>
                <runif status="passed" />
              </exec>
              <exec command="/usr/bin/make">
                <arg>-j6</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>systemd-build-deps</resource>
            </resources>
            <artifacts>
              <artifact src="configure" />
              <artifact src="config.log" />
              <artifact src=".libs/*" dest="libs" />
              <artifact src="src/systemd/*.h" dest="headers/systemd" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="SSDTEST" isLocked="false">
      <params>
        <param name="MACHINE">raspberrypi2</param>
      </params>
      <materials>
        <pipeline pipelineName="GDP-Yocto-raspberrypi2_SDK" stageName="build" materialName="rpi-sdk" />
        <pipeline pipelineName="Eclipse-for-SDK-2" stageName="stage" materialName="eclipse" />
        <git url="git://github.com/gunnarx/basic-vagrant" materialName="basic-vagrant" />
      </materials>
      <stage name="Assemble">
        <jobs>
          <job name="gdp-sdk">
            <environmentvariables>
              <variable name="SDK_INSTALLER_NAME">
                <value>oecore-x86_64-core2-64-toolchain-nodistro.0.sh</value>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact pipeline="GDP-Yocto-raspberrypi2_SDK" stage="build" job="init_and_bitbake" srcdir="results" dest="#{MACHINE}">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Eclipse-for-SDK-2" stage="stage" job="job" srcdir="results" dest="eclipse">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -rf /ssdcache/*</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mkdir /ssdcache/gdp-sdk</arg>
                <runif status="passed" />
              </exec>
              <exec command="mv">
                <arg>eclipse/results/eclipse</arg>
                <arg>/ssdcache/gdp-sdk/</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mv #{MACHINE}/results/genivi-dev-platform-*/license.manifest /ssdcache/gdp-sdk/license.manifest.#{MACHINE}</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>/ssdcache/gdp-sdk/yocto-sdk/{#{MACHINE}}</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>chmod 755 */results/sdk/oecore-*toolchain*.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>./#{MACHINE}/results/sdk/oecore-*toolchain*.sh -d /ssdcache/gdp-sdk/yocto-sdk/#{MACHINE}/ -y</arg>
                <runif status="passed" />
              </exec>
              <exec command="chmod">
                <arg>-R</arg>
                <arg>u+r</arg>
                <arg>/ssdcache/gdp-sdk/yocto-sdk</arg>
                <runif status="passed" />
              </exec>
              <exec command="tar">
                <arg>cfz</arg>
                <arg>gdp-sdk.tar.gz</arg>
                <arg>-C</arg>
                <arg>/ssdcache</arg>
                <arg>gdp-sdk</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>new_test</resource>
            </resources>
            <artifacts>
              <artifact src="gdp-sdk.tar.gz" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="AGL_meta_agl_demo_plus_homescreen" isLocked="false">
      <timer>0 0 0 19 8 ?</timer>
      <materials>
        <git url="https://gerrit.automotivelinux.org/gerrit/AGL/AGL-repo" />
      </materials>
      <stage name="StageBuildQEMU">
        <jobs>
          <job name="JobBuild">
            <tasks>
              <exec command="curl">
                <arg>-o</arg>
                <arg>repo</arg>
                <arg>https://storage.googleapis.com/git-repo-downloads/repo</arg>
                <runif status="passed" />
              </exec>
              <exec command="chmod">
                <arg>a+x</arg>
                <arg>repo</arg>
                <runif status="passed" />
              </exec>
              <exec command="./repo">
                <arg>init</arg>
                <arg>-u</arg>
                <arg>https://gerrit.automotivelinux.org/gerrit/AGL/AGL-repo</arg>
                <runif status="passed" />
              </exec>
              <exec command="./repo">
                <arg>sync</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>. meta-agl/scripts/envsetup.sh qemux86-64 &amp;&amp; bitbake agl-demo-platform</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="yocto-baseline-experimental" labeltemplate="experimental:${meta-ivi[:8]}-build:${COUNT}" isLocked="false">
      <environmentvariables>
        <variable name="MACHINE">
          <value>qemux86-64</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="http://git.yoctoproject.org/git/meta-ivi" branch="experimental" dest="meta-ivi" materialName="meta-ivi" />
        <git url="http://git.yoctoproject.org/git/poky.git" branch="krogoth" dest="poky" autoUpdate="false" materialName="poky_krogoth" />
        <git url="git://git.openembedded.org/meta-openembedded" branch="krogoth" dest="meta-openembedded" autoUpdate="false" materialName="meta-oe_krogoth" />
        <git url="https://github.com/gunnarx/baseline_ci_helper.git" dest="baseline_ci_helper" autoUpdate="false" materialName="baseline_ci_helper" />
      </materials>
      <stage name="setup">
        <jobs>
          <job name="git.config">
            <tasks>
              <exec command="git" workingdir="meta-ivi">
                <arg>config</arg>
                <arg>user.name</arg>
                <arg>Go Agent</arg>
                <runif status="passed" />
              </exec>
              <exec command="git" workingdir="meta-ivi">
                <arg>config</arg>
                <arg>user.email</arg>
                <arg>no_email@genivigo.com</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
            </resources>
          </job>
          <job name="make_build_directory">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>export TEMPLATECONF=$PWD/meta-ivi/meta-ivi/conf &amp;&amp; source poky/oe-init-build-env</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="workaround.1">
        <jobs>
          <job name="getting-kernel-src">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>export TEMPLATECONF=$PWD/meta-ivi/meta-ivi/conf &amp;&amp; source poky/oe-init-build-env &amp;&amp; MACHINE=$MACHINE bitbake -c fetch linux-yocto</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="build">
        <jobs>
          <job name="build-image">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>export TEMPLATECONF=$PWD/meta-ivi/meta-ivi/conf &amp;&amp; source poky/oe-init-build-env &amp;&amp; MACHINE=$MACHINE bitbake ivi-image</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -f logs.tar logs.tar.gz &amp;&amp; find build/tmp/work \( -name "*.log" -o -name "log.*" -o -name "run.*" \) -print0 | xargs -0 tar uf logs.tar &amp;&amp; gzip logs.tar</arg>
                <runif status="any" />
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="reuse_tmp" isLocked="false" template="Yocto_GDP_generic_reuse_tmp">
      <timer>0 0 4 19 8 ?</timer>
      <environmentvariables>
        <variable name="MACHINE">
          <value>qemux86-64</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/genivi/genivi-dev-platform" />
      </materials>
    </pipeline>
    <pipeline name="Franca-Eclipse-VM">
      <environmentvariables>
        <variable name="ECLIPSE_INSTALL_DIR">
          <value>eclipse</value>
        </variable>
        <variable name="ECLIPSE_WORKSPACE_DIR">
          <value>workspace</value>
        </variable>
        <variable name="CACHE_DIR">
          <value>/var/cache/eia</value>
        </variable>
        <variable name="HOSTNAME">
          <value>francalab</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/genivi/eclipse_install_automation" branch="trusty64-unity" materialName="eclipse_install_automation.git" />
      </materials>
      <stage name="create_eclipse_vm">
        <jobs>
          <job name="run_vagrant">
            <tasks>
              <exec command="vagrant">
                <arg>-v</arg>
                <runif status="passed" />
              </exec>
              <exec command="vagrant">
                <arg>destroy</arg>
                <arg>-f</arg>
                <runif status="passed" />
              </exec>
              <exec command="vagrant">
                <arg>box</arg>
                <arg>list</arg>
                <runif status="passed" />
              </exec>
              <exec command="vagrant">
                <arg>up</arg>
                <arg>--provision</arg>
                <runif status="passed" />
              </exec>
              <exec command="vagrant">
                <arg>halt</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>tar cvfz francalab-vm.tar.gz -C "/var/go/VirtualBox VMs" "$(cat VMNAME)"</arg>
                <runif status="any" />
              </exec>
              <exec command="vagrant">
                <arg>box</arg>
                <arg>list</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>echo SIZE: $(du -hs francalab-vm*.tar.gz) || true</arg>
                <runif status="passed" />
              </exec>
              <exec command="vagrant">
                <arg>destroy</arg>
                <arg>-f</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>vagrant</resource>
            </resources>
            <artifacts>
              <artifact src="francalab-vm.tar.gz" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="WIP--GENIVI_Positioning" isLocked="false">
      <timer onlyOnChanges="true">0 0 22 ? * MON-FRI</timer>
      <materials>
        <git url="git://git.projects.genivi.org/lbs/positioning.git" materialName="PositioningGitRepository" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -rf build &amp;&amp; mkdir -p build &amp;&amp; cd build &amp;&amp; cmake -DWITH_DBUS_INTERFACE=ON -DWITH_FRANCA_DBUS_INTERFACE=OFF -DWITH_FRANCA_SOMEIP_INTERFACE=OFF -DWITH_TESTS=ON -DWITH_DEBUG=ON -DWITH_DLT=OFF -DCMAKE_BUILD_TYPE=Debug ../</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>cd build &amp;&amp; make</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>cmake</resource>
              <resource>lbs</resource>
            </resources>
          </job>
          <job name="common-api-dbus_dlt_logreplayer">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -rf build &amp;&amp; mkdir -p build &amp;&amp; cd build &amp;&amp; cmake -DWITH_DBUS_INTERFACE=OFF -DWITH_FRANCA_DBUS_INTERFACE=ON -DWITH_FRANCA_SOMEIP_INTERFACE=OFF -DWITH_TESTS=ON -DWITH_DEBUG=ON -DWITH_DLT=ON -DCMAKE_BUILD_TYPE=Debug -DCOMMONAPI_TOOL_GENERATOR=/usr/local/bin/commonapi-generator-linux-x86_64 -DCOMMONAPI_DBUS_TOOL_GENERATOR=/usr/local/bin/commonapi-dbus-generator-linux-x86_64 ../</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>cd build &amp;&amp; make</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>cmake</resource>
              <resource>lbs</resource>
            </resources>
          </job>
          <job name="common-api-dbus_stdout_logreplayer">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -rf build &amp;&amp; mkdir -p build &amp;&amp; cd build &amp;&amp; cmake -DWITH_DBUS_INTERFACE=OFF -DWITH_FRANCA_DBUS_INTERFACE=ON -DWITH_FRANCA_SOMEIP_INTERFACE=OFF -DWITH_TESTS=ON -DWITH_DEBUG=ON -DWITH_DLT=OFF -DCMAKE_BUILD_TYPE=Debug -DCOMMONAPI_TOOL_GENERATOR=/usr/local/bin/commonapi-generator-linux-x86_64 -DCOMMONAPI_DBUS_TOOL_GENERATOR=/usr/local/bin/commonapi-dbus-generator-linux-x86_64 ../</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>cd build &amp;&amp; make</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>cmake</resource>
              <resource>lbs</resource>
            </resources>
          </job>
          <job name="gnssservice_stdout_gpsd">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -rf build &amp;&amp; mkdir -p build &amp;&amp; cd build &amp;&amp; cmake WITH_ENHANCED_POSITION_SERVICE=OFF WITH_SENSORS_SERVICE=OFF  -DWITH_TESTS=ON -DWITH_DEBUG=ON -DWITH_DLT=OFF -DCMAKE_BUILD_TYPE=Debug -DWITH_REPLAYER=OFF -DWITH_GPSD=ON ../</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>cd build &amp;&amp; make</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>cmake</resource>
              <resource>lbs</resource>
            </resources>
          </job>
          <job name="sensorsservice_gnssservice_nmea_logger_stdout">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -rf build &amp;&amp; mkdir -p build &amp;&amp; cd build &amp;&amp; cmake -DWITH_ENHANCED_POSITION_SERVICE=OFF -DWITH_NMEA=ON -DWITH_SENSORS=ON -DIMU_TYPE=LSM9DS1 -DWITH_LOGGER=ON -DWITH_TESTS=ON -DWITH_DEBUG=ON -DGNSS_DEVICE=\"/dev/ttyACM0\" -DGNSS_BAUDRATE=B38400 -DGNSS_CHIPSET=UBLOX -DGNSS_DELAY=50 ../</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>cd build &amp;&amp; make</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>cmake</resource>
              <resource>lbs</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="WIP--common-api-c" labeltemplate="capic-poc:${capic-poc.git[:8]}-build:${COUNT}" isLocked="false">
      <materials>
        <git url="git://github.com/GENIVI/capic-poc.git" materialName="capic-poc.git" />
        <pipeline pipelineName="systemd" stageName="stage" materialName="systemd" />
      </materials>
      <stage name="buildStage">
        <jobs>
          <job name="buildJob">
            <tasks>
              <fetchartifact pipeline="systemd" stage="stage" job="configure_and_make" srcdir="libs" dest="systemd">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="systemd" stage="stage" job="configure_and_make" srcdir="headers" dest="systemd">
                <runif status="passed" />
              </fetchartifact>
              <exec command="autoreconf">
                <arg>-i</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>export LIBSYSTEMD_CFLAGS="-I$PWD/systemd/headers" LIBSYSTEMD_LIBS="-L$PWD/systemd/libs" &amp;&amp; ./configure LDFLAGS="-L$PWD/systemd/libs"</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>make</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>2131ce1bd33e</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Release-QEMU_x86-64" isLocked="false" template="Yocto_GDP_generic_release">
      <environmentvariables>
        <variable name="MACHINE">
          <value>qemux86-64</value>
        </variable>
        <variable name="BRANCH">
          <value>gdp-11</value>
        </variable>
        <variable name="RELEASE">
          <value>gdp-11</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/GENIVI/genivi-dev-platform" autoUpdate="false" />
      </materials>
    </pipeline>
    <pipeline name="Release-Minnowboard" isLocked="false" template="Yocto_GDP_generic_release">
      <environmentvariables>
        <variable name="MACHINE">
          <value>minnowboard</value>
        </variable>
        <variable name="BRANCH">
          <value>gdp-11</value>
        </variable>
        <variable name="RELEASE">
          <value>gdp-11</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/GENIVI/genivi-dev-platform" autoUpdate="false" />
      </materials>
    </pipeline>
    <pipeline name="Release-RaspberryPi2" isLocked="false" template="Yocto_GDP_generic_release">
      <environmentvariables>
        <variable name="MACHINE">
          <value>raspberrypi2</value>
        </variable>
        <variable name="BRANCH">
          <value>gdp-11</value>
        </variable>
        <variable name="RELEASE">
          <value>gdp-11</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/GENIVI/genivi-dev-platform" autoUpdate="false" />
      </materials>
    </pipeline>
    <pipeline name="Release-RaspberryPi3" isLocked="false" template="Yocto_GDP_generic_release">
      <environmentvariables>
        <variable name="MACHINE">
          <value>raspberrypi3</value>
        </variable>
        <variable name="BRANCH">
          <value>gdp-11</value>
        </variable>
        <variable name="RELEASE">
          <value>gdp-11</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/GENIVI/genivi-dev-platform" autoUpdate="false" />
      </materials>
    </pipeline>
    <pipeline name="Release-Dragonboard" isLocked="false" template="Yocto_GDP_generic_release">
      <environmentvariables>
        <variable name="MACHINE">
          <value>dragonboard-410c</value>
        </variable>
        <variable name="BRANCH">
          <value>gdp-11</value>
        </variable>
        <variable name="RELEASE">
          <value>gdp-11</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/GENIVI/genivi-dev-platform" autoUpdate="false" />
      </materials>
    </pipeline>
    <pipeline name="Qt-Creator">
      <params>
        <param name="MAINVERSION">5.6</param>
        <param name="ARCHIVE">tar.xz</param>
        <param name="MD5">f44fd4fcae71087f90d9c68e9d8be449</param>
        <param name="MIRROR">http://qtmirror.ics.com/pub/qtproject/archive/qt/5.6/5.6.1-1/single/</param>
        <param name="VERSION">5.6.1-1</param>
        <param name="QTCREATOR_VERSION">4.1.0</param>
        <param name="QTCREATOR_MD5">a26a00b660e4bb5724515b426ce57942</param>
        <param name="QT_LIBS_AND_CREATOR_FILE">Qt-5.6-gcc64-qtcreator-installed-home-vagrant.tar.bz2</param>
        <param name="SOURCE_DIR">/var/go</param>
      </params>
      <environmentvariables>
        <variable name="MIRROR">
          <value>http://qtmirror.ics.com/pub/qtproject/archive/qt/#{MAINVERSION}/#{VERSION}/single/</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git://github.com/genivi/baseline_ci_helper" autoUpdate="false" materialName="dummy-not-used" />
      </materials>
      <stage name="stage">
        <jobs>
          <job name="job">
            <tasks>
              <exec command="wget">
                <arg>-c</arg>
                <arg>#{MIRROR}/qt-everywhere-opensource-src-#{VERSION}.#{ARCHIVE}</arg>
                <arg>-O</arg>
                <arg>/var/cache/qt/qt-everywhere-opensource-src-#{VERSION}.#{ARCHIVE}</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>[ "$(md5sum /var/cache/qt/qt-everywhere-opensource-src-#{VERSION}.#{ARCHIVE} | cut -c 1-32)" = "#{MD5}" ] &amp;&amp; echo "QTSRC MD5 OK"</arg>
                <runif status="any" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>[ -f /var/cache/qt/qtcreator-bin-#{QTCREATOR_VERSION}.tar.bz2 ] &amp;&amp; echo "CREATOR EXISTS"</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>[ "$(md5sum /var/cache/qt/qtcreator-bin-#{QTCREATOR_VERSION}.tar.bz2 | cut -c 1-32)" = "#{QTCREATOR_MD5}" ] &amp;&amp; echo "CREATOR MD5 OK"</arg>
                <runif status="passed" />
              </exec>
              <exec command="cp">
                <arg>#{SOURCE_DIR}/#{QT_LIBS_AND_CREATOR_FILE}</arg>
                <arg>.</arg>
                <runif status="passed" />
              </exec>
              <exec command="cp">
                <arg>/var/cache/qt/qtcreator-bin-#{QTCREATOR_VERSION}.tar.bz2</arg>
                <arg>.</arg>
                <runif status="passed" />
              </exec>
              <exec command="cp">
                <arg>/var/cache/qt/qt-everywhere-opensource-src-#{VERSION}.#{ARCHIVE}</arg>
                <arg>.</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>2131ce1bd33e</resource>
            </resources>
            <artifacts>
              <artifact src="qt-everywhere-opensource-src-*" />
              <artifact src="qtcreator-bin-*" />
              <artifact src="#{QT_LIBS_AND_CREATOR_FILE}" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="GDP_Spins">
    <authorization>
      <view>
        <user>AndreasR</user>
        <user>EBoto</user>
        <role>GDP_Developer</role>
      </view>
      <operate>
        <user>AndreasR</user>
        <user>EBoto</user>
        <role>GDP_Developer</role>
      </operate>
      <admins>
        <user>AndreasR</user>
        <user>EBoto</user>
      </admins>
    </authorization>
  </pipelines>
  <pipelines group="Administration_for_2131ce1bd33e">
    <authorization>
      <view>
        <user>GunnarA</user>
        <role>GDP_Developer</role>
      </view>
      <operate>
        <user>GunnarA</user>
        <role>GDP_Developer</role>
      </operate>
      <admins>
        <user>GunnarA</user>
        <role>GDP_Developer</role>
      </admins>
    </authorization>
    <pipeline name="Wipe_gdp_work_dir" isLocked="false" template="Wipe_dir_pattern">
      <params>
        <param name="agent">2131ce1bd33e</param>
        <param name="dir_pattern">/var/lib/go-agent/pipelines/*/*build/tmp/work/*</param>
      </params>
      <timer>0 0 4 ? * SUN *</timer>
      <materials>
        <git url="https://github.com/gunnarx/baseline_ci_helper.git" autoUpdate="false" materialName="not_used" />
      </materials>
    </pipeline>
    <pipeline name="DiskStatistics-test" isLocked="false">
      <materials>
        <git url="http://github.com/gunnarx/gocd-setup.git" />
      </materials>
      <stage name="stage">
        <approval type="manual" />
        <jobs>
          <job name="disk_usage">
            <tasks>
              <exec command="uname">
                <arg>-a</arg>
                <runif status="passed" />
              </exec>
              <exec command="df">
                <arg>-h</arg>
              </exec>
            </tasks>
            <resources>
              <resource>2131ce1bd33e</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Wipe_sstate_cache" template="Wipe_dir_pattern">
      <params>
        <param name="dir_pattern">/var/lib/go-agent/pipelines/__sstate_cache/*</param>
        <param name="agent">2131ce1bd33e</param>
      </params>
      <materials>
        <pipeline pipelineName="Wipe_gdp_work_dir" stageName="stage" />
      </materials>
    </pipeline>
    <pipeline name="Wipe_downloads" template="Wipe_dir_pattern">
      <params>
        <param name="dir_pattern">/var/lib/go-agent/pipelines/__downloads_cache/*</param>
        <param name="agent">2131ce1bd33e</param>
      </params>
      <materials>
        <pipeline pipelineName="Wipe_gdp_work_dir" stageName="stage" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Administration_for_codethink-genivigo-agent1-x86">
    <authorization>
      <view>
        <role>GDP_Developer</role>
      </view>
      <operate>
        <role>GDP_Developer</role>
      </operate>
      <admins>
        <role>GDP_Developer</role>
      </admins>
    </authorization>
    <pipeline name="Wipe_gdp_work_dir3" template="Wipe_dir_pattern">
      <params>
        <param name="dir_pattern">/var/lib/go-agent/pipelines/*/*build/tmp/work</param>
        <param name="agent">codethink-genivigo-agent1-x86</param>
      </params>
      <materials>
        <git url="https://github.com/gunnarx/baseline_ci_helper.git" autoUpdate="false" materialName="not_used" />
      </materials>
    </pipeline>
    <pipeline name="Wipe_gdp_downloads_dir3" template="Wipe_dir_pattern">
      <params>
        <param name="dir_pattern">/var/cache/yocto/downloads/*</param>
        <param name="agent">codethink-genivigo-agent1-x86</param>
      </params>
      <materials>
        <git url="https://github.com/gunnarx/baseline_ci_helper.git" autoUpdate="false" materialName="not_used" />
      </materials>
    </pipeline>
    <pipeline name="Wipe_gdp_sstate_dir3" template="Wipe_dir_pattern">
      <params>
        <param name="dir_pattern">/var/cache/yocto/sstate/*</param>
        <param name="agent">codethink-genivigo-agent1-x86</param>
      </params>
      <materials>
        <git url="https://github.com/gunnarx/baseline_ci_helper.git" autoUpdate="false" materialName="not_used" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Administration_for_go-agent-1">
    <authorization>
      <admins>
        <user>GunnarA</user>
        <user>PedroA</user>
        <user>tpollard</user>
        <role>GDP_Developer</role>
      </admins>
    </authorization>
    <pipeline name="Wipe_gdp_work_dir4" template="Wipe_dir_pattern">
      <params>
        <param name="dir_pattern">/var/lib/go-agent/pipelines/*/*build/tmp/work/*</param>
        <param name="agent">go-agent1</param>
      </params>
      <materials>
        <git url="https://github.com/gunnarx/baseline_ci_helper" />
      </materials>
    </pipeline>
    <pipeline name="Wipe_tmp_dirs" template="Wipe_dir_pattern">
      <params>
        <param name="dir_pattern">/var/lib/go-agent/pipelines/*/*build/tmp</param>
        <param name="agent">go-agent1</param>
      </params>
      <materials>
        <git url="https://github.com/gunnarx/baseline_ci_helper" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Upload-SDK">
    <authorization>
      <view>
        <role>GDP_Developer</role>
      </view>
      <admins>
        <user>GunnarA</user>
      </admins>
    </authorization>
    <pipeline name="upload-porter" isLocked="false" template="upload-sde">
      <params>
        <param name="MACHINE">porter</param>
      </params>
      <materials>
        <pipeline pipelineName="GDP-SDE-#{MACHINE}" stageName="CreateVM" materialName="sdk-porter" />
      </materials>
    </pipeline>
    <pipeline name="upload-qemux86-64" isLocked="false" template="upload-sde">
      <params>
        <param name="MACHINE">qemux86-64</param>
      </params>
      <materials>
        <pipeline pipelineName="GDP-SDE-#{MACHINE}" stageName="CreateVM" materialName="sdk-qemux86-64" />
      </materials>
    </pipeline>
    <pipeline name="upload-minnowboard" isLocked="false" template="upload-sde">
      <params>
        <param name="MACHINE">minnowboard</param>
      </params>
      <materials>
        <pipeline pipelineName="GDP-SDE-#{MACHINE}" stageName="CreateVM" materialName="sdk-minnowboard" />
      </materials>
    </pipeline>
    <pipeline name="upload-raspberrypi2" isLocked="false" template="upload-sde">
      <params>
        <param name="MACHINE">raspberrypi2</param>
      </params>
      <materials>
        <pipeline pipelineName="GDP-SDE-#{MACHINE}" stageName="CreateVM" materialName="sdk-raspberrypi2" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Administration_for_4e9148b1df8f" />
  <templates>
    <pipeline name="Yocto_GDP_generic">
      <authorization>
        <admins>
          <user>PedroA</user>
          <user>jonathanmaw</user>
          <user>tpollard</user>
          <user>gmacario</user>
        </admins>
      </authorization>
      <stage name="build">
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="rm" workingdir="gdp-src-build">
                <arg>-rf</arg>
                <arg>tmp</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source ./init.sh $MACHINE</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "porter" || "$MACHINE" == silk ]]; then cd meta-renesas/meta-rcar-gen2 &amp;&amp; ./copy_gfx_software_$MACHINE.sh /var/go/sgx_bin; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "porter" || "$MACHINE" == silk ]];  then cd meta-renesas/meta-rcar-gen2 &amp;&amp; ./copy_mm_software_lcb.sh /var/go/sgx_bin/; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp-src-build/conf">
                <arg>-c</arg>
                <arg>/bin/echo -e 'DL_DIR = "/var/cache/yocto/downloads"\nSSTATE_DIR = "/var/cache/yocto/sstate"' &gt;&gt;local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.name</arg>
                <arg>Go Server</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.email</arg>
                <arg>no_email@genivigo.com</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source poky/oe-init-build-env gdp-src-build &amp;&amp; bitbake genivi-dev-platform</arg>
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -f logs.tar logs.tar.gz &amp;&amp; find gdp-src-build/tmp/work \( -name "*.log" -o -name "log.*" -o -name "run.*" \) -print0 | xargs -0 tar uf logs.tar &amp;&amp; gzip logs.tar</arg>
                <runif status="any" />
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
            </resources>
            <artifacts>
              <artifact src="logs.tar.gz" />
              <artifact src="gdp-src-build/tmp/deploy/licenses" />
              <artifact src="gdp-src-build/tmp/deploy/licenses/genivi-dev-platform*/license.manifest" />
              <artifact src="gdp-src-build/tmp/deploy/licenses/genivi-dev-platform*/package.manifest" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Yocto_GDP_generic_release">
      <authorization>
        <admins>
          <user>PedroA</user>
          <user>jonathanmaw</user>
          <user>tpollard</user>
          <user>gmacario</user>
        </admins>
      </authorization>
      <stage name="build">
        <approval type="manual" />
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="rm" workingdir="gdp-src-build">
                <arg>-rf</arg>
                <arg>tmp</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>git checkout $BRANCH</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "dragonboard-410c" ]]; then source ./init.sh $MACHINE accept-eula; else source ./init.sh $MACHINE; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp-src-build">
                <arg>-c</arg>
                <arg>mkdir -p staging/$MACHINE</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>tar -zcf "gdp-src-build/staging/$MACHINE/oe-source.tar.gz" --exclude=gdp-src-build/{bitbake.lock,buildhistory,cache,downloads,sstate-cache,tmp,staging} --exclude=meta-{renesas,raspberrypi,intel,qcom} *</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp-src-build/conf">
                <arg>-c</arg>
                <arg>/bin/echo -e 'INHERIT += "archiver"\nARCHIVER_MODE[src] = "original"\nCOPY_LIC_MANIFEST = "1"\nCOPY_LIC_DIRS = "1"'&gt;&gt;local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.name</arg>
                <arg>Go Server</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.email</arg>
                <arg>no_email@genivigo.com</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source poky/oe-init-build-env gdp-src-build &amp;&amp; bitbake genivi-dev-platform</arg>
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>cp gdp-src-build/tmp/deploy/licenses/genivi-dev-platform-*/license.manifest gdp-src-build/staging/$MACHINE/$BRANCH-license.manifest</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>cp gdp-src-build/tmp/deploy/images/*/genivi-dev-platform-*.rootfs.manifest gdp-src-build/staging/$MACHINE/$BRANCH.rootfs.manifest</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>tar -zcf gdp-src-build/staging/$MACHINE/$BRANCH-licenses.tar.gz -C gdp-src-build/tmp/deploy/licenses .</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>tar -zcf gdp-src-build/staging/$MACHINE/$BRANCH-sources.tar.gz -C gdp-src-build/tmp/deploy/sources .</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "qemux86-64" ]]; then gzip -c gdp-src-build/tmp/deploy/images/*/genivi-dev-platform-qemux86-64.ext4 &gt; gdp-src-build/staging/$MACHINE/$BRANCH-qemu.ext4.gz; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "qemux86-64" ]]; then cp gdp-src-build/tmp/deploy/images/*/bzImage gdp-src-build/staging/$MACHINE/$BRANCH-qemu.bzImage; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "raspberrypi2" || "$MACHINE" == "raspberrypi3" ]]; then gzip -c gdp-src-build/tmp/deploy/images/*/genivi-dev-platform-*.rootfs.rpi-sdimg &gt; gdp-src-build/staging/$MACHINE/$BRANCH-rpi.sdimg.gz; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "minnowboard" ]]; then cp poky/scripts/contrib/mkefidisk.sh gdp-src-build/tmp/deploy/images/intel-corei7-64/ &amp;&amp; tar -zchf gdp-src-build/staging/$MACHINE/$BRANCH-minnowboard.hddimg.tar.gz -C gdp-src-build/tmp/deploy/images/intel-corei7-64 genivi-dev-platform-intel-corei7-64.hddimg mkefidisk.sh; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "dragonboard-410c" ]]; then gzip -c gdp-src-build/tmp/deploy/images/*/boot-dragonboard-410c.img &gt; gdp-src-build/staging/$MACHINE/$BRANCH-dragonboard.img.gz; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "dragonboard-410c" ]]; then cp gdp-src-build/tmp/deploy/images/*/genivi-dev-platform-dragonboard-410c.ext4.gz gdp-src-build/staging/$MACHINE/$BRANCH-dragonboard.ext4.gz; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp-src-build/staging/">
                <arg>-c</arg>
                <arg>cd $MACHINE &amp;&amp; md5sum * &gt; checksums.txt</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
            </resources>
            <artifacts>
              <artifact src="gdp-src-build/staging/" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Yocto_GDP_generic_latest_meta_genivi_demo">
      <authorization>
        <admins>
          <user>PedroA</user>
          <user>jonathanmaw</user>
          <user>tpollard</user>
          <user>gmacario</user>
        </admins>
      </authorization>
      <stage name="build">
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="bash" workingdir="gdp/gdp-src-build/">
                <arg>-c</arg>
                <arg>rm -rf tmp</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp">
                <arg>-c</arg>
                <arg>source ./init.sh $MACHINE</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "porter" || "$MACHINE" == silk ]]; then cd meta-renesas/meta-rcar-gen2 &amp;&amp; ./copy_gfx_software_$MACHINE.sh /var/go/sgx_bin; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "porter" || "$MACHINE" == silk ]];  then cd meta-renesas/meta-rcar-gen2 &amp;&amp; ./copy_mm_software_lcb.sh /var/go/sgx_bin/; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="rm" workingdir="gdp">
                <arg>-rf</arg>
                <arg>meta-genivi-dev</arg>
                <runif status="passed" />
              </exec>
              <exec command="mv" workingdir="gdp">
                <arg>../meta-genivi-dev</arg>
                <arg>meta-genivi-dev</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp/gdp-src-build/conf">
                <arg>-c</arg>
                <arg>/bin/echo -e 'DL_DIR = "/var/cache/yocto/downloads"\nSSTATE_DIR = "/var/cache/yocto/sstate"' &gt;&gt;local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.name</arg>
                <arg>Go Server</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.email</arg>
                <arg>no_email@genivigo.com</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp">
                <arg>-c</arg>
                <arg>source poky/oe-init-build-env gdp-src-build &amp;&amp; bitbake genivi-dev-platform</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -f logs.tar logs.tar.gz &amp;&amp; find gdp/gdp-src-build/tmp/work \( -name "*.log" -o -name "log.*" -o -name "run.*" \) -print0 | xargs -0 tar uf logs.tar &amp;&amp; gzip logs.tar</arg>
                <runif status="any" />
              </exec>
              <exec command="rm">
                <arg>-r</arg>
                <arg>gdp</arg>
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
            </resources>
            <artifacts>
              <artifact src="logs.tar.gz" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Yocto_GDP_generic_reuse_tmp">
      <authorization>
        <admins>
          <user>PedroA</user>
          <user>jonathanmaw</user>
          <user>tpollard</user>
          <user>gmacario</user>
        </admins>
      </authorization>
      <stage name="build">
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source ./init.sh $MACHINE</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "porter" || "$MACHINE" == silk ]]; then cd meta-renesas/meta-rcar-gen2 &amp;&amp; ./copy_gfx_software_$MACHINE.sh /var/go/sgx_bin; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "porter" || "$MACHINE" == silk ]];  then cd meta-renesas/meta-rcar-gen2 &amp;&amp; ./copy_mm_software_lcb.sh /var/go/sgx_bin/; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp-src-build/conf">
                <arg>-c</arg>
                <arg>/bin/echo -e 'DL_DIR = "/var/cache/yocto/downloads"\nSSTATE_DIR = "/var/cache/yocto/sstate"' &gt;&gt;local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.name</arg>
                <arg>Go Server</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.email</arg>
                <arg>no_email@genivigo.com</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source poky/oe-init-build-env gdp-src-build &amp;&amp; bitbake genivi-dev-platform</arg>
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -f logs.tar logs.tar.gz &amp;&amp; find gdp-src-build/tmp/work \( -name "*.log" -o -name "log.*" -o -name "run.*" \) -print0 | xargs -0 tar uf logs.tar &amp;&amp; gzip logs.tar</arg>
                <runif status="any" />
              </exec>
            </tasks>
            <resources>
              <resource>ga_test</resource>
            </resources>
            <artifacts>
              <artifact src="logs.tar.gz" />
              <artifact src="gdp-src-build/tmp/deploy/licenses" />
              <artifact src="gdp-src-build/tmp/deploy/licenses/genivi-dev-platform*/license.manifest" />
              <artifact src="gdp-src-build/tmp/deploy/licenses/genivi-dev-platform*/package.manifest" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="franca_install_automation">
      <authorization>
        <admins>
          <user>gmacario</user>
        </admins>
      </authorization>
      <stage name="install_stage">
        <jobs>
          <job name="install_job">
            <environmentvariables>
              <variable name="EXIT_ON_FAILURE">
                <value>true</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="./script.sh" />
              <exec command="bash">
                <arg>-c</arg>
                <arg>cd /var/go/tools &amp;&amp; tar cfz ${GO_PIPELINE_NAME}_${GO_REVISION_FRANCA_INSTALL_AUTOMATION_GIT}.tar.gz autoeclipse</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mv /var/go/tools/${GO_PIPELINE_NAME}_${GO_REVISION_FRANCA_INSTALL_AUTOMATION_GIT}.tar.gz .</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="franca_install*.tar.gz" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="CMAKE_build">
      <authorization>
        <admins>
          <user>PedroA</user>
          <user>gmacario</user>
          <user>marcor</user>
          <user>tpollard</user>
          <user>jonathanmaw</user>
        </admins>
      </authorization>
      <stage name="build" artifactCleanupProhibited="true">
        <jobs>
          <job name="cmake_and_make">
            <tasks>
              <exec command="rm">
                <arg>-rf</arg>
                <arg>build</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>build</arg>
                <runif status="passed" />
              </exec>
              <exec command="cmake" workingdir="build">
                <arg>..</arg>
                <runif status="passed" />
              </exec>
              <exec command="make" workingdir="build">
                <arg>V=1</arg>
                <arg>-j2</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>cmake</resource>
            </resources>
            <artifacts>
              <artifact src="build" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="meta-ivi-build">
      <authorization>
        <admins>
          <user>PedroA</user>
          <user>gmacario</user>
          <user>jonathanmaw</user>
          <user>mhoyer</user>
          <user>tolkien</user>
          <user>tpollard</user>
        </admins>
      </authorization>
      <stage name="Build">
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="git" workingdir="meta-ivi">
                <arg>config</arg>
                <arg>user.name</arg>
                <arg>Go Agent</arg>
                <runif status="passed" />
              </exec>
              <exec command="git" workingdir="meta-ivi">
                <arg>config</arg>
                <arg>user.email</arg>
                <arg>no_email@genivigo.com</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="baseline_ci_helper">
                <arg>-c</arg>
                <arg>./checkout_layer_hash.sh poky</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="baseline_ci_helper">
                <arg>-c</arg>
                <arg>./checkout_layer_hash.sh meta-openembedded</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>export TEMPLATECONF=$PWD/meta-ivi/meta-ivi/conf &amp;&amp; source poky/oe-init-build-env</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="build/conf">
                <arg>-c</arg>
                <arg>/bin/echo -e 'DL_DIR = "/var/cache/yocto/downloads"\nSSTATE_DIR = "/var/cache/yocto/sstate"' &gt;&gt;local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source poky/oe-init-build-env &amp;&amp; bitbake -c fetch linux-yocto</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source poky/oe-init-build-env &amp;&amp; bitbake $IMAGE_NAME</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -f logs.tar logs.tar.gz &amp;&amp; find build/tmp/work \( -name "*.log" -o -name "log.*" -o -name "run.*" \) -print0 | xargs -0 tar uf logs.tar &amp;&amp; gzip logs.tar</arg>
                <runif status="any" />
              </exec>
            </tasks>
            <resources>
              <resource>new_test</resource>
            </resources>
            <artifacts>
              <artifact src="logs.tar.gz" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Yocto_GDP_build_SDK">
      <authorization>
        <admins>
          <user>PedroA</user>
          <user>jonathanmaw</user>
          <user>tpollard</user>
          <user>gmacario</user>
        </admins>
      </authorization>
      <stage name="build">
        <approval type="manual" />
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="rm" workingdir="gdp-src-build">
                <arg>-rf</arg>
                <arg>tmp</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source ./init.sh $MACHINE</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "porter" || "$MACHINE" == silk ]]; then cd meta-renesas/meta-rcar-gen2 &amp;&amp; ./copy_gfx_software_$MACHINE.sh /var/go/sgx_bin; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$MACHINE" == "porter" || "$MACHINE" == silk ]];  then cd meta-renesas/meta-rcar-gen2 &amp;&amp; ./copy_mm_software_lcb.sh /var/go/sgx_bin/; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.name</arg>
                <arg>Go Server</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.email</arg>
                <arg>no_email@genivigo.com</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp-src-build/conf">
                <arg>-c</arg>
                <arg>echo -e 'BB_NUMBER_THREADS = "2"\nPARALLEL_MAKE = "-j2"\nINHERIT += "rm_work"' &gt;&gt; local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp-src-build/conf">
                <arg>-c</arg>
                <arg>/bin/echo -e 'DL_DIR = "/var/cache/yocto/downloads"\nSSTATE_DIR = "/var/cache/yocto/sstate"' &gt;&gt;local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$BUILD_SDK" != "true" ]] ; then source poky/oe-init-build-env gdp-src-build &amp;&amp; bitbake genivi-dev-platform ; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$BUILD_SDK" == "true" ]] ; then source poky/oe-init-build-env gdp-src-build &amp;&amp; bitbake genivi-dev-platform-sdk ; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [[ "$BUILD_SDK" == "true" ]] ; then source poky/oe-init-build-env gdp-src-build &amp;&amp; bitbake meta-ide-support ; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -f logs.tar logs.tar.gz &amp;&amp; find gdp-src-build/tmp/work \( -name "*.log" -o -name "log.*" -o -name "run.*" \) -print0 | xargs -0 tar uf logs.tar &amp;&amp; gzip logs.tar</arg>
                <runif status="any" />
              </exec>
            </tasks>
            <resources>
              <resource>yocto_build</resource>
            </resources>
            <artifacts>
              <artifact src="gdp-src-build/tmp/deploy/licenses" dest="results" />
              <artifact src="gdp-src-build/tmp/deploy/licenses/genivi-dev-platform*/license.manifest" dest="results" />
              <artifact src="gdp-src-build/tmp/deploy/licenses/genivi-dev-platform*/package.manifest" dest="results" />
              <artifact src="gdp-src-build/tmp/deploy/sdk*" dest="results" />
              <artifact src="logs.tar.gz" dest="results" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Wipe_dir_pattern">
      <authorization>
        <admins>
          <user>tpollard</user>
          <user>PedroA</user>
          <user>jonathanmaw</user>
          <user>StephenL</user>
        </admins>
      </authorization>
      <stage name="stage" fetchMaterials="false">
        <approval type="manual" />
        <jobs>
          <job name="job">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>echo "dir-pattern glob matches: " &amp;&amp; ls #{dir_pattern} || true</arg>
                <runif status="any" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>echo "Disk usage:" &amp;&amp; du -hs #{dir_pattern} || true</arg>
                <runif status="any" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -rf #{dir_pattern}</arg>
                <runif status="any" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>echo "Pipelines disk usage:" &amp;&amp; du -hs /var/lib/go-agent/pipelines/* || true</arg>
                <runif status="any" />
              </exec>
            </tasks>
            <resources>
              <resource>#{agent}</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="upload-sde">
      <stage name="stage">
        <jobs>
          <job name="job">
            <tasks>
              <fetchartifact pipeline="GDP-SDE-#{MACHINE}" stage="CreateVM" job="run_vagrant" srcdir="results" dest="#{MACHINE}">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash">
                <arg>-c</arg>
                <arg>md5sum #{MACHINE}/results/gdp-sdk*.tar.gz</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="#{MACHINE}/results">
                <arg>-c</arg>
                <arg>~/upload gdp-sdk*.tar.gz</arg>
                <runif status="any" />
              </exec>
            </tasks>
            <resources>
              <resource>uploader</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="GDP_SDE_generic">
      <stage name="Assemble">
        <approval type="manual" />
        <jobs>
          <job name="gdp-sdk">
            <environmentvariables>
              <variable name="SDK_INSTALLER_NAME">
                <value>oecore-raspberry-toolchain-nodistro.0.sh</value>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact pipeline="GDP-Yocto-#{MACHINE}_SDK" stage="build" job="init_and_bitbake" srcdir="results" dest="#{MACHINE}">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Eclipse-for-SDK-2" stage="stage" job="job" srcdir="results" dest="eclipse">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="common-api-cpp-tools" stage="build" job="build" srcdir="bin" dest="capicxx">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="common-api-cpp-dbus-tools" stage="build" job="build" srcdir="bin" dest="capicxx-dbus">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="common-api-cpp-someip-tools" stage="build" job="build" srcdir="bin" dest="capicxx-someip">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash">
                <arg>-c</arg>
                <arg>rm -rf gdp-sdk ; mkdir -p gdp-sdk/bin</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mv capicxx*/bin/{*64,*64.ini} gdp-sdk/bin</arg>
                <runif status="passed" />
              </exec>
              <exec command="mv">
                <arg>eclipse/results/eclipse</arg>
                <arg>gdp-sdk/</arg>
                <runif status="passed" />
              </exec>
              <exec command="mv">
                <arg>eclipse/results/workspace</arg>
                <arg>gdp-sdk/</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mv #{MACHINE}/results/genivi-dev-platform-*/license.manifest gdp-sdk/license.manifest.#{MACHINE}</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>gdp-sdk/yocto-sdk/#{MACHINE}</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>chmod 755 */results/sdk/oecore-*toolchain*.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="chmod">
                <arg>-R</arg>
                <arg>u+r</arg>
                <arg>gdp-sdk/yocto-sdk</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mv ./#{MACHINE}/results/sdk/oecore-*toolchain*.sh ./gdp-sdk/ &amp;&amp; mkdir -p ./gdp-sdk/yocto-sdk/#{MACHINE}</arg>
                <runif status="passed" />
              </exec>
              <exec command="tar">
                <arg>cfz</arg>
                <arg>gdp-sdk-#{MACHINE}.tar.gz</arg>
                <arg>gdp-sdk</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>ga_test</resource>
            </resources>
            <artifacts>
              <artifact src="gdp-sdk-#{MACHINE}.tar.gz" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="CreateVM">
        <environmentvariables>
          <variable name="VMNAME">
            <value>gdp-sdk-#{MACHINE}</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="run_vagrant">
            <environmentvariables>
              <variable name="MACHINE">
                <value>#{MACHINE}</value>
              </variable>
              <variable name="VMNAME">
                <value>gdp-sdk-#{MACHINE}</value>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact pipeline="Seed-QtLibs-and-creator" stage="stage" job="job" srcfile="Qt-5.6-gcc64-qtcreator-installed-home-vagrant.tar.bz2">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="homedir">
                <arg>-c</arg>
                <arg>tar xf ../Qt*.tar.bz2</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="" stage="Assemble" job="gdp-sdk" srcfile="gdp-sdk-#{MACHINE}.tar.gz">
                <runif status="passed" />
              </fetchartifact>
              <exec command="tar" workingdir="homedir">
                <arg>xfz</arg>
                <arg>../gdp-sdk-#{MACHINE}.tar.gz</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="DLT-Viewer" stage="stage" job="job" srcdir="dlt-viewer" dest="homedir">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="homedir/dlt-viewer">
                <arg>-xc</arg>
                <arg>GO_QT_LOCATION=../Qt-5.6/5.6/gcc_64 ../install-dlt-viewer.sh /home/vagrant/Qt-5.6/5.6/gcc_64</arg>
                <runif status="passed" />
              </exec>
              <exec command="vagrant">
                <arg>destroy</arg>
                <arg>-f</arg>
                <runif status="passed" />
              </exec>
              <exec command="vagrant">
                <arg>up</arg>
                <arg>--provision</arg>
                <runif status="passed" />
              </exec>
              <exec command="vagrant">
                <arg>halt</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>cd "/var/go/VirtualBox VMs/$(cat VMNAME)" &amp;&amp; f=buildinfo.txt &amp;&amp; echo -n "VM build completed on agent named: " &gt;"$f" &amp;&amp; hostname &gt;&gt; "$f" &amp;&amp; date &gt;&gt; "$f" &amp;&amp; env &gt;&gt;"$f"</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>tar cvfz vimage_temp -C "/var/go/VirtualBox VMs" "$(cat VMNAME)"</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>DATE=$(date +%Y%m%d_%H%M%S) &amp;&amp; SIZE=$(du -hs vimage_temp | awk '{print $1}') &amp;&amp; mv vimage_temp gdp-sdk-#{MACHINE}-virtualbox-image_$DATE_\($SIZE\).tar.gz</arg>
                <runif status="passed" />
              </exec>
              <exec command="vagrant">
                <arg>destroy</arg>
                <arg>-f</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>vagrant</resource>
            </resources>
            <artifacts>
              <artifact src="gdp-sdk-#{MACHINE}-virtualbox-image*.tar.gz" dest="results" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="ManualTest">
        <approval type="manual" />
        <jobs>
          <job name="Trigger">
            <tasks>
              <exec command="test" />
            </tasks>
            <resources>
              <resource>ga_test</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="Copy_to_web_server">
        <approval type="manual" />
        <jobs>
          <job name="copy">
            <tasks>
              <exec command="true">
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>ga_test</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </templates>
  <agents>
    <agent hostname="codethink-genivigo-agent1-x86" ipaddress="192.168.122.1" uuid="98b572c4-d559-4ed2-8b00-f4c25851e443">
      <resources>
        <resource>ct_test</resource>
        <resource>codethink-genivigo-agent1-x86</resource>
        <resource>yocto_build</resource>
        <resource>renesas_binaries</resource>
      </resources>
    </agent>
    <agent hostname="2131ce1bd33e" ipaddress="172.17.0.80" uuid="ce4f9ef6-91a4-44c3-881e-3486ff87a2aa">
      <resources>
        <resource>cmake</resource>
        <resource>maven</resource>
        <resource>libtool</resource>
        <resource>lbs</resource>
        <resource>renesas_binaries</resource>
        <resource>ga_test</resource>
        <resource>2131ce1bd33e</resource>
        <resource>yocto_build</resource>
        <resource>mount_exec</resource>
        <resource>java</resource>
      </resources>
    </agent>
    <agent hostname="go-agent1" ipaddress="10.100.10.120" uuid="eb6be62e-2380-4537-b74b-18ff7265ac4c">
      <resources>
        <resource>new_test</resource>
        <resource>go-agent1</resource>
        <resource>java</resource>
      </resources>
    </agent>
    <agent hostname="14dd4c9f3385" ipaddress="172.17.0.81" uuid="6bb7281c-682f-4659-8370-ffa4048d03df">
      <resources>
        <resource>vagrant</resource>
        <resource>uploader</resource>
        <resource>14dd4c9f3385</resource>
      </resources>
    </agent>
    <agent hostname="4e9148b1df8f" ipaddress="172.17.0.2" uuid="2f89504d-75ab-42c6-b4d4-ccd7b6902ea0">
      <resources>
        <resource>4e9148b1df8f</resource>
        <resource>yocto_build</resource>
        <resource>new_test</resource>
      </resources>
    </agent>
  </agents>
</cruise>

